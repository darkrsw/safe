package kr.ac.kaist.jsaf.nodes;

import java.lang.Double;
import java.lang.String;
import java.math.BigInteger;
import java.io.Writer;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.LinkedList;
import kr.ac.kaist.jsaf.nodes_util.*;
import kr.ac.kaist.jsaf.useful.*;
import edu.rice.cs.plt.tuple.Option;

/** A utility class for deserializing a node description generated by 
  * serialize(java.io.Writer).
  */
@SuppressWarnings("unused")
public class IRNodeReader {

    public static IRNode read(java.lang.String s) throws java.io.IOException {
        return read(new java.io.StringReader(s));
    }

    public static IRNode read(java.io.Reader r) throws java.io.IOException {
        return new IRNodeReader(new java.io.BufferedReader(r)).readIRNode();
    }

    protected java.io.BufferedReader in;
    protected char currentChar=' ';

    protected IRNodeReader(java.io.BufferedReader r) { in = r; }

    public IRNode readIRNode() throws java.io.IOException {
        java.lang.String name = readWord();
        if (name.equals("_")) return null;
        if (name.equals("IRRoot:")) return readIRRootBody();
        if (name.equals("IRExprStmt:")) return readIRExprStmtBody();
        if (name.equals("IRDelete:")) return readIRDeleteBody();
        if (name.equals("IRDeleteProp:")) return readIRDeletePropBody();
        if (name.equals("IRObject:")) return readIRObjectBody();
        if (name.equals("IRArray:")) return readIRArrayBody();
        if (name.equals("IRArrayNumber:")) return readIRArrayNumberBody();
        if (name.equals("IRArgs:")) return readIRArgsBody();
        if (name.equals("IRCall:")) return readIRCallBody();
        if (name.equals("IRInternalCall:")) return readIRInternalCallBody();
        if (name.equals("IRNew:")) return readIRNewBody();
        if (name.equals("IRFunExpr:")) return readIRFunExprBody();
        if (name.equals("IREval:")) return readIREvalBody();
        if (name.equals("IRStmtUnit:")) return readIRStmtUnitBody();
        if (name.equals("IRStore:")) return readIRStoreBody();
        if (name.equals("IRFunDecl:")) return readIRFunDeclBody();
        if (name.equals("IRBreak:")) return readIRBreakBody();
        if (name.equals("IRReturn:")) return readIRReturnBody();
        if (name.equals("IRWith:")) return readIRWithBody();
        if (name.equals("IRLabelStmt:")) return readIRLabelStmtBody();
        if (name.equals("IRVarStmt:")) return readIRVarStmtBody();
        if (name.equals("IRThrow:")) return readIRThrowBody();
        if (name.equals("IRSeq:")) return readIRSeqBody();
        if (name.equals("IRIf:")) return readIRIfBody();
        if (name.equals("IRWhile:")) return readIRWhileBody();
        if (name.equals("IRTry:")) return readIRTryBody();
        if (name.equals("IRNoOp:")) return readIRNoOpBody();
        if (name.equals("IRField:")) return readIRFieldBody();
        if (name.equals("IRGetProp:")) return readIRGetPropBody();
        if (name.equals("IRSetProp:")) return readIRSetPropBody();
        if (name.equals("IRBin:")) return readIRBinBody();
        if (name.equals("IRUn:")) return readIRUnBody();
        if (name.equals("IRLoad:")) return readIRLoadBody();
        if (name.equals("IRUserId:")) return readIRUserIdBody();
        if (name.equals("IRTmpId:")) return readIRTmpIdBody();
        if (name.equals("IRThis:")) return readIRThisBody();
        if (name.equals("IRNumber:")) return readIRNumberBody();
        if (name.equals("IRString:")) return readIRStringBody();
        if (name.equals("IRBool:")) return readIRBoolBody();
        if (name.equals("IRUndef:")) return readIRUndefBody();
        if (name.equals("IRNull:")) return readIRNullBody();
        if (name.equals("IROp:")) return readIROpBody();
        if (name.equals("IRFunctional:")) return readIRFunctionalBody();
        if (name.equals("IRSpanInfo:")) return readIRSpanInfoBody();
        throw error();
    }

    private IRRoot readIRRootBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("fds = ");
        List<IRFunDecl> read_fds = readListOfIRFunDecl();
        readFieldDelim("vds = ");
        List<IRVarStmt> read_vds = readListOfIRVarStmt();
        readFieldDelim("irs = ");
        List<IRStmt> read_irs = readListOfIRStmt();
        return new IRRoot(read_info, read_fds, read_vds, read_irs);
    }

    private IRExprStmt readIRExprStmtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("right = ");
        IRExpr read_right = (IRExpr) readIRNode();
        readFieldDelim("ref = ");
        boolean read_ref = readBoolean();
        return new IRExprStmt(read_info, read_lhs, read_right, read_ref);
    }

    private IRDelete readIRDeleteBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("id = ");
        IRId read_id = (IRId) readIRNode();
        return new IRDelete(read_info, read_lhs, read_id);
    }

    private IRDeleteProp readIRDeletePropBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("obj = ");
        IRId read_obj = (IRId) readIRNode();
        readFieldDelim("index = ");
        IRExpr read_index = (IRExpr) readIRNode();
        return new IRDeleteProp(read_info, read_lhs, read_obj, read_index);
    }

    private IRObject readIRObjectBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("members = ");
        List<IRMember> read_members = readListOfIRMember();
        readFieldDelim("proto = ");
        Option<IRId> read_proto = readOptionOfIRId();
        return new IRObject(read_info, read_lhs, read_members, read_proto);
    }

    private IRArray readIRArrayBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("elements = ");
        List<Option<IRExpr>> read_elements = readListOfOptionOfIRExpr();
        return new IRArray(read_info, read_lhs, read_elements);
    }

    private IRArrayNumber readIRArrayNumberBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("elements = ");
        List<Double> read_elements = readListOfDouble();
        return new IRArrayNumber(read_info, read_lhs, read_elements);
    }

    private IRArgs readIRArgsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("elements = ");
        List<Option<IRExpr>> read_elements = readListOfOptionOfIRExpr();
        return new IRArgs(read_info, read_lhs, read_elements);
    }

    private IRCall readIRCallBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("fun = ");
        IRId read_fun = (IRId) readIRNode();
        readFieldDelim("thisB = ");
        IRId read_thisB = (IRId) readIRNode();
        readFieldDelim("args = ");
        IRId read_args = (IRId) readIRNode();
        return new IRCall(read_info, read_lhs, read_fun, read_thisB, read_args);
    }

    private IRInternalCall readIRInternalCallBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("fun = ");
        IRId read_fun = (IRId) readIRNode();
        readFieldDelim("first = ");
        IRExpr read_first = (IRExpr) readIRNode();
        readFieldDelim("second = ");
        Option<IRId> read_second = readOptionOfIRId();
        return new IRInternalCall(read_info, read_lhs, read_fun, read_first, read_second);
    }

    private IRNew readIRNewBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("fun = ");
        IRId read_fun = (IRId) readIRNode();
        readFieldDelim("args = ");
        List<IRId> read_args = readListOfIRId();
        return new IRNew(read_info, read_lhs, read_fun, read_args);
    }

    private IRFunExpr readIRFunExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("ftn = ");
        IRFunctional read_ftn = (IRFunctional) readIRNode();
        return new IRFunExpr(read_info, read_lhs, read_ftn);
    }

    private IREval readIREvalBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("arg = ");
        IRExpr read_arg = (IRExpr) readIRNode();
        return new IREval(read_info, read_lhs, read_arg);
    }

    private IRStmtUnit readIRStmtUnitBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("stmts = ");
        List<IRStmt> read_stmts = readListOfIRStmt();
        return new IRStmtUnit(read_info, read_stmts);
    }

    private IRStore readIRStoreBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("obj = ");
        IRId read_obj = (IRId) readIRNode();
        readFieldDelim("index = ");
        IRExpr read_index = (IRExpr) readIRNode();
        readFieldDelim("rhs = ");
        IRExpr read_rhs = (IRExpr) readIRNode();
        return new IRStore(read_info, read_obj, read_index, read_rhs);
    }

    private IRFunDecl readIRFunDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("ftn = ");
        IRFunctional read_ftn = (IRFunctional) readIRNode();
        return new IRFunDecl(read_info, read_ftn);
    }

    private IRBreak readIRBreakBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("label = ");
        IRId read_label = (IRId) readIRNode();
        return new IRBreak(read_info, read_label);
    }

    private IRReturn readIRReturnBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("expr = ");
        Option<IRExpr> read_expr = readOptionOfIRExpr();
        return new IRReturn(read_info, read_expr);
    }

    private IRWith readIRWithBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("id = ");
        IRId read_id = (IRId) readIRNode();
        readFieldDelim("stmt = ");
        IRStmt read_stmt = (IRStmt) readIRNode();
        return new IRWith(read_info, read_id, read_stmt);
    }

    private IRLabelStmt readIRLabelStmtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("label = ");
        IRId read_label = (IRId) readIRNode();
        readFieldDelim("stmt = ");
        IRStmt read_stmt = (IRStmt) readIRNode();
        return new IRLabelStmt(read_info, read_label, read_stmt);
    }

    private IRVarStmt readIRVarStmtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("lhs = ");
        IRId read_lhs = (IRId) readIRNode();
        readFieldDelim("fromParam = ");
        boolean read_fromParam = readBoolean();
        return new IRVarStmt(read_info, read_lhs, read_fromParam);
    }

    private IRThrow readIRThrowBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("expr = ");
        IRExpr read_expr = (IRExpr) readIRNode();
        return new IRThrow(read_info, read_expr);
    }

    private IRSeq readIRSeqBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("stmts = ");
        List<IRStmt> read_stmts = readListOfIRStmt();
        return new IRSeq(read_info, read_stmts);
    }

    private IRIf readIRIfBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("expr = ");
        IRExpr read_expr = (IRExpr) readIRNode();
        readFieldDelim("trueB = ");
        IRStmt read_trueB = (IRStmt) readIRNode();
        readFieldDelim("falseB = ");
        Option<IRStmt> read_falseB = readOptionOfIRStmt();
        return new IRIf(read_info, read_expr, read_trueB, read_falseB);
    }

    private IRWhile readIRWhileBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("cond = ");
        IRExpr read_cond = (IRExpr) readIRNode();
        readFieldDelim("body = ");
        IRStmt read_body = (IRStmt) readIRNode();
        return new IRWhile(read_info, read_cond, read_body);
    }

    private IRTry readIRTryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("body = ");
        IRStmt read_body = (IRStmt) readIRNode();
        readFieldDelim("name = ");
        Option<IRId> read_name = readOptionOfIRId();
        readFieldDelim("catchB = ");
        Option<IRStmt> read_catchB = readOptionOfIRStmt();
        readFieldDelim("finallyB = ");
        Option<IRStmt> read_finallyB = readOptionOfIRStmt();
        return new IRTry(read_info, read_body, read_name, read_catchB, read_finallyB);
    }

    private IRNoOp readIRNoOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("desc = ");
        String read_desc = readString();
        return new IRNoOp(read_info, read_desc);
    }

    private IRField readIRFieldBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("prop = ");
        IRId read_prop = (IRId) readIRNode();
        readFieldDelim("expr = ");
        IRExpr read_expr = (IRExpr) readIRNode();
        return new IRField(read_info, read_prop, read_expr);
    }

    private IRGetProp readIRGetPropBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("ftn = ");
        IRFunctional read_ftn = (IRFunctional) readIRNode();
        return new IRGetProp(read_info, read_ftn);
    }

    private IRSetProp readIRSetPropBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("ftn = ");
        IRFunctional read_ftn = (IRFunctional) readIRNode();
        return new IRSetProp(read_info, read_ftn);
    }

    private IRBin readIRBinBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("first = ");
        IRExpr read_first = (IRExpr) readIRNode();
        readFieldDelim("op = ");
        IROp read_op = (IROp) readIRNode();
        readFieldDelim("second = ");
        IRExpr read_second = (IRExpr) readIRNode();
        return new IRBin(read_info, read_first, read_op, read_second);
    }

    private IRUn readIRUnBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("op = ");
        IROp read_op = (IROp) readIRNode();
        readFieldDelim("expr = ");
        IRExpr read_expr = (IRExpr) readIRNode();
        return new IRUn(read_info, read_op, read_expr);
    }

    private IRLoad readIRLoadBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("obj = ");
        IRId read_obj = (IRId) readIRNode();
        readFieldDelim("index = ");
        IRExpr read_index = (IRExpr) readIRNode();
        return new IRLoad(read_info, read_obj, read_index);
    }

    private IRUserId readIRUserIdBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("originalName = ");
        String read_originalName = readString();
        readFieldDelim("uniqueName = ");
        String read_uniqueName = readString();
        readFieldDelim("global = ");
        boolean read_global = readBoolean();
        readFieldDelim("with = ");
        boolean read_with = readBoolean();
        return new IRUserId(read_info, read_originalName, read_uniqueName, read_global, read_with);
    }

    private IRTmpId readIRTmpIdBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("originalName = ");
        String read_originalName = readString();
        readFieldDelim("uniqueName = ");
        String read_uniqueName = readString();
        readFieldDelim("global = ");
        boolean read_global = readBoolean();
        return new IRTmpId(read_info, read_originalName, read_uniqueName, read_global);
    }

    private IRThis readIRThisBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        return new IRThis(read_info);
    }

    private IRNumber readIRNumberBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("num = ");
        Double read_num = (Double) readUnknownObject();
        return new IRNumber(read_info, read_text, read_num);
    }

    private IRString readIRStringBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("str = ");
        String read_str = readString();
        return new IRString(read_info, read_str);
    }

    private IRBool readIRBoolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        readFieldDelim("bool = ");
        boolean read_bool = readBoolean();
        return new IRBool(read_info, read_bool);
    }

    private IRUndef readIRUndefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        return new IRUndef(read_info);
    }

    private IRNull readIRNullBody() throws java.io.IOException {
        readFieldDelim("info = ");
        IRSpanInfo read_info = (IRSpanInfo) readIRNode();
        return new IRNull(read_info);
    }

    private IROp readIROpBody() throws java.io.IOException {
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("kind = ");
        int read_kind = readInt();
        return new IROp(read_text, read_kind);
    }

    private IRFunctional readIRFunctionalBody() throws java.io.IOException {
        readFieldDelim("fromSource = ");
        boolean read_fromSource = readBoolean();
        readFieldDelim("name = ");
        IRId read_name = (IRId) readIRNode();
        readFieldDelim("params = ");
        List<IRId> read_params = readListOfIRId();
        readFieldDelim("args = ");
        List<IRStmt> read_args = readListOfIRStmt();
        readFieldDelim("fds = ");
        List<IRFunDecl> read_fds = readListOfIRFunDecl();
        readFieldDelim("vds = ");
        List<IRVarStmt> read_vds = readListOfIRVarStmt();
        readFieldDelim("body = ");
        List<IRStmt> read_body = readListOfIRStmt();
        return new IRFunctional(read_fromSource, read_name, read_params, read_args, read_fds, read_vds, read_body);
    }

    private IRSpanInfo readIRSpanInfoBody() throws java.io.IOException {
        readFieldDelim("fromSource = ");
        boolean read_fromSource = readBoolean();
        readFieldDelim("span = ");
        Span read_span = (Span) readUnknownObject();
        return new IRSpanInfo(read_fromSource, read_span);
    }


    private List<IRFunDecl> readListOfIRFunDecl() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<IRFunDecl> accum = new java.util.ArrayList<IRFunDecl>();
        while (readMoreListElements()) {
            accum.add((IRFunDecl) readIRNode());
        }
        return accum;
    }

    private List<IRVarStmt> readListOfIRVarStmt() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<IRVarStmt> accum = new java.util.ArrayList<IRVarStmt>();
        while (readMoreListElements()) {
            accum.add((IRVarStmt) readIRNode());
        }
        return accum;
    }

    private List<IRStmt> readListOfIRStmt() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<IRStmt> accum = new java.util.ArrayList<IRStmt>();
        while (readMoreListElements()) {
            accum.add((IRStmt) readIRNode());
        }
        return accum;
    }

    private List<IRMember> readListOfIRMember() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<IRMember> accum = new java.util.ArrayList<IRMember>();
        while (readMoreListElements()) {
            accum.add((IRMember) readIRNode());
        }
        return accum;
    }

    private Option<IRId> readOptionOfIRId() throws java.io.IOException {
        if (readOptionHeader()) {
            IRId elt_result = (IRId) readIRNode();
            readExpected(")");
            return Option.<IRId>some(elt_result);
        }
        else { return Option.<IRId>none(); }
    }

    private Option<IRExpr> readOptionOfIRExpr() throws java.io.IOException {
        if (readOptionHeader()) {
            IRExpr elt_result = (IRExpr) readIRNode();
            readExpected(")");
            return Option.<IRExpr>some(elt_result);
        }
        else { return Option.<IRExpr>none(); }
    }

    private List<Option<IRExpr>> readListOfOptionOfIRExpr() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Option<IRExpr>> accum = new java.util.ArrayList<Option<IRExpr>>();
        while (readMoreListElements()) {
            accum.add(readOptionOfIRExpr());
        }
        return accum;
    }

    private List<Double> readListOfDouble() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Double> accum = new java.util.ArrayList<Double>();
        while (readMoreListElements()) {
            accum.add((Double) readUnknownObject());
        }
        return accum;
    }

    private List<IRId> readListOfIRId() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<IRId> accum = new java.util.ArrayList<IRId>();
        while (readMoreListElements()) {
            accum.add((IRId) readIRNode());
        }
        return accum;
    }

    private Option<IRStmt> readOptionOfIRStmt() throws java.io.IOException {
        if (readOptionHeader()) {
            IRStmt elt_result = (IRStmt) readIRNode();
            readExpected(")");
            return Option.<IRStmt>some(elt_result);
        }
        else { return Option.<IRStmt>none(); }
    }

    protected boolean readBoolean() throws java.io.IOException {
      char c = readCharWord();
      char t = c;
      while (!java.lang.Character.isWhitespace(t)) t=next();
      if (c=='t') return true;
      if (c=='f') return false;
      throw error();
    }
    
    protected char readChar() throws java.io.IOException {
      readExpected("\"");
      java.lang.String word = readTo('"', true);
      java.lang.String result = unescape(word);
      if (result.length() != 1) throw error();
      return result.charAt(0);
    }
    
    protected byte readByte() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Byte.parseByte(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected short readShort() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Short.parseShort(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected int readInt() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Integer.parseInt(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected long readLong() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Long.parseLong(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected float readFloat() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Float.parseFloat(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected double readDouble() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Double.parseDouble(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected java.lang.String readString() throws java.io.IOException {
      char delim = readCharWord();
      if (delim == '_') { return null; }
      if (delim != '"') { throw error(); }
      next();
      java.lang.String word = readTo('"', true);
      return unescape(word);
    }
    
    protected Object wordToUnknownObject(java.lang.String word) throws java.io.IOException {
      if (word.equals("_")) return null;
      java.io.ObjectInputStream objIn = toObjectStream(word);
      try { return objIn.readObject(); } // may throw an IOException
      catch (java.lang.ClassNotFoundException e) {
        throw new java.io.IOException("ClassNotFoundException: " + e.getMessage());
      }
      finally {
        try { objIn.close(); }
        catch (java.io.IOException e) { /* made a best attempt; ignore */ }
      }
    }
    
    protected Object readUnknownObject() throws java.io.IOException {
      java.lang.String word = readWord();
      readToNewline();
      return wordToUnknownObject(word);
    }
    
    /** Read the next word, delimited by whitespace, starting from curr().
        curr() is next whitespace char after word. */
    protected java.lang.String readWord() throws java.io.IOException {
      char c = readCharWord();
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      do {
        result.append(c);
        c = next();
      } while (!java.lang.Character.isWhitespace(c));
      return result.toString();
    }
    
    /** Read the next number starting with curr(): whitespace, possible
        '-', digit sequence.  curr() is first non-digit char
        thereafter. */
    protected java.lang.String readNum() throws java.io.IOException {
      char c = readCharWord();
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      if (c!='-' && !java.lang.Character.isDigit(c))
        throw error();
      do {
        result.append(c);
        c = next();
      } while (java.lang.Character.isDigit(c));
      return result.toString();
    }
    
    /** Read the next character, skipping any previous whitespace. */
    protected char readCharWord() throws java.io.IOException {
      char c = currentChar;
      while (java.lang.Character.isWhitespace(c)) {
        c = next();
      }
      return c;
    }
    
    /** Discard whitespace, then read exactly the string s.  curr() just afterwards. */
    protected void readExpected(java.lang.String s) throws java.io.IOException {
      char c = readCharWord();
      for (int i = 0; i < s.length(); i++) {
        if (c != s.charAt(i)) {
          System.out.println("Was expecting '"+s+"', saw '"+c+
                             "' instead of '"+s.charAt(i)+"'");
          throw error();
        }
        c = next();
      }
    }
    
    /** Look for and discard field delimiter. */
    protected void readFieldDelim(java.lang.String s) throws java.io.IOException {
      readExpected(s);
    }
    
    /** Look for next element in list. */
    protected boolean readMoreListElements() throws java.io.IOException {
      char c = readCharWord();
      if (c=='}') {
        next();
        return false;
      }
      if (c=='*') {
        next();
        return true;
      }
      throw error();
    }
    
    /** Look for header of option type.  Return true if contents must be
        parsed, false if it is Option.none(). */
    protected boolean readOptionHeader() throws java.io.IOException {
      char c = readCharWord();
      if (c=='~') {
        next();
        return false;
      }
      if (c=='(') {
        next();
        return true;
      }
      throw error();
    }
    
    /**
     * Read up to a delimiter; it is an error if a newline or eof is encountered first.
     * @return The the characters read before the delimiter.
     */
    protected java.lang.String readTo(char delim, boolean skipEscape) throws java.io.IOException {
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      boolean escape = false;
      char c = curr();
      while (escape || c != delim) {
        if (c == '\n' || c == '\r') throw error();
        result.append(c);
        if (escape) escape = false;
        else if (skipEscape && c == '\\') escape = true;
        c = next();
      }
      next(); // skip delim
      return result.toString();
    }
    
    /**
     * Skip to one of the given delimiters; it is an error if a newline or eof is encountered first.
     * @return The delimiter that was found.
     */
    protected char skipTo(char... delims) throws java.io.IOException {
      char c = currentChar;
      while (true) {
        if (c == '\n' || c == '\r') throw error();
        for (char delim : delims) {
          if (c == delim) return delim;
        }
        c = next();
      }
    }
    
    protected java.lang.String readToNewline() throws java.io.IOException {
      java.lang.String result = in.readLine();
      if (result == null) throw error();
      readCharWord();
      return result;
    }
    
    protected char next() throws java.io.IOException {
      int c = in.read();
      if (c == -1) throw error();
      currentChar = (char)c;
      return currentChar;
    }
    
    protected char curr() {
      return currentChar;
    }
    
    /** Unescapes a subset of valid Java-style escaped strings.  Unicode escapes are not
      * supported (the JLS doesn't treat them as part of this escaping process, either).
      * Octal escapes are required to use exactly 3 digits.
      */
    protected java.lang.String unescape(java.lang.String s) throws java.io.IOException {
      boolean escape = false;
      final java.lang.StringBuilder digits = new java.lang.StringBuilder();
      boolean changed = false;
      final java.lang.StringBuilder result = new java.lang.StringBuilder();
      for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (escape) {
          switch (c) {
            case 'b': result.append('\b'); break;
            case 't': result.append('\t'); break;
            case 'n': result.append('\n'); break;
            case 'f': result.append('\f'); break;
            case 'r': result.append('\r'); break;
    
            case '"': case '\'': case '\\':
              result.append(c); break;
    
            case '0': case '1': case '2': case '3':
            case '4': case '5': case '6': case '7':
              digits.append(c);
              if (digits.length() == 3) {
                // this should succeed -- there are guaranteed to be 3 octal digits
                result.append((char) java.lang.Integer.parseInt(digits.toString(), 8));
                digits.setLength(0);
              }
              break;
    
            default:
              throw error();
          }
          if (digits.length() == 0) escape = false;
        }
        else {
          if (c == '\\') { escape = true; changed = true; }
          else { result.append(c); }
        }
      }
      if (escape) throw error(); // escape was not completed
      return changed ? result.toString() : s;
    }
    
    /** Treat a string representation of a hexadecimal number as an ObjectInputStream */
    protected java.io.ObjectInputStream toObjectStream(java.lang.String byteString)
        throws java.io.IOException {
      if (byteString.length() % 2 != 0) throw error();
      int length = byteString.length() / 2;
      byte[] bytes = new byte[length];
      for (int i = 0; i < length; i++) {
        java.lang.String b = byteString.substring(i*2, i*2+2);
        try {
          int unsigned = java.lang.Integer.parseInt(b, 16);
          if (unsigned < 128) bytes[i] = (byte) unsigned;
          else bytes[i] = (byte) (unsigned - 256); // maps 255 to -1, 128 to -128
        }
        catch (java.lang.NumberFormatException e) { throw error(); }
      }
      // this may throw an IOException
      return new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(bytes));
    }
    
    protected java.io.IOException error() {
      return new java.io.IOException("Serialized data is not properly encoded");
    }
}
