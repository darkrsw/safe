package kr.ac.kaist.jsaf.nodes;

import java.lang.Double;
import java.lang.String;
import java.math.BigInteger;
import java.io.Writer;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.LinkedList;
import kr.ac.kaist.jsaf.nodes_util.*;
import kr.ac.kaist.jsaf.useful.*;
import edu.rice.cs.plt.tuple.Option;

/** A utility class for deserializing a node description generated by 
  * serialize(java.io.Writer).
  */
@SuppressWarnings("unused")
public class WNodeReader {

    public static WNode read(java.lang.String s) throws java.io.IOException {
        return read(new java.io.StringReader(s));
    }

    public static WNode read(java.io.Reader r) throws java.io.IOException {
        return new WNodeReader(new java.io.BufferedReader(r)).readWNode();
    }

    protected java.io.BufferedReader in;
    protected char currentChar=' ';

    protected WNodeReader(java.io.BufferedReader r) { in = r; }

    public WNode readWNode() throws java.io.IOException {
        java.lang.String name = readWord();
        if (name.equals("_")) return null;
        if (name.equals("WModule:")) return readWModuleBody();
        if (name.equals("WInterface:")) return readWInterfaceBody();
        if (name.equals("WCallback:")) return readWCallbackBody();
        if (name.equals("WDictionary:")) return readWDictionaryBody();
        if (name.equals("WException:")) return readWExceptionBody();
        if (name.equals("WEnum:")) return readWEnumBody();
        if (name.equals("WTypedef:")) return readWTypedefBody();
        if (name.equals("WImplementsStatement:")) return readWImplementsStatementBody();
        if (name.equals("WConst:")) return readWConstBody();
        if (name.equals("WAttribute:")) return readWAttributeBody();
        if (name.equals("WOperation:")) return readWOperationBody();
        if (name.equals("WDictionaryMember:")) return readWDictionaryMemberBody();
        if (name.equals("WExceptionField:")) return readWExceptionFieldBody();
        if (name.equals("WBoolean:")) return readWBooleanBody();
        if (name.equals("WFloat:")) return readWFloatBody();
        if (name.equals("WInteger:")) return readWIntegerBody();
        if (name.equals("WString:")) return readWStringBody();
        if (name.equals("WNull:")) return readWNullBody();
        if (name.equals("WAnyType:")) return readWAnyTypeBody();
        if (name.equals("WNamedType:")) return readWNamedTypeBody();
        if (name.equals("WArrayType:")) return readWArrayTypeBody();
        if (name.equals("WSequenceType:")) return readWSequenceTypeBody();
        if (name.equals("WUnionType:")) return readWUnionTypeBody();
        if (name.equals("WArgument:")) return readWArgumentBody();
        if (name.equals("WId:")) return readWIdBody();
        if (name.equals("WQId:")) return readWQIdBody();
        if (name.equals("WTSArray:")) return readWTSArrayBody();
        if (name.equals("WTSQuestion:")) return readWTSQuestionBody();
        if (name.equals("WEAConstructor:")) return readWEAConstructorBody();
        if (name.equals("WEAArray:")) return readWEAArrayBody();
        if (name.equals("WEANoInterfaceObject:")) return readWEANoInterfaceObjectBody();
        if (name.equals("WEACallbackFunctionOnly:")) return readWEACallbackFunctionOnlyBody();
        if (name.equals("WEAString:")) return readWEAStringBody();
        if (name.equals("WEAQuestion:")) return readWEAQuestionBody();
        if (name.equals("WEAEllipsis:")) return readWEAEllipsisBody();
        if (name.equals("WEAOptional:")) return readWEAOptionalBody();
        if (name.equals("WEAAttribute:")) return readWEAAttributeBody();
        if (name.equals("WEACallback:")) return readWEACallbackBody();
        if (name.equals("WEAConst:")) return readWEAConstBody();
        if (name.equals("WEACreator:")) return readWEACreatorBody();
        if (name.equals("WEADeleter:")) return readWEADeleterBody();
        if (name.equals("WEADictionary:")) return readWEADictionaryBody();
        if (name.equals("WEAEnum:")) return readWEAEnumBody();
        if (name.equals("WEAException:")) return readWEAExceptionBody();
        if (name.equals("WEAGetter:")) return readWEAGetterBody();
        if (name.equals("WEAImplements:")) return readWEAImplementsBody();
        if (name.equals("WEAInherit:")) return readWEAInheritBody();
        if (name.equals("WEAInterface:")) return readWEAInterfaceBody();
        if (name.equals("WEAReadonly:")) return readWEAReadonlyBody();
        if (name.equals("WEALegacycaller:")) return readWEALegacycallerBody();
        if (name.equals("WEAPartial:")) return readWEAPartialBody();
        if (name.equals("WEASetter:")) return readWEASetterBody();
        if (name.equals("WEAStatic:")) return readWEAStaticBody();
        if (name.equals("WEAStringifier:")) return readWEAStringifierBody();
        if (name.equals("WEATypedef:")) return readWEATypedefBody();
        if (name.equals("WEAUnrestricted:")) return readWEAUnrestrictedBody();
        if (name.equals("WQStatic:")) return readWQStaticBody();
        if (name.equals("WQGetter:")) return readWQGetterBody();
        if (name.equals("WQSetter:")) return readWQSetterBody();
        if (name.equals("WQCreator:")) return readWQCreatorBody();
        if (name.equals("WQDeleter:")) return readWQDeleterBody();
        if (name.equals("WQLegacycaller:")) return readWQLegacycallerBody();
        throw error();
    }

    private WModule readWModuleBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("defs = ");
        List<WDefinition> read_defs = readListOfWDefinition();
        return new WModule(read_info, read_attrs, read_name, read_defs);
    }

    private WInterface readWInterfaceBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("parent = ");
        Option<WId> read_parent = readOptionOfWId();
        readFieldDelim("members = ");
        List<WInterfaceMember> read_members = readListOfWInterfaceMember();
        return new WInterface(read_info, read_attrs, read_name, read_parent, read_members);
    }

    private WCallback readWCallbackBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("returnType = ");
        WType read_returnType = (WType) readWNode();
        readFieldDelim("args = ");
        List<WArgument> read_args = readListOfWArgument();
        return new WCallback(read_info, read_attrs, read_name, read_returnType, read_args);
    }

    private WDictionary readWDictionaryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("parent = ");
        Option<WId> read_parent = readOptionOfWId();
        readFieldDelim("members = ");
        List<WDictionaryMember> read_members = readListOfWDictionaryMember();
        return new WDictionary(read_info, read_attrs, read_name, read_parent, read_members);
    }

    private WException readWExceptionBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("parent = ");
        Option<WId> read_parent = readOptionOfWId();
        readFieldDelim("members = ");
        List<WExceptionMember> read_members = readListOfWExceptionMember();
        return new WException(read_info, read_attrs, read_name, read_parent, read_members);
    }

    private WEnum readWEnumBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("enumValueList = ");
        List<WString> read_enumValueList = readListOfWString();
        return new WEnum(read_info, read_attrs, read_name, read_enumValueList);
    }

    private WTypedef readWTypedefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("typ = ");
        WType read_typ = (WType) readWNode();
        readFieldDelim("name = ");
        String read_name = readString();
        return new WTypedef(read_info, read_attrs, read_typ, read_name);
    }

    private WImplementsStatement readWImplementsStatementBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("parent = ");
        String read_parent = readString();
        return new WImplementsStatement(read_info, read_attrs, read_name, read_parent);
    }

    private WConst readWConstBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("typ = ");
        WType read_typ = (WType) readWNode();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("value = ");
        WLiteral read_value = (WLiteral) readWNode();
        return new WConst(read_info, read_attrs, read_typ, read_name, read_value);
    }

    private WAttribute readWAttributeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("typ = ");
        WType read_typ = (WType) readWNode();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("exns = ");
        List<WQId> read_exns = readListOfWQId();
        return new WAttribute(read_info, read_attrs, read_typ, read_name, read_exns);
    }

    private WOperation readWOperationBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("qualifiers = ");
        List<WQualifier> read_qualifiers = readListOfWQualifier();
        readFieldDelim("typ = ");
        WType read_typ = (WType) readWNode();
        readFieldDelim("name = ");
        Option<String> read_name = readOptionOfString();
        readFieldDelim("args = ");
        List<WArgument> read_args = readListOfWArgument();
        readFieldDelim("exns = ");
        List<WQId> read_exns = readListOfWQId();
        return new WOperation(read_info, read_attrs, read_qualifiers, read_typ, read_name, read_args, read_exns);
    }

    private WDictionaryMember readWDictionaryMemberBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("typ = ");
        WType read_typ = (WType) readWNode();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("default = ");
        Option<WLiteral> read_default = readOptionOfWLiteral();
        return new WDictionaryMember(read_info, read_attrs, read_typ, read_name, read_default);
    }

    private WExceptionField readWExceptionFieldBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attrs = ");
        List<WEAttribute> read_attrs = readListOfWEAttribute();
        readFieldDelim("typ = ");
        WType read_typ = (WType) readWNode();
        readFieldDelim("name = ");
        String read_name = readString();
        return new WExceptionField(read_info, read_attrs, read_typ, read_name);
    }

    private WBoolean readWBooleanBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("value = ");
        boolean read_value = readBoolean();
        return new WBoolean(read_info, read_value);
    }

    private WFloat readWFloatBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("value = ");
        String read_value = readString();
        return new WFloat(read_info, read_value);
    }

    private WInteger readWIntegerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("value = ");
        String read_value = readString();
        return new WInteger(read_info, read_value);
    }

    private WString readWStringBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("str = ");
        String read_str = readString();
        return new WString(read_info, read_str);
    }

    private WNull readWNullBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        return new WNull(read_info);
    }

    private WAnyType readWAnyTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("suffix = ");
        List<WTypeSuffix> read_suffix = readListOfWTypeSuffix();
        return new WAnyType(read_info, read_suffix);
    }

    private WNamedType readWNamedTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("suffix = ");
        List<WTypeSuffix> read_suffix = readListOfWTypeSuffix();
        readFieldDelim("name = ");
        String read_name = readString();
        return new WNamedType(read_info, read_suffix, read_name);
    }

    private WArrayType readWArrayTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("suffix = ");
        List<WTypeSuffix> read_suffix = readListOfWTypeSuffix();
        readFieldDelim("typ = ");
        WType read_typ = (WType) readWNode();
        return new WArrayType(read_info, read_suffix, read_typ);
    }

    private WSequenceType readWSequenceTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("suffix = ");
        List<WTypeSuffix> read_suffix = readListOfWTypeSuffix();
        readFieldDelim("typ = ");
        WType read_typ = (WType) readWNode();
        return new WSequenceType(read_info, read_suffix, read_typ);
    }

    private WUnionType readWUnionTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("suffix = ");
        List<WTypeSuffix> read_suffix = readListOfWTypeSuffix();
        readFieldDelim("types = ");
        List<WType> read_types = readListOfWType();
        return new WUnionType(read_info, read_suffix, read_types);
    }

    private WArgument readWArgumentBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("attributes = ");
        List<WEAttribute> read_attributes = readListOfWEAttribute();
        readFieldDelim("typ = ");
        WType read_typ = (WType) readWNode();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("default = ");
        Option<WLiteral> read_default = readOptionOfWLiteral();
        return new WArgument(read_info, read_attributes, read_typ, read_name, read_default);
    }

    private WId readWIdBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("name = ");
        String read_name = readString();
        return new WId(read_info, read_name);
    }

    private WQId readWQIdBody() throws java.io.IOException {
        readFieldDelim("info = ");
        SpanInfo read_info = (SpanInfo) readUnknownObject();
        readFieldDelim("name = ");
        List<String> read_name = readListOfString();
        return new WQId(read_info, read_name);
    }

    private WTSArray readWTSArrayBody() throws java.io.IOException {
        return new WTSArray();
    }

    private WTSQuestion readWTSQuestionBody() throws java.io.IOException {
        return new WTSQuestion();
    }

    private WEAConstructor readWEAConstructorBody() throws java.io.IOException {
        readFieldDelim("args = ");
        List<WArgument> read_args = readListOfWArgument();
        return new WEAConstructor(read_args);
    }

    private WEAArray readWEAArrayBody() throws java.io.IOException {
        return new WEAArray();
    }

    private WEANoInterfaceObject readWEANoInterfaceObjectBody() throws java.io.IOException {
        return new WEANoInterfaceObject();
    }

    private WEACallbackFunctionOnly readWEACallbackFunctionOnlyBody() throws java.io.IOException {
        return new WEACallbackFunctionOnly();
    }

    private WEAString readWEAStringBody() throws java.io.IOException {
        readFieldDelim("str = ");
        String read_str = readString();
        return new WEAString(read_str);
    }

    private WEAQuestion readWEAQuestionBody() throws java.io.IOException {
        return new WEAQuestion();
    }

    private WEAEllipsis readWEAEllipsisBody() throws java.io.IOException {
        return new WEAEllipsis();
    }

    private WEAOptional readWEAOptionalBody() throws java.io.IOException {
        return new WEAOptional();
    }

    private WEAAttribute readWEAAttributeBody() throws java.io.IOException {
        return new WEAAttribute();
    }

    private WEACallback readWEACallbackBody() throws java.io.IOException {
        return new WEACallback();
    }

    private WEAConst readWEAConstBody() throws java.io.IOException {
        return new WEAConst();
    }

    private WEACreator readWEACreatorBody() throws java.io.IOException {
        return new WEACreator();
    }

    private WEADeleter readWEADeleterBody() throws java.io.IOException {
        return new WEADeleter();
    }

    private WEADictionary readWEADictionaryBody() throws java.io.IOException {
        return new WEADictionary();
    }

    private WEAEnum readWEAEnumBody() throws java.io.IOException {
        return new WEAEnum();
    }

    private WEAException readWEAExceptionBody() throws java.io.IOException {
        return new WEAException();
    }

    private WEAGetter readWEAGetterBody() throws java.io.IOException {
        return new WEAGetter();
    }

    private WEAImplements readWEAImplementsBody() throws java.io.IOException {
        return new WEAImplements();
    }

    private WEAInherit readWEAInheritBody() throws java.io.IOException {
        return new WEAInherit();
    }

    private WEAInterface readWEAInterfaceBody() throws java.io.IOException {
        return new WEAInterface();
    }

    private WEAReadonly readWEAReadonlyBody() throws java.io.IOException {
        return new WEAReadonly();
    }

    private WEALegacycaller readWEALegacycallerBody() throws java.io.IOException {
        return new WEALegacycaller();
    }

    private WEAPartial readWEAPartialBody() throws java.io.IOException {
        return new WEAPartial();
    }

    private WEASetter readWEASetterBody() throws java.io.IOException {
        return new WEASetter();
    }

    private WEAStatic readWEAStaticBody() throws java.io.IOException {
        return new WEAStatic();
    }

    private WEAStringifier readWEAStringifierBody() throws java.io.IOException {
        return new WEAStringifier();
    }

    private WEATypedef readWEATypedefBody() throws java.io.IOException {
        return new WEATypedef();
    }

    private WEAUnrestricted readWEAUnrestrictedBody() throws java.io.IOException {
        return new WEAUnrestricted();
    }

    private WQStatic readWQStaticBody() throws java.io.IOException {
        return new WQStatic();
    }

    private WQGetter readWQGetterBody() throws java.io.IOException {
        return new WQGetter();
    }

    private WQSetter readWQSetterBody() throws java.io.IOException {
        return new WQSetter();
    }

    private WQCreator readWQCreatorBody() throws java.io.IOException {
        return new WQCreator();
    }

    private WQDeleter readWQDeleterBody() throws java.io.IOException {
        return new WQDeleter();
    }

    private WQLegacycaller readWQLegacycallerBody() throws java.io.IOException {
        return new WQLegacycaller();
    }


    private List<WEAttribute> readListOfWEAttribute() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WEAttribute> accum = new java.util.ArrayList<WEAttribute>();
        while (readMoreListElements()) {
            accum.add((WEAttribute) readWNode());
        }
        return accum;
    }

    private List<WDefinition> readListOfWDefinition() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WDefinition> accum = new java.util.ArrayList<WDefinition>();
        while (readMoreListElements()) {
            accum.add((WDefinition) readWNode());
        }
        return accum;
    }

    private Option<WId> readOptionOfWId() throws java.io.IOException {
        if (readOptionHeader()) {
            WId elt_result = (WId) readWNode();
            readExpected(")");
            return Option.<WId>some(elt_result);
        }
        else { return Option.<WId>none(); }
    }

    private List<WInterfaceMember> readListOfWInterfaceMember() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WInterfaceMember> accum = new java.util.ArrayList<WInterfaceMember>();
        while (readMoreListElements()) {
            accum.add((WInterfaceMember) readWNode());
        }
        return accum;
    }

    private List<WArgument> readListOfWArgument() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WArgument> accum = new java.util.ArrayList<WArgument>();
        while (readMoreListElements()) {
            accum.add((WArgument) readWNode());
        }
        return accum;
    }

    private List<WDictionaryMember> readListOfWDictionaryMember() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WDictionaryMember> accum = new java.util.ArrayList<WDictionaryMember>();
        while (readMoreListElements()) {
            accum.add((WDictionaryMember) readWNode());
        }
        return accum;
    }

    private List<WExceptionMember> readListOfWExceptionMember() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WExceptionMember> accum = new java.util.ArrayList<WExceptionMember>();
        while (readMoreListElements()) {
            accum.add((WExceptionMember) readWNode());
        }
        return accum;
    }

    private List<WString> readListOfWString() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WString> accum = new java.util.ArrayList<WString>();
        while (readMoreListElements()) {
            accum.add((WString) readWNode());
        }
        return accum;
    }

    private List<WQId> readListOfWQId() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WQId> accum = new java.util.ArrayList<WQId>();
        while (readMoreListElements()) {
            accum.add((WQId) readWNode());
        }
        return accum;
    }

    private List<WQualifier> readListOfWQualifier() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WQualifier> accum = new java.util.ArrayList<WQualifier>();
        while (readMoreListElements()) {
            accum.add((WQualifier) readWNode());
        }
        return accum;
    }

    private Option<String> readOptionOfString() throws java.io.IOException {
        if (readOptionHeader()) {
            String elt_result = readString();
            readExpected(")");
            return Option.<String>some(elt_result);
        }
        else { return Option.<String>none(); }
    }

    private Option<WLiteral> readOptionOfWLiteral() throws java.io.IOException {
        if (readOptionHeader()) {
            WLiteral elt_result = (WLiteral) readWNode();
            readExpected(")");
            return Option.<WLiteral>some(elt_result);
        }
        else { return Option.<WLiteral>none(); }
    }

    private List<WTypeSuffix> readListOfWTypeSuffix() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WTypeSuffix> accum = new java.util.ArrayList<WTypeSuffix>();
        while (readMoreListElements()) {
            accum.add((WTypeSuffix) readWNode());
        }
        return accum;
    }

    private List<WType> readListOfWType() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<WType> accum = new java.util.ArrayList<WType>();
        while (readMoreListElements()) {
            accum.add((WType) readWNode());
        }
        return accum;
    }

    private List<String> readListOfString() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<String> accum = new java.util.ArrayList<String>();
        while (readMoreListElements()) {
            accum.add(readString());
        }
        return accum;
    }

    protected boolean readBoolean() throws java.io.IOException {
      char c = readCharWord();
      char t = c;
      while (!java.lang.Character.isWhitespace(t)) t=next();
      if (c=='t') return true;
      if (c=='f') return false;
      throw error();
    }
    
    protected char readChar() throws java.io.IOException {
      readExpected("\"");
      java.lang.String word = readTo('"', true);
      java.lang.String result = unescape(word);
      if (result.length() != 1) throw error();
      return result.charAt(0);
    }
    
    protected byte readByte() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Byte.parseByte(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected short readShort() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Short.parseShort(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected int readInt() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Integer.parseInt(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected long readLong() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Long.parseLong(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected float readFloat() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Float.parseFloat(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected double readDouble() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Double.parseDouble(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected java.lang.String readString() throws java.io.IOException {
      char delim = readCharWord();
      if (delim == '_') { return null; }
      if (delim != '"') { throw error(); }
      next();
      java.lang.String word = readTo('"', true);
      return unescape(word);
    }
    
    protected Object wordToUnknownObject(java.lang.String word) throws java.io.IOException {
      if (word.equals("_")) return null;
      java.io.ObjectInputStream objIn = toObjectStream(word);
      try { return objIn.readObject(); } // may throw an IOException
      catch (java.lang.ClassNotFoundException e) {
        throw new java.io.IOException("ClassNotFoundException: " + e.getMessage());
      }
      finally {
        try { objIn.close(); }
        catch (java.io.IOException e) { /* made a best attempt; ignore */ }
      }
    }
    
    protected Object readUnknownObject() throws java.io.IOException {
      java.lang.String word = readWord();
      readToNewline();
      return wordToUnknownObject(word);
    }
    
    /** Read the next word, delimited by whitespace, starting from curr().
        curr() is next whitespace char after word. */
    protected java.lang.String readWord() throws java.io.IOException {
      char c = readCharWord();
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      do {
        result.append(c);
        c = next();
      } while (!java.lang.Character.isWhitespace(c));
      return result.toString();
    }
    
    /** Read the next number starting with curr(): whitespace, possible
        '-', digit sequence.  curr() is first non-digit char
        thereafter. */
    protected java.lang.String readNum() throws java.io.IOException {
      char c = readCharWord();
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      if (c!='-' && !java.lang.Character.isDigit(c))
        throw error();
      do {
        result.append(c);
        c = next();
      } while (java.lang.Character.isDigit(c));
      return result.toString();
    }
    
    /** Read the next character, skipping any previous whitespace. */
    protected char readCharWord() throws java.io.IOException {
      char c = currentChar;
      while (java.lang.Character.isWhitespace(c)) {
        c = next();
      }
      return c;
    }
    
    /** Discard whitespace, then read exactly the string s.  curr() just afterwards. */
    protected void readExpected(java.lang.String s) throws java.io.IOException {
      char c = readCharWord();
      for (int i = 0; i < s.length(); i++) {
        if (c != s.charAt(i)) {
          System.out.println("Was expecting '"+s+"', saw '"+c+
                             "' instead of '"+s.charAt(i)+"'");
          throw error();
        }
        c = next();
      }
    }
    
    /** Look for and discard field delimiter. */
    protected void readFieldDelim(java.lang.String s) throws java.io.IOException {
      readExpected(s);
    }
    
    /** Look for next element in list. */
    protected boolean readMoreListElements() throws java.io.IOException {
      char c = readCharWord();
      if (c=='}') {
        next();
        return false;
      }
      if (c=='*') {
        next();
        return true;
      }
      throw error();
    }
    
    /** Look for header of option type.  Return true if contents must be
        parsed, false if it is Option.none(). */
    protected boolean readOptionHeader() throws java.io.IOException {
      char c = readCharWord();
      if (c=='~') {
        next();
        return false;
      }
      if (c=='(') {
        next();
        return true;
      }
      throw error();
    }
    
    /**
     * Read up to a delimiter; it is an error if a newline or eof is encountered first.
     * @return The the characters read before the delimiter.
     */
    protected java.lang.String readTo(char delim, boolean skipEscape) throws java.io.IOException {
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      boolean escape = false;
      char c = curr();
      while (escape || c != delim) {
        if (c == '\n' || c == '\r') throw error();
        result.append(c);
        if (escape) escape = false;
        else if (skipEscape && c == '\\') escape = true;
        c = next();
      }
      next(); // skip delim
      return result.toString();
    }
    
    /**
     * Skip to one of the given delimiters; it is an error if a newline or eof is encountered first.
     * @return The delimiter that was found.
     */
    protected char skipTo(char... delims) throws java.io.IOException {
      char c = currentChar;
      while (true) {
        if (c == '\n' || c == '\r') throw error();
        for (char delim : delims) {
          if (c == delim) return delim;
        }
        c = next();
      }
    }
    
    protected java.lang.String readToNewline() throws java.io.IOException {
      java.lang.String result = in.readLine();
      if (result == null) throw error();
      readCharWord();
      return result;
    }
    
    protected char next() throws java.io.IOException {
      int c = in.read();
      if (c == -1) throw error();
      currentChar = (char)c;
      return currentChar;
    }
    
    protected char curr() {
      return currentChar;
    }
    
    /** Unescapes a subset of valid Java-style escaped strings.  Unicode escapes are not
      * supported (the JLS doesn't treat them as part of this escaping process, either).
      * Octal escapes are required to use exactly 3 digits.
      */
    protected java.lang.String unescape(java.lang.String s) throws java.io.IOException {
      boolean escape = false;
      final java.lang.StringBuilder digits = new java.lang.StringBuilder();
      boolean changed = false;
      final java.lang.StringBuilder result = new java.lang.StringBuilder();
      for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (escape) {
          switch (c) {
            case 'b': result.append('\b'); break;
            case 't': result.append('\t'); break;
            case 'n': result.append('\n'); break;
            case 'f': result.append('\f'); break;
            case 'r': result.append('\r'); break;
    
            case '"': case '\'': case '\\':
              result.append(c); break;
    
            case '0': case '1': case '2': case '3':
            case '4': case '5': case '6': case '7':
              digits.append(c);
              if (digits.length() == 3) {
                // this should succeed -- there are guaranteed to be 3 octal digits
                result.append((char) java.lang.Integer.parseInt(digits.toString(), 8));
                digits.setLength(0);
              }
              break;
    
            default:
              throw error();
          }
          if (digits.length() == 0) escape = false;
        }
        else {
          if (c == '\\') { escape = true; changed = true; }
          else { result.append(c); }
        }
      }
      if (escape) throw error(); // escape was not completed
      return changed ? result.toString() : s;
    }
    
    /** Treat a string representation of a hexadecimal number as an ObjectInputStream */
    protected java.io.ObjectInputStream toObjectStream(java.lang.String byteString)
        throws java.io.IOException {
      if (byteString.length() % 2 != 0) throw error();
      int length = byteString.length() / 2;
      byte[] bytes = new byte[length];
      for (int i = 0; i < length; i++) {
        java.lang.String b = byteString.substring(i*2, i*2+2);
        try {
          int unsigned = java.lang.Integer.parseInt(b, 16);
          if (unsigned < 128) bytes[i] = (byte) unsigned;
          else bytes[i] = (byte) (unsigned - 256); // maps 255 to -1, 128 to -128
        }
        catch (java.lang.NumberFormatException e) { throw error(); }
      }
      // this may throw an IOException
      return new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(bytes));
    }
    
    protected java.io.IOException error() {
      return new java.io.IOException("Serialized data is not properly encoded");
    }
}
