package kr.ac.kaist.jsaf.nodes;

import java.lang.Double;
import java.lang.String;
import java.math.BigInteger;
import java.io.Writer;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.LinkedList;
import kr.ac.kaist.jsaf.nodes_util.*;
import kr.ac.kaist.jsaf.useful.*;
import edu.rice.cs.plt.tuple.Option;

/** A utility class for deserializing a node description generated by 
  * serialize(java.io.Writer).
  */
@SuppressWarnings("unused")
public class NodeReader {

    public static Node read(java.lang.String s) throws java.io.IOException {
        return read(new java.io.StringReader(s));
    }

    public static Node read(java.io.Reader r) throws java.io.IOException {
        return new NodeReader(new java.io.BufferedReader(r)).readNode();
    }

    protected java.io.BufferedReader in;
    protected char currentChar=' ';

    protected NodeReader(java.io.BufferedReader r) { in = r; }

    public Node readNode() throws java.io.IOException {
        java.lang.String name = readWord();
        if (name.equals("_")) return null;
        if (name.equals("Program:")) return readProgramBody();
        if (name.equals("ModDecl:")) return readModDeclBody();
        if (name.equals("ModExpVarStmt:")) return readModExpVarStmtBody();
        if (name.equals("ModExpFunDecl:")) return readModExpFunDeclBody();
        if (name.equals("ModExpGetter:")) return readModExpGetterBody();
        if (name.equals("ModExpSetter:")) return readModExpSetterBody();
        if (name.equals("ModExpSpecifiers:")) return readModExpSpecifiersBody();
        if (name.equals("ModExpAssignment:")) return readModExpAssignmentBody();
        if (name.equals("ModImpDecl:")) return readModImpDeclBody();
        if (name.equals("ExtImpDecl:")) return readExtImpDeclBody();
        if (name.equals("TSImpDecl:")) return readTSImpDeclBody();
        if (name.equals("IntfDecl:")) return readIntfDeclBody();
        if (name.equals("AmbVarDecl:")) return readAmbVarDeclBody();
        if (name.equals("AmbFunDecl:")) return readAmbFunDeclBody();
        if (name.equals("AmbClsDecl:")) return readAmbClsDeclBody();
        if (name.equals("AmbEnumDecl:")) return readAmbEnumDeclBody();
        if (name.equals("AmbModDecl:")) return readAmbModDeclBody();
        if (name.equals("AmbExtModDecl:")) return readAmbExtModDeclBody();
        if (name.equals("NoOp:")) return readNoOpBody();
        if (name.equals("StmtUnit:")) return readStmtUnitBody();
        if (name.equals("FunDecl:")) return readFunDeclBody();
        if (name.equals("Block:")) return readBlockBody();
        if (name.equals("VarStmt:")) return readVarStmtBody();
        if (name.equals("EmptyStmt:")) return readEmptyStmtBody();
        if (name.equals("ExprStmt:")) return readExprStmtBody();
        if (name.equals("If:")) return readIfBody();
        if (name.equals("DoWhile:")) return readDoWhileBody();
        if (name.equals("While:")) return readWhileBody();
        if (name.equals("For:")) return readForBody();
        if (name.equals("ForIn:")) return readForInBody();
        if (name.equals("ForVar:")) return readForVarBody();
        if (name.equals("ForVarIn:")) return readForVarInBody();
        if (name.equals("Continue:")) return readContinueBody();
        if (name.equals("Break:")) return readBreakBody();
        if (name.equals("Return:")) return readReturnBody();
        if (name.equals("With:")) return readWithBody();
        if (name.equals("Switch:")) return readSwitchBody();
        if (name.equals("LabelStmt:")) return readLabelStmtBody();
        if (name.equals("Throw:")) return readThrowBody();
        if (name.equals("Try:")) return readTryBody();
        if (name.equals("Debugger:")) return readDebuggerBody();
        if (name.equals("SourceElements:")) return readSourceElementsBody();
        if (name.equals("VarDecl:")) return readVarDeclBody();
        if (name.equals("Case:")) return readCaseBody();
        if (name.equals("Catch:")) return readCatchBody();
        if (name.equals("ModImpSpecifierSet:")) return readModImpSpecifierSetBody();
        if (name.equals("ModImpAliasClause:")) return readModImpAliasClauseBody();
        if (name.equals("AmbCnstDecl:")) return readAmbCnstDeclBody();
        if (name.equals("AmbMemDecl:")) return readAmbMemDeclBody();
        if (name.equals("AmbIndDecl:")) return readAmbIndDeclBody();
        if (name.equals("AmbEnumMem:")) return readAmbEnumMemBody();
        if (name.equals("AmbModElt:")) return readAmbModEltBody();
        if (name.equals("AmbExtModElt:")) return readAmbExtModEltBody();
        if (name.equals("ExprList:")) return readExprListBody();
        if (name.equals("Cond:")) return readCondBody();
        if (name.equals("InfixOpApp:")) return readInfixOpAppBody();
        if (name.equals("PrefixOpApp:")) return readPrefixOpAppBody();
        if (name.equals("UnaryAssignOpApp:")) return readUnaryAssignOpAppBody();
        if (name.equals("AssignOpApp:")) return readAssignOpAppBody();
        if (name.equals("This:")) return readThisBody();
        if (name.equals("Null:")) return readNullBody();
        if (name.equals("Bool:")) return readBoolBody();
        if (name.equals("DoubleLiteral:")) return readDoubleLiteralBody();
        if (name.equals("IntLiteral:")) return readIntLiteralBody();
        if (name.equals("StringLiteral:")) return readStringLiteralBody();
        if (name.equals("RegularExpression:")) return readRegularExpressionBody();
        if (name.equals("VarRef:")) return readVarRefBody();
        if (name.equals("ArrayExpr:")) return readArrayExprBody();
        if (name.equals("ArrayNumberExpr:")) return readArrayNumberExprBody();
        if (name.equals("ObjectExpr:")) return readObjectExprBody();
        if (name.equals("Parenthesized:")) return readParenthesizedBody();
        if (name.equals("FunExpr:")) return readFunExprBody();
        if (name.equals("Bracket:")) return readBracketBody();
        if (name.equals("Dot:")) return readDotBody();
        if (name.equals("New:")) return readNewBody();
        if (name.equals("FunApp:")) return readFunAppBody();
        if (name.equals("PropId:")) return readPropIdBody();
        if (name.equals("PropStr:")) return readPropStrBody();
        if (name.equals("PropNum:")) return readPropNumBody();
        if (name.equals("Field:")) return readFieldBody();
        if (name.equals("GetProp:")) return readGetPropBody();
        if (name.equals("SetProp:")) return readSetPropBody();
        if (name.equals("Id:")) return readIdBody();
        if (name.equals("Op:")) return readOpBody();
        if (name.equals("TypeName:")) return readTypeNameBody();
        if (name.equals("AnonymousFnName:")) return readAnonymousFnNameBody();
        if (name.equals("Path:")) return readPathBody();
        if (name.equals("ModExpStarFromPath:")) return readModExpStarFromPathBody();
        if (name.equals("ModExpStar:")) return readModExpStarBody();
        if (name.equals("ModExpAlias:")) return readModExpAliasBody();
        if (name.equals("ModExpName:")) return readModExpNameBody();
        if (name.equals("ModImpAlias:")) return readModImpAliasBody();
        if (name.equals("ModImpName:")) return readModImpNameBody();
        if (name.equals("Label:")) return readLabelBody();
        if (name.equals("Comment:")) return readCommentBody();
        if (name.equals("Param:")) return readParamBody();
        if (name.equals("AnyT:")) return readAnyTBody();
        if (name.equals("NumberT:")) return readNumberTBody();
        if (name.equals("BoolT:")) return readBoolTBody();
        if (name.equals("StringT:")) return readStringTBody();
        if (name.equals("VoidT:")) return readVoidTBody();
        if (name.equals("TypeRef:")) return readTypeRefBody();
        if (name.equals("TypeQuery:")) return readTypeQueryBody();
        if (name.equals("ObjectType:")) return readObjectTypeBody();
        if (name.equals("ArrayType:")) return readArrayTypeBody();
        if (name.equals("FunctionType:")) return readFunctionTypeBody();
        if (name.equals("ConstructorType:")) return readConstructorTypeBody();
        if (name.equals("ExprType:")) return readExprTypeBody();
        if (name.equals("PropertySig:")) return readPropertySigBody();
        if (name.equals("CallSig:")) return readCallSigBody();
        if (name.equals("ConstructSig:")) return readConstructSigBody();
        if (name.equals("IndexSig:")) return readIndexSigBody();
        if (name.equals("MethodSig:")) return readMethodSigBody();
        if (name.equals("TypeParam:")) return readTypeParamBody();
        if (name.equals("TopLevel:")) return readTopLevelBody();
        if (name.equals("Functional:")) return readFunctionalBody();
        if (name.equals("ASTSpanInfo:")) return readASTSpanInfoBody();
        if (name.equals("PublicMod:")) return readPublicModBody();
        if (name.equals("PrivateMod:")) return readPrivateModBody();
        if (name.equals("StaticMod:")) return readStaticModBody();
        throw error();
    }

    private Program readProgramBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("body = ");
        TopLevel read_body = (TopLevel) readNode();
        return new Program(read_info, read_body);
    }

    private ModDecl readModDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("body = ");
        TopLevel read_body = (TopLevel) readNode();
        return new ModDecl(read_info, read_name, read_body);
    }

    private ModExpVarStmt readModExpVarStmtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("vds = ");
        List<VarDecl> read_vds = readListOfVarDecl();
        return new ModExpVarStmt(read_info, read_vds);
    }

    private ModExpFunDecl readModExpFunDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("fd = ");
        FunDecl read_fd = (FunDecl) readNode();
        return new ModExpFunDecl(read_info, read_fd);
    }

    private ModExpGetter readModExpGetterBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("fd = ");
        GetProp read_fd = (GetProp) readNode();
        return new ModExpGetter(read_info, read_fd);
    }

    private ModExpSetter readModExpSetterBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("fd = ");
        SetProp read_fd = (SetProp) readNode();
        return new ModExpSetter(read_info, read_fd);
    }

    private ModExpSpecifiers readModExpSpecifiersBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("names = ");
        List<ModExpSpecifier> read_names = readListOfModExpSpecifier();
        return new ModExpSpecifiers(read_info, read_names);
    }

    private ModExpAssignment readModExpAssignmentBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        return new ModExpAssignment(read_info, read_id);
    }

    private ModImpDecl readModImpDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("imports = ");
        List<ModImport> read_imports = readListOfModImport();
        return new ModImpDecl(read_info, read_imports);
    }

    private ExtImpDecl readExtImpDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("module = ");
        String read_module = readString();
        return new ExtImpDecl(read_info, read_id, read_module);
    }

    private TSImpDecl readTSImpDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("path = ");
        Path read_path = (Path) readNode();
        return new TSImpDecl(read_info, read_id, read_path);
    }

    private IntfDecl readIntfDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("tps = ");
        List<TypeParam> read_tps = readListOfTypeParam();
        readFieldDelim("ext = ");
        List<TypeRef> read_ext = readListOfTypeRef();
        readFieldDelim("typ = ");
        ObjectType read_typ = (ObjectType) readNode();
        return new IntfDecl(read_info, read_id, read_tps, read_ext, read_typ);
    }

    private AmbVarDecl readAmbVarDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("ty = ");
        Option<Type> read_ty = readOptionOfType();
        return new AmbVarDecl(read_info, read_id, read_ty);
    }

    private AmbFunDecl readAmbFunDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("sig = ");
        CallSig read_sig = (CallSig) readNode();
        return new AmbFunDecl(read_info, read_id, read_sig);
    }

    private AmbClsDecl readAmbClsDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("tps = ");
        List<TypeParam> read_tps = readListOfTypeParam();
        readFieldDelim("ext = ");
        Option<TypeRef> read_ext = readOptionOfTypeRef();
        readFieldDelim("imp = ");
        List<TypeRef> read_imp = readListOfTypeRef();
        readFieldDelim("elts = ");
        List<AmbClsElt> read_elts = readListOfAmbClsElt();
        return new AmbClsDecl(read_info, read_id, read_tps, read_ext, read_imp, read_elts);
    }

    private AmbEnumDecl readAmbEnumDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("mem = ");
        List<AmbEnumMem> read_mem = readListOfAmbEnumMem();
        return new AmbEnumDecl(read_info, read_id, read_mem);
    }

    private AmbModDecl readAmbModDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("path = ");
        Path read_path = (Path) readNode();
        readFieldDelim("mem = ");
        List<AmbModElt> read_mem = readListOfAmbModElt();
        return new AmbModDecl(read_info, read_path, read_mem);
    }

    private AmbExtModDecl readAmbExtModDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        String read_name = readString();
        readFieldDelim("mem = ");
        List<AmbExtModElt> read_mem = readListOfAmbExtModElt();
        return new AmbExtModDecl(read_info, read_name, read_mem);
    }

    private NoOp readNoOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("desc = ");
        String read_desc = readString();
        return new NoOp(read_info, read_desc);
    }

    private StmtUnit readStmtUnitBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("stmts = ");
        List<Stmt> read_stmts = readListOfStmt();
        return new StmtUnit(read_info, read_stmts);
    }

    private FunDecl readFunDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("ftn = ");
        Functional read_ftn = (Functional) readNode();
        readFieldDelim("strict = ");
        boolean read_strict = readBoolean();
        return new FunDecl(read_info, read_ftn, read_strict);
    }

    private Block readBlockBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("stmts = ");
        List<Stmt> read_stmts = readListOfStmt();
        readFieldDelim("internal = ");
        boolean read_internal = readBoolean();
        return new Block(read_info, read_stmts, read_internal);
    }

    private VarStmt readVarStmtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("vds = ");
        List<VarDecl> read_vds = readListOfVarDecl();
        return new VarStmt(read_info, read_vds);
    }

    private EmptyStmt readEmptyStmtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new EmptyStmt(read_info);
    }

    private ExprStmt readExprStmtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("internal = ");
        boolean read_internal = readBoolean();
        return new ExprStmt(read_info, read_expr, read_internal);
    }

    private If readIfBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("cond = ");
        Expr read_cond = (Expr) readNode();
        readFieldDelim("trueBranch = ");
        Stmt read_trueBranch = (Stmt) readNode();
        readFieldDelim("falseBranch = ");
        Option<Stmt> read_falseBranch = readOptionOfStmt();
        return new If(read_info, read_cond, read_trueBranch, read_falseBranch);
    }

    private DoWhile readDoWhileBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("body = ");
        Stmt read_body = (Stmt) readNode();
        readFieldDelim("cond = ");
        Expr read_cond = (Expr) readNode();
        return new DoWhile(read_info, read_body, read_cond);
    }

    private While readWhileBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("cond = ");
        Expr read_cond = (Expr) readNode();
        readFieldDelim("body = ");
        Stmt read_body = (Stmt) readNode();
        return new While(read_info, read_cond, read_body);
    }

    private For readForBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("init = ");
        Option<Expr> read_init = readOptionOfExpr();
        readFieldDelim("cond = ");
        Option<Expr> read_cond = readOptionOfExpr();
        readFieldDelim("action = ");
        Option<Expr> read_action = readOptionOfExpr();
        readFieldDelim("body = ");
        Stmt read_body = (Stmt) readNode();
        return new For(read_info, read_init, read_cond, read_action, read_body);
    }

    private ForIn readForInBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("lhs = ");
        LHS read_lhs = (LHS) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("body = ");
        Stmt read_body = (Stmt) readNode();
        return new ForIn(read_info, read_lhs, read_expr, read_body);
    }

    private ForVar readForVarBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("vars = ");
        List<VarDecl> read_vars = readListOfVarDecl();
        readFieldDelim("cond = ");
        Option<Expr> read_cond = readOptionOfExpr();
        readFieldDelim("action = ");
        Option<Expr> read_action = readOptionOfExpr();
        readFieldDelim("body = ");
        Stmt read_body = (Stmt) readNode();
        return new ForVar(read_info, read_vars, read_cond, read_action, read_body);
    }

    private ForVarIn readForVarInBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("var = ");
        VarDecl read_var = (VarDecl) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("body = ");
        Stmt read_body = (Stmt) readNode();
        return new ForVarIn(read_info, read_var, read_expr, read_body);
    }

    private Continue readContinueBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("target = ");
        Option<Label> read_target = readOptionOfLabel();
        return new Continue(read_info, read_target);
    }

    private Break readBreakBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("target = ");
        Option<Label> read_target = readOptionOfLabel();
        return new Break(read_info, read_target);
    }

    private Return readReturnBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("expr = ");
        Option<Expr> read_expr = readOptionOfExpr();
        return new Return(read_info, read_expr);
    }

    private With readWithBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        readFieldDelim("stmt = ");
        Stmt read_stmt = (Stmt) readNode();
        return new With(read_info, read_expr, read_stmt);
    }

    private Switch readSwitchBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("cond = ");
        Expr read_cond = (Expr) readNode();
        readFieldDelim("frontCases = ");
        List<Case> read_frontCases = readListOfCase();
        readFieldDelim("def = ");
        Option<List<Stmt>> read_def = readOptionOfListOfStmt();
        readFieldDelim("backCases = ");
        List<Case> read_backCases = readListOfCase();
        return new Switch(read_info, read_cond, read_frontCases, read_def, read_backCases);
    }

    private LabelStmt readLabelStmtBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("label = ");
        Label read_label = (Label) readNode();
        readFieldDelim("stmt = ");
        Stmt read_stmt = (Stmt) readNode();
        return new LabelStmt(read_info, read_label, read_stmt);
    }

    private Throw readThrowBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new Throw(read_info, read_expr);
    }

    private Try readTryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("body = ");
        List<Stmt> read_body = readListOfStmt();
        readFieldDelim("catchBlock = ");
        Option<Catch> read_catchBlock = readOptionOfCatch();
        readFieldDelim("fin = ");
        Option<List<Stmt>> read_fin = readOptionOfListOfStmt();
        return new Try(read_info, read_body, read_catchBlock, read_fin);
    }

    private Debugger readDebuggerBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new Debugger(read_info);
    }

    private SourceElements readSourceElementsBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("body = ");
        List<SourceElement> read_body = readListOfSourceElement();
        readFieldDelim("strict = ");
        boolean read_strict = readBoolean();
        return new SourceElements(read_info, read_body, read_strict);
    }

    private VarDecl readVarDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("expr = ");
        Option<Expr> read_expr = readOptionOfExpr();
        readFieldDelim("strict = ");
        boolean read_strict = readBoolean();
        return new VarDecl(read_info, read_name, read_expr, read_strict);
    }

    private Case readCaseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("cond = ");
        Expr read_cond = (Expr) readNode();
        readFieldDelim("body = ");
        List<Stmt> read_body = readListOfStmt();
        return new Case(read_info, read_cond, read_body);
    }

    private Catch readCatchBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("body = ");
        List<Stmt> read_body = readListOfStmt();
        return new Catch(read_info, read_id, read_body);
    }

    private ModImpSpecifierSet readModImpSpecifierSetBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("imports = ");
        List<ModImpSpecifier> read_imports = readListOfModImpSpecifier();
        readFieldDelim("module = ");
        Path read_module = (Path) readNode();
        return new ModImpSpecifierSet(read_info, read_imports, read_module);
    }

    private ModImpAliasClause readModImpAliasClauseBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        Path read_name = (Path) readNode();
        readFieldDelim("alias = ");
        Id read_alias = (Id) readNode();
        return new ModImpAliasClause(read_info, read_name, read_alias);
    }

    private AmbCnstDecl readAmbCnstDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("ps = ");
        List<Param> read_ps = readListOfParam();
        return new AmbCnstDecl(read_info, read_ps);
    }

    private AmbMemDecl readAmbMemDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("mods = ");
        List<Modifier> read_mods = readListOfModifier();
        readFieldDelim("prop = ");
        Property read_prop = (Property) readNode();
        readFieldDelim("typ = ");
        Option<Type> read_typ = readOptionOfType();
        return new AmbMemDecl(read_info, read_mods, read_prop, read_typ);
    }

    private AmbIndDecl readAmbIndDeclBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("ind = ");
        IndexSig read_ind = (IndexSig) readNode();
        return new AmbIndDecl(read_info, read_ind);
    }

    private AmbEnumMem readAmbEnumMemBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("prop = ");
        Property read_prop = (Property) readNode();
        readFieldDelim("num = ");
        Option<NumberLiteral> read_num = readOptionOfNumberLiteral();
        return new AmbEnumMem(read_info, read_prop, read_num);
    }

    private AmbModElt readAmbModEltBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("decl = ");
        SourceElement read_decl = (SourceElement) readNode();
        return new AmbModElt(read_info, read_decl);
    }

    private AmbExtModElt readAmbExtModEltBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("decl = ");
        SourceElement read_decl = (SourceElement) readNode();
        return new AmbExtModElt(read_info, read_decl);
    }

    private ExprList readExprListBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("exprs = ");
        List<Expr> read_exprs = readListOfExpr();
        return new ExprList(read_info, read_exprs);
    }

    private Cond readCondBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("cond = ");
        Expr read_cond = (Expr) readNode();
        readFieldDelim("trueBranch = ");
        Expr read_trueBranch = (Expr) readNode();
        readFieldDelim("falseBranch = ");
        Expr read_falseBranch = (Expr) readNode();
        return new Cond(read_info, read_cond, read_trueBranch, read_falseBranch);
    }

    private InfixOpApp readInfixOpAppBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("left = ");
        Expr read_left = (Expr) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("right = ");
        Expr read_right = (Expr) readNode();
        return new InfixOpApp(read_info, read_left, read_op, read_right);
    }

    private PrefixOpApp readPrefixOpAppBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("right = ");
        Expr read_right = (Expr) readNode();
        return new PrefixOpApp(read_info, read_op, read_right);
    }

    private UnaryAssignOpApp readUnaryAssignOpAppBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("lhs = ");
        LHS read_lhs = (LHS) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        return new UnaryAssignOpApp(read_info, read_lhs, read_op);
    }

    private AssignOpApp readAssignOpAppBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("lhs = ");
        LHS read_lhs = (LHS) readNode();
        readFieldDelim("op = ");
        Op read_op = (Op) readNode();
        readFieldDelim("right = ");
        Expr read_right = (Expr) readNode();
        return new AssignOpApp(read_info, read_lhs, read_op, read_right);
    }

    private This readThisBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new This(read_info);
    }

    private Null readNullBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new Null(read_info);
    }

    private Bool readBoolBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("bool = ");
        boolean read_bool = readBoolean();
        return new Bool(read_info, read_bool);
    }

    private DoubleLiteral readDoubleLiteralBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("num = ");
        Double read_num = (Double) readUnknownObject();
        return new DoubleLiteral(read_info, read_text, read_num);
    }

    private IntLiteral readIntLiteralBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("intVal = ");
        BigInteger read_intVal = (BigInteger) readUnknownObject();
        readFieldDelim("radix = ");
        int read_radix = readInt();
        return new IntLiteral(read_info, read_intVal, read_radix);
    }

    private StringLiteral readStringLiteralBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("quote = ");
        String read_quote = readString();
        readFieldDelim("escaped = ");
        String read_escaped = readString();
        return new StringLiteral(read_info, read_quote, read_escaped);
    }

    private RegularExpression readRegularExpressionBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("body = ");
        String read_body = readString();
        readFieldDelim("flag = ");
        String read_flag = readString();
        return new RegularExpression(read_info, read_body, read_flag);
    }

    private VarRef readVarRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        return new VarRef(read_info, read_id);
    }

    private ArrayExpr readArrayExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("elements = ");
        List<Option<Expr>> read_elements = readListOfOptionOfExpr();
        return new ArrayExpr(read_info, read_elements);
    }

    private ArrayNumberExpr readArrayNumberExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("elements = ");
        List<Double> read_elements = readListOfDouble();
        return new ArrayNumberExpr(read_info, read_elements);
    }

    private ObjectExpr readObjectExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("members = ");
        List<Member> read_members = readListOfMember();
        return new ObjectExpr(read_info, read_members);
    }

    private Parenthesized readParenthesizedBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new Parenthesized(read_info, read_expr);
    }

    private FunExpr readFunExprBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("ftn = ");
        Functional read_ftn = (Functional) readNode();
        return new FunExpr(read_info, read_ftn);
    }

    private Bracket readBracketBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("obj = ");
        LHS read_obj = (LHS) readNode();
        readFieldDelim("index = ");
        Expr read_index = (Expr) readNode();
        return new Bracket(read_info, read_obj, read_index);
    }

    private Dot readDotBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("obj = ");
        LHS read_obj = (LHS) readNode();
        readFieldDelim("member = ");
        Id read_member = (Id) readNode();
        return new Dot(read_info, read_obj, read_member);
    }

    private New readNewBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("lhs = ");
        LHS read_lhs = (LHS) readNode();
        return new New(read_info, read_lhs);
    }

    private FunApp readFunAppBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("fun = ");
        LHS read_fun = (LHS) readNode();
        readFieldDelim("args = ");
        List<Expr> read_args = readListOfExpr();
        return new FunApp(read_info, read_fun, read_args);
    }

    private PropId readPropIdBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        return new PropId(read_info, read_id);
    }

    private PropStr readPropStrBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("str = ");
        String read_str = readString();
        return new PropStr(read_info, read_str);
    }

    private PropNum readPropNumBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("num = ");
        NumberLiteral read_num = (NumberLiteral) readNode();
        return new PropNum(read_info, read_num);
    }

    private Field readFieldBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("prop = ");
        Property read_prop = (Property) readNode();
        readFieldDelim("expr = ");
        Expr read_expr = (Expr) readNode();
        return new Field(read_info, read_prop, read_expr);
    }

    private GetProp readGetPropBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("prop = ");
        Property read_prop = (Property) readNode();
        readFieldDelim("ftn = ");
        Functional read_ftn = (Functional) readNode();
        return new GetProp(read_info, read_prop, read_ftn);
    }

    private SetProp readSetPropBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("prop = ");
        Property read_prop = (Property) readNode();
        readFieldDelim("ftn = ");
        Functional read_ftn = (Functional) readNode();
        return new SetProp(read_info, read_prop, read_ftn);
    }

    private Id readIdBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("uniqueName = ");
        Option<String> read_uniqueName = readOptionOfString();
        readFieldDelim("with = ");
        boolean read_with = readBoolean();
        return new Id(read_info, read_text, read_uniqueName, read_with);
    }

    private Op readOpBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        return new Op(read_info, read_text);
    }

    private TypeName readTypeNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("text = ");
        String read_text = readString();
        readFieldDelim("names = ");
        List<Id> read_names = readListOfId();
        return new TypeName(read_info, read_text, read_names);
    }

    private AnonymousFnName readAnonymousFnNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new AnonymousFnName(read_info);
    }

    private Path readPathBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("names = ");
        List<Id> read_names = readListOfId();
        return new Path(read_info, read_names);
    }

    private ModExpStarFromPath readModExpStarFromPathBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("module = ");
        Path read_module = (Path) readNode();
        return new ModExpStarFromPath(read_info, read_module);
    }

    private ModExpStar readModExpStarBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new ModExpStar(read_info);
    }

    private ModExpAlias readModExpAliasBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("alias = ");
        Path read_alias = (Path) readNode();
        return new ModExpAlias(read_info, read_name, read_alias);
    }

    private ModExpName readModExpNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        Path read_name = (Path) readNode();
        return new ModExpName(read_info, read_name);
    }

    private ModImpAlias readModImpAliasBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("alias = ");
        Id read_alias = (Id) readNode();
        return new ModImpAlias(read_info, read_name, read_alias);
    }

    private ModImpName readModImpNameBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        return new ModImpName(read_info, read_name);
    }

    private Label readLabelBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        return new Label(read_info, read_id);
    }

    private Comment readCommentBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("comment = ");
        String read_comment = readString();
        return new Comment(read_info, read_comment);
    }

    private Param readParamBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("mod = ");
        Option<Modifier> read_mod = readOptionOfModifier();
        readFieldDelim("typ = ");
        Option<Type> read_typ = readOptionOfType();
        readFieldDelim("defaultExpr = ");
        Option<Expr> read_defaultExpr = readOptionOfExpr();
        readFieldDelim("optional = ");
        boolean read_optional = readBoolean();
        readFieldDelim("rest = ");
        boolean read_rest = readBoolean();
        return new Param(read_info, read_name, read_mod, read_typ, read_defaultExpr, read_optional, read_rest);
    }

    private AnyT readAnyTBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new AnyT(read_info);
    }

    private NumberT readNumberTBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new NumberT(read_info);
    }

    private BoolT readBoolTBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new BoolT(read_info);
    }

    private StringT readStringTBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new StringT(read_info);
    }

    private VoidT readVoidTBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        return new VoidT(read_info);
    }

    private TypeRef readTypeRefBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        TypeName read_name = (TypeName) readNode();
        readFieldDelim("args = ");
        List<Type> read_args = readListOfType();
        return new TypeRef(read_info, read_name, read_args);
    }

    private TypeQuery readTypeQueryBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("path = ");
        Path read_path = (Path) readNode();
        return new TypeQuery(read_info, read_path);
    }

    private ObjectType readObjectTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("members = ");
        List<TypeMember> read_members = readListOfTypeMember();
        return new ObjectType(read_info, read_members);
    }

    private ArrayType readArrayTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("typ = ");
        Type read_typ = (Type) readNode();
        return new ArrayType(read_info, read_typ);
    }

    private FunctionType readFunctionTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("tparams = ");
        List<TypeParam> read_tparams = readListOfTypeParam();
        readFieldDelim("params = ");
        List<Param> read_params = readListOfParam();
        readFieldDelim("typ = ");
        Type read_typ = (Type) readNode();
        return new FunctionType(read_info, read_tparams, read_params, read_typ);
    }

    private ConstructorType readConstructorTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("tparams = ");
        List<TypeParam> read_tparams = readListOfTypeParam();
        readFieldDelim("params = ");
        List<Param> read_params = readListOfParam();
        readFieldDelim("typ = ");
        Type read_typ = (Type) readNode();
        return new ConstructorType(read_info, read_tparams, read_params, read_typ);
    }

    private ExprType readExprTypeBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        String read_name = readString();
        return new ExprType(read_info, read_name);
    }

    private PropertySig readPropertySigBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("prop = ");
        Property read_prop = (Property) readNode();
        readFieldDelim("optional = ");
        boolean read_optional = readBoolean();
        readFieldDelim("typ = ");
        Option<Type> read_typ = readOptionOfType();
        return new PropertySig(read_info, read_prop, read_optional, read_typ);
    }

    private CallSig readCallSigBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("tparams = ");
        List<TypeParam> read_tparams = readListOfTypeParam();
        readFieldDelim("params = ");
        List<Param> read_params = readListOfParam();
        readFieldDelim("typ = ");
        Option<Type> read_typ = readOptionOfType();
        return new CallSig(read_info, read_tparams, read_params, read_typ);
    }

    private ConstructSig readConstructSigBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("tparams = ");
        List<TypeParam> read_tparams = readListOfTypeParam();
        readFieldDelim("params = ");
        List<Param> read_params = readListOfParam();
        readFieldDelim("typ = ");
        Option<Type> read_typ = readOptionOfType();
        return new ConstructSig(read_info, read_tparams, read_params, read_typ);
    }

    private IndexSig readIndexSigBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("id = ");
        Id read_id = (Id) readNode();
        readFieldDelim("annot = ");
        Type read_annot = (Type) readNode();
        readFieldDelim("num = ");
        boolean read_num = readBoolean();
        return new IndexSig(read_info, read_id, read_annot, read_num);
    }

    private MethodSig readMethodSigBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("prop = ");
        Property read_prop = (Property) readNode();
        readFieldDelim("optional = ");
        boolean read_optional = readBoolean();
        readFieldDelim("sig = ");
        CallSig read_sig = (CallSig) readNode();
        return new MethodSig(read_info, read_prop, read_optional, read_sig);
    }

    private TypeParam readTypeParamBody() throws java.io.IOException {
        readFieldDelim("info = ");
        ASTSpanInfo read_info = (ASTSpanInfo) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("ext = ");
        Option<Type> read_ext = readOptionOfType();
        return new TypeParam(read_info, read_name, read_ext);
    }

    private TopLevel readTopLevelBody() throws java.io.IOException {
        readFieldDelim("fds = ");
        List<FunDecl> read_fds = readListOfFunDecl();
        readFieldDelim("vds = ");
        List<VarDecl> read_vds = readListOfVarDecl();
        readFieldDelim("stmts = ");
        List<SourceElements> read_stmts = readListOfSourceElements();
        return new TopLevel(read_fds, read_vds, read_stmts);
    }

    private Functional readFunctionalBody() throws java.io.IOException {
        readFieldDelim("fds = ");
        List<FunDecl> read_fds = readListOfFunDecl();
        readFieldDelim("vds = ");
        List<VarDecl> read_vds = readListOfVarDecl();
        readFieldDelim("stmts = ");
        SourceElements read_stmts = (SourceElements) readNode();
        readFieldDelim("name = ");
        Id read_name = (Id) readNode();
        readFieldDelim("params = ");
        List<Id> read_params = readListOfId();
        return new Functional(read_fds, read_vds, read_stmts, read_name, read_params);
    }

    private ASTSpanInfo readASTSpanInfoBody() throws java.io.IOException {
        readFieldDelim("span = ");
        Span read_span = (Span) readUnknownObject();
        readFieldDelim("comment = ");
        Option<Comment> read_comment = readOptionOfComment();
        return new ASTSpanInfo(read_span, read_comment);
    }

    private PublicMod readPublicModBody() throws java.io.IOException {
        return new PublicMod();
    }

    private PrivateMod readPrivateModBody() throws java.io.IOException {
        return new PrivateMod();
    }

    private StaticMod readStaticModBody() throws java.io.IOException {
        return new StaticMod();
    }


    private List<VarDecl> readListOfVarDecl() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<VarDecl> accum = new java.util.ArrayList<VarDecl>();
        while (readMoreListElements()) {
            accum.add((VarDecl) readNode());
        }
        return accum;
    }

    private List<ModExpSpecifier> readListOfModExpSpecifier() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<ModExpSpecifier> accum = new java.util.ArrayList<ModExpSpecifier>();
        while (readMoreListElements()) {
            accum.add((ModExpSpecifier) readNode());
        }
        return accum;
    }

    private List<ModImport> readListOfModImport() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<ModImport> accum = new java.util.ArrayList<ModImport>();
        while (readMoreListElements()) {
            accum.add((ModImport) readNode());
        }
        return accum;
    }

    private List<TypeParam> readListOfTypeParam() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<TypeParam> accum = new java.util.ArrayList<TypeParam>();
        while (readMoreListElements()) {
            accum.add((TypeParam) readNode());
        }
        return accum;
    }

    private List<TypeRef> readListOfTypeRef() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<TypeRef> accum = new java.util.ArrayList<TypeRef>();
        while (readMoreListElements()) {
            accum.add((TypeRef) readNode());
        }
        return accum;
    }

    private Option<Type> readOptionOfType() throws java.io.IOException {
        if (readOptionHeader()) {
            Type elt_result = (Type) readNode();
            readExpected(")");
            return Option.<Type>some(elt_result);
        }
        else { return Option.<Type>none(); }
    }

    private Option<TypeRef> readOptionOfTypeRef() throws java.io.IOException {
        if (readOptionHeader()) {
            TypeRef elt_result = (TypeRef) readNode();
            readExpected(")");
            return Option.<TypeRef>some(elt_result);
        }
        else { return Option.<TypeRef>none(); }
    }

    private List<AmbClsElt> readListOfAmbClsElt() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<AmbClsElt> accum = new java.util.ArrayList<AmbClsElt>();
        while (readMoreListElements()) {
            accum.add((AmbClsElt) readNode());
        }
        return accum;
    }

    private List<AmbEnumMem> readListOfAmbEnumMem() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<AmbEnumMem> accum = new java.util.ArrayList<AmbEnumMem>();
        while (readMoreListElements()) {
            accum.add((AmbEnumMem) readNode());
        }
        return accum;
    }

    private List<AmbModElt> readListOfAmbModElt() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<AmbModElt> accum = new java.util.ArrayList<AmbModElt>();
        while (readMoreListElements()) {
            accum.add((AmbModElt) readNode());
        }
        return accum;
    }

    private List<AmbExtModElt> readListOfAmbExtModElt() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<AmbExtModElt> accum = new java.util.ArrayList<AmbExtModElt>();
        while (readMoreListElements()) {
            accum.add((AmbExtModElt) readNode());
        }
        return accum;
    }

    private List<Stmt> readListOfStmt() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Stmt> accum = new java.util.ArrayList<Stmt>();
        while (readMoreListElements()) {
            accum.add((Stmt) readNode());
        }
        return accum;
    }

    private Option<Stmt> readOptionOfStmt() throws java.io.IOException {
        if (readOptionHeader()) {
            Stmt elt_result = (Stmt) readNode();
            readExpected(")");
            return Option.<Stmt>some(elt_result);
        }
        else { return Option.<Stmt>none(); }
    }

    private Option<Expr> readOptionOfExpr() throws java.io.IOException {
        if (readOptionHeader()) {
            Expr elt_result = (Expr) readNode();
            readExpected(")");
            return Option.<Expr>some(elt_result);
        }
        else { return Option.<Expr>none(); }
    }

    private Option<Label> readOptionOfLabel() throws java.io.IOException {
        if (readOptionHeader()) {
            Label elt_result = (Label) readNode();
            readExpected(")");
            return Option.<Label>some(elt_result);
        }
        else { return Option.<Label>none(); }
    }

    private List<Case> readListOfCase() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Case> accum = new java.util.ArrayList<Case>();
        while (readMoreListElements()) {
            accum.add((Case) readNode());
        }
        return accum;
    }

    private Option<List<Stmt>> readOptionOfListOfStmt() throws java.io.IOException {
        if (readOptionHeader()) {
            List<Stmt> elt_result = readListOfStmt();
            readExpected(")");
            return Option.<List<Stmt>>some(elt_result);
        }
        else { return Option.<List<Stmt>>none(); }
    }

    private Option<Catch> readOptionOfCatch() throws java.io.IOException {
        if (readOptionHeader()) {
            Catch elt_result = (Catch) readNode();
            readExpected(")");
            return Option.<Catch>some(elt_result);
        }
        else { return Option.<Catch>none(); }
    }

    private List<SourceElement> readListOfSourceElement() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<SourceElement> accum = new java.util.ArrayList<SourceElement>();
        while (readMoreListElements()) {
            accum.add((SourceElement) readNode());
        }
        return accum;
    }

    private List<ModImpSpecifier> readListOfModImpSpecifier() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<ModImpSpecifier> accum = new java.util.ArrayList<ModImpSpecifier>();
        while (readMoreListElements()) {
            accum.add((ModImpSpecifier) readNode());
        }
        return accum;
    }

    private List<Param> readListOfParam() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Param> accum = new java.util.ArrayList<Param>();
        while (readMoreListElements()) {
            accum.add((Param) readNode());
        }
        return accum;
    }

    private List<Modifier> readListOfModifier() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Modifier> accum = new java.util.ArrayList<Modifier>();
        while (readMoreListElements()) {
            accum.add((Modifier) readNode());
        }
        return accum;
    }

    private Option<NumberLiteral> readOptionOfNumberLiteral() throws java.io.IOException {
        if (readOptionHeader()) {
            NumberLiteral elt_result = (NumberLiteral) readNode();
            readExpected(")");
            return Option.<NumberLiteral>some(elt_result);
        }
        else { return Option.<NumberLiteral>none(); }
    }

    private List<Expr> readListOfExpr() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Expr> accum = new java.util.ArrayList<Expr>();
        while (readMoreListElements()) {
            accum.add((Expr) readNode());
        }
        return accum;
    }

    private List<Option<Expr>> readListOfOptionOfExpr() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Option<Expr>> accum = new java.util.ArrayList<Option<Expr>>();
        while (readMoreListElements()) {
            accum.add(readOptionOfExpr());
        }
        return accum;
    }

    private List<Double> readListOfDouble() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Double> accum = new java.util.ArrayList<Double>();
        while (readMoreListElements()) {
            accum.add((Double) readUnknownObject());
        }
        return accum;
    }

    private List<Member> readListOfMember() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Member> accum = new java.util.ArrayList<Member>();
        while (readMoreListElements()) {
            accum.add((Member) readNode());
        }
        return accum;
    }

    private Option<String> readOptionOfString() throws java.io.IOException {
        if (readOptionHeader()) {
            String elt_result = readString();
            readExpected(")");
            return Option.<String>some(elt_result);
        }
        else { return Option.<String>none(); }
    }

    private List<Id> readListOfId() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Id> accum = new java.util.ArrayList<Id>();
        while (readMoreListElements()) {
            accum.add((Id) readNode());
        }
        return accum;
    }

    private Option<Modifier> readOptionOfModifier() throws java.io.IOException {
        if (readOptionHeader()) {
            Modifier elt_result = (Modifier) readNode();
            readExpected(")");
            return Option.<Modifier>some(elt_result);
        }
        else { return Option.<Modifier>none(); }
    }

    private List<Type> readListOfType() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<Type> accum = new java.util.ArrayList<Type>();
        while (readMoreListElements()) {
            accum.add((Type) readNode());
        }
        return accum;
    }

    private List<TypeMember> readListOfTypeMember() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<TypeMember> accum = new java.util.ArrayList<TypeMember>();
        while (readMoreListElements()) {
            accum.add((TypeMember) readNode());
        }
        return accum;
    }

    private List<FunDecl> readListOfFunDecl() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<FunDecl> accum = new java.util.ArrayList<FunDecl>();
        while (readMoreListElements()) {
            accum.add((FunDecl) readNode());
        }
        return accum;
    }

    private List<SourceElements> readListOfSourceElements() throws java.io.IOException {
        readExpected("{");
        java.util.ArrayList<SourceElements> accum = new java.util.ArrayList<SourceElements>();
        while (readMoreListElements()) {
            accum.add((SourceElements) readNode());
        }
        return accum;
    }

    private Option<Comment> readOptionOfComment() throws java.io.IOException {
        if (readOptionHeader()) {
            Comment elt_result = (Comment) readNode();
            readExpected(")");
            return Option.<Comment>some(elt_result);
        }
        else { return Option.<Comment>none(); }
    }

    protected boolean readBoolean() throws java.io.IOException {
      char c = readCharWord();
      char t = c;
      while (!java.lang.Character.isWhitespace(t)) t=next();
      if (c=='t') return true;
      if (c=='f') return false;
      throw error();
    }
    
    protected char readChar() throws java.io.IOException {
      readExpected("\"");
      java.lang.String word = readTo('"', true);
      java.lang.String result = unescape(word);
      if (result.length() != 1) throw error();
      return result.charAt(0);
    }
    
    protected byte readByte() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Byte.parseByte(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected short readShort() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Short.parseShort(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected int readInt() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Integer.parseInt(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected long readLong() throws java.io.IOException {
      java.lang.String word = readNum();
      try { return java.lang.Long.parseLong(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected float readFloat() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Float.parseFloat(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected double readDouble() throws java.io.IOException {
      java.lang.String word = readWord();
      try { return java.lang.Double.parseDouble(word); }
      catch (java.lang.NumberFormatException e) { throw error(); }
    }
    
    protected java.lang.String readString() throws java.io.IOException {
      char delim = readCharWord();
      if (delim == '_') { return null; }
      if (delim != '"') { throw error(); }
      next();
      java.lang.String word = readTo('"', true);
      return unescape(word);
    }
    
    protected Object wordToUnknownObject(java.lang.String word) throws java.io.IOException {
      if (word.equals("_")) return null;
      java.io.ObjectInputStream objIn = toObjectStream(word);
      try { return objIn.readObject(); } // may throw an IOException
      catch (java.lang.ClassNotFoundException e) {
        throw new java.io.IOException("ClassNotFoundException: " + e.getMessage());
      }
      finally {
        try { objIn.close(); }
        catch (java.io.IOException e) { /* made a best attempt; ignore */ }
      }
    }
    
    protected Object readUnknownObject() throws java.io.IOException {
      java.lang.String word = readWord();
      readToNewline();
      return wordToUnknownObject(word);
    }
    
    /** Read the next word, delimited by whitespace, starting from curr().
        curr() is next whitespace char after word. */
    protected java.lang.String readWord() throws java.io.IOException {
      char c = readCharWord();
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      do {
        result.append(c);
        c = next();
      } while (!java.lang.Character.isWhitespace(c));
      return result.toString();
    }
    
    /** Read the next number starting with curr(): whitespace, possible
        '-', digit sequence.  curr() is first non-digit char
        thereafter. */
    protected java.lang.String readNum() throws java.io.IOException {
      char c = readCharWord();
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      if (c!='-' && !java.lang.Character.isDigit(c))
        throw error();
      do {
        result.append(c);
        c = next();
      } while (java.lang.Character.isDigit(c));
      return result.toString();
    }
    
    /** Read the next character, skipping any previous whitespace. */
    protected char readCharWord() throws java.io.IOException {
      char c = currentChar;
      while (java.lang.Character.isWhitespace(c)) {
        c = next();
      }
      return c;
    }
    
    /** Discard whitespace, then read exactly the string s.  curr() just afterwards. */
    protected void readExpected(java.lang.String s) throws java.io.IOException {
      char c = readCharWord();
      for (int i = 0; i < s.length(); i++) {
        if (c != s.charAt(i)) {
          System.out.println("Was expecting '"+s+"', saw '"+c+
                             "' instead of '"+s.charAt(i)+"'");
          throw error();
        }
        c = next();
      }
    }
    
    /** Look for and discard field delimiter. */
    protected void readFieldDelim(java.lang.String s) throws java.io.IOException {
      readExpected(s);
    }
    
    /** Look for next element in list. */
    protected boolean readMoreListElements() throws java.io.IOException {
      char c = readCharWord();
      if (c=='}') {
        next();
        return false;
      }
      if (c=='*') {
        next();
        return true;
      }
      throw error();
    }
    
    /** Look for header of option type.  Return true if contents must be
        parsed, false if it is Option.none(). */
    protected boolean readOptionHeader() throws java.io.IOException {
      char c = readCharWord();
      if (c=='~') {
        next();
        return false;
      }
      if (c=='(') {
        next();
        return true;
      }
      throw error();
    }
    
    /**
     * Read up to a delimiter; it is an error if a newline or eof is encountered first.
     * @return The the characters read before the delimiter.
     */
    protected java.lang.String readTo(char delim, boolean skipEscape) throws java.io.IOException {
      java.lang.StringBuilder result = new java.lang.StringBuilder();
      boolean escape = false;
      char c = curr();
      while (escape || c != delim) {
        if (c == '\n' || c == '\r') throw error();
        result.append(c);
        if (escape) escape = false;
        else if (skipEscape && c == '\\') escape = true;
        c = next();
      }
      next(); // skip delim
      return result.toString();
    }
    
    /**
     * Skip to one of the given delimiters; it is an error if a newline or eof is encountered first.
     * @return The delimiter that was found.
     */
    protected char skipTo(char... delims) throws java.io.IOException {
      char c = currentChar;
      while (true) {
        if (c == '\n' || c == '\r') throw error();
        for (char delim : delims) {
          if (c == delim) return delim;
        }
        c = next();
      }
    }
    
    protected java.lang.String readToNewline() throws java.io.IOException {
      java.lang.String result = in.readLine();
      if (result == null) throw error();
      readCharWord();
      return result;
    }
    
    protected char next() throws java.io.IOException {
      int c = in.read();
      if (c == -1) throw error();
      currentChar = (char)c;
      return currentChar;
    }
    
    protected char curr() {
      return currentChar;
    }
    
    /** Unescapes a subset of valid Java-style escaped strings.  Unicode escapes are not
      * supported (the JLS doesn't treat them as part of this escaping process, either).
      * Octal escapes are required to use exactly 3 digits.
      */
    protected java.lang.String unescape(java.lang.String s) throws java.io.IOException {
      boolean escape = false;
      final java.lang.StringBuilder digits = new java.lang.StringBuilder();
      boolean changed = false;
      final java.lang.StringBuilder result = new java.lang.StringBuilder();
      for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (escape) {
          switch (c) {
            case 'b': result.append('\b'); break;
            case 't': result.append('\t'); break;
            case 'n': result.append('\n'); break;
            case 'f': result.append('\f'); break;
            case 'r': result.append('\r'); break;
    
            case '"': case '\'': case '\\':
              result.append(c); break;
    
            case '0': case '1': case '2': case '3':
            case '4': case '5': case '6': case '7':
              digits.append(c);
              if (digits.length() == 3) {
                // this should succeed -- there are guaranteed to be 3 octal digits
                result.append((char) java.lang.Integer.parseInt(digits.toString(), 8));
                digits.setLength(0);
              }
              break;
    
            default:
              throw error();
          }
          if (digits.length() == 0) escape = false;
        }
        else {
          if (c == '\\') { escape = true; changed = true; }
          else { result.append(c); }
        }
      }
      if (escape) throw error(); // escape was not completed
      return changed ? result.toString() : s;
    }
    
    /** Treat a string representation of a hexadecimal number as an ObjectInputStream */
    protected java.io.ObjectInputStream toObjectStream(java.lang.String byteString)
        throws java.io.IOException {
      if (byteString.length() % 2 != 0) throw error();
      int length = byteString.length() / 2;
      byte[] bytes = new byte[length];
      for (int i = 0; i < length; i++) {
        java.lang.String b = byteString.substring(i*2, i*2+2);
        try {
          int unsigned = java.lang.Integer.parseInt(b, 16);
          if (unsigned < 128) bytes[i] = (byte) unsigned;
          else bytes[i] = (byte) (unsigned - 256); // maps 255 to -1, 128 to -128
        }
        catch (java.lang.NumberFormatException e) { throw error(); }
      }
      // this may throw an IOException
      return new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(bytes));
    }
    
    protected java.io.IOException error() {
      return new java.io.IOException("Serialized data is not properly encoded");
    }
}
