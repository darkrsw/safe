/* THIS FILE WAS AUTOMATICALLY GENERATED BY
   kr.ac.kaist.jsaf.astgen.ScalaAstGenerator FROM JS.ast */

package kr.ac.kaist.jsaf.scala_src.nodes
import kr.ac.kaist.jsaf.scala_src.useful._
import kr.ac.kaist.jsaf.nodes_util._
import kr.ac.kaist.jsaf.useful.HasAt
import _root_.scala.collection.mutable.ListBuffer
import _root_.java.math.BigInteger
import _root_.java.lang.Double
import kr.ac.kaist.jsaf.scala_src.useful.ASTGenHelper._

object JSAst {}


object SASTNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ASTNode) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Node) = 
      Some(())
}
object SASTSpanInfo {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      Some((scalaify(node.getSpan()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.Span], scalaify(node.getComment()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Comment]]))
   def apply(getSpan:kr.ac.kaist.jsaf.nodes_util.Span, getComment:Option[kr.ac.kaist.jsaf.nodes.Comment]) = 
      new kr.ac.kaist.jsaf.nodes.ASTSpanInfo(javaify(getSpan).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.Span], javaify(getComment).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Comment]])
}
object SAbstractNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AbstractNode) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SAmbClsDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbClsDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getTps()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], scalaify(node.getExt()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.TypeRef]], scalaify(node.getImp()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeRef]], scalaify(node.getElts()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.AmbClsElt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id, getTps:List[kr.ac.kaist.jsaf.nodes.TypeParam], getExt:Option[kr.ac.kaist.jsaf.nodes.TypeRef], getImp:List[kr.ac.kaist.jsaf.nodes.TypeRef], getElts:List[kr.ac.kaist.jsaf.nodes.AmbClsElt]) = 
      new kr.ac.kaist.jsaf.nodes.AmbClsDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getTps).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.TypeParam]], javaify(getExt).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.TypeRef]], javaify(getImp).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.TypeRef]], javaify(getElts).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.AmbClsElt]])
}
object SAmbClsElt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbClsElt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SAmbCnstDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbCnstDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getPs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getPs:List[kr.ac.kaist.jsaf.nodes.Param]) = 
      new kr.ac.kaist.jsaf.nodes.AmbCnstDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getPs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Param]])
}
object SAmbDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SAmbEnumDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbEnumDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getMem()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.AmbEnumMem]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id, getMem:List[kr.ac.kaist.jsaf.nodes.AmbEnumMem]) = 
      new kr.ac.kaist.jsaf.nodes.AmbEnumDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getMem).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.AmbEnumMem]])
}
object SAmbEnumMem {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbEnumMem) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getProp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], scalaify(node.getNum()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.NumberLiteral]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getProp:kr.ac.kaist.jsaf.nodes.Property, getNum:Option[kr.ac.kaist.jsaf.nodes.NumberLiteral]) = 
      new kr.ac.kaist.jsaf.nodes.AmbEnumMem(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], javaify(getNum).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.NumberLiteral]])
}
object SAmbExtModDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbExtModDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getMem()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.AmbExtModElt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:String, getMem:List[kr.ac.kaist.jsaf.nodes.AmbExtModElt]) = 
      new kr.ac.kaist.jsaf.nodes.AmbExtModDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[String], javaify(getMem).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.AmbExtModElt]])
}
object SAmbExtModElt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbExtModElt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getDecl()).asInstanceOf[kr.ac.kaist.jsaf.nodes.SourceElement]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getDecl:kr.ac.kaist.jsaf.nodes.SourceElement) = 
      new kr.ac.kaist.jsaf.nodes.AmbExtModElt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getDecl).asInstanceOf[kr.ac.kaist.jsaf.nodes.SourceElement])
}
object SAmbFunDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbFunDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getSig()).asInstanceOf[kr.ac.kaist.jsaf.nodes.CallSig]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id, getSig:kr.ac.kaist.jsaf.nodes.CallSig) = 
      new kr.ac.kaist.jsaf.nodes.AmbFunDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getSig).asInstanceOf[kr.ac.kaist.jsaf.nodes.CallSig])
}
object SAmbIndDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbIndDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getInd()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IndexSig]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getInd:kr.ac.kaist.jsaf.nodes.IndexSig) = 
      new kr.ac.kaist.jsaf.nodes.AmbIndDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getInd).asInstanceOf[kr.ac.kaist.jsaf.nodes.IndexSig])
}
object SAmbMemDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbMemDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getMods()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Modifier]], scalaify(node.getProp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], scalaify(node.getTyp()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getMods:List[kr.ac.kaist.jsaf.nodes.Modifier], getProp:kr.ac.kaist.jsaf.nodes.Property, getTyp:Option[kr.ac.kaist.jsaf.nodes.Type]) = 
      new kr.ac.kaist.jsaf.nodes.AmbMemDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getMods).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Modifier]], javaify(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], javaify(getTyp).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Type]])
}
object SAmbModDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbModDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getPath()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path], scalaify(node.getMem()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.AmbModElt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getPath:kr.ac.kaist.jsaf.nodes.Path, getMem:List[kr.ac.kaist.jsaf.nodes.AmbModElt]) = 
      new kr.ac.kaist.jsaf.nodes.AmbModDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getPath).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path], javaify(getMem).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.AmbModElt]])
}
object SAmbModElt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbModElt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getDecl()).asInstanceOf[kr.ac.kaist.jsaf.nodes.SourceElement]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getDecl:kr.ac.kaist.jsaf.nodes.SourceElement) = 
      new kr.ac.kaist.jsaf.nodes.AmbModElt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getDecl).asInstanceOf[kr.ac.kaist.jsaf.nodes.SourceElement])
}
object SAmbVarDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AmbVarDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getTy()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id, getTy:Option[kr.ac.kaist.jsaf.nodes.Type]) = 
      new kr.ac.kaist.jsaf.nodes.AmbVarDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getTy).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Type]])
}
object SAnonymousFnName {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AnonymousFnName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.AnonymousFnName(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SAnyT {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AnyT) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.AnyT(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SArrayExpr {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ArrayExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getElements()).asInstanceOf[List[Option[kr.ac.kaist.jsaf.nodes.Expr]]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getElements:List[Option[kr.ac.kaist.jsaf.nodes.Expr]]) = 
      new kr.ac.kaist.jsaf.nodes.ArrayExpr(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getElements).asInstanceOf[_root_.java.util.List[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Expr]]])
}
object SArrayNumberExpr {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ArrayNumberExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getElements()).asInstanceOf[List[_root_.java.lang.Double]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getElements:List[_root_.java.lang.Double]) = 
      new kr.ac.kaist.jsaf.nodes.ArrayNumberExpr(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getElements).asInstanceOf[_root_.java.util.List[_root_.java.lang.Double]])
}
object SArrayType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ArrayType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getTyp:kr.ac.kaist.jsaf.nodes.Type) = 
      new kr.ac.kaist.jsaf.nodes.ArrayType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type])
}
object SAssignOpApp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.AssignOpApp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], scalaify(node.getOp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op], scalaify(node.getRight()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.LHS, getOp:kr.ac.kaist.jsaf.nodes.Op, getRight:kr.ac.kaist.jsaf.nodes.Expr) = 
      new kr.ac.kaist.jsaf.nodes.AssignOpApp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], javaify(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op], javaify(getRight).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
}
object SBlock {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Block) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getStmts()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]], scalaify(node.isInternal()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getStmts:List[kr.ac.kaist.jsaf.nodes.Stmt], isInternal:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.Block(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getStmts).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Stmt]], javaify(isInternal).asInstanceOf[Boolean])
}
object SBool {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Bool) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.isBool()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, isBool:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.Bool(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(isBool).asInstanceOf[Boolean])
}
object SBoolT {
   def unapply(node:kr.ac.kaist.jsaf.nodes.BoolT) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.BoolT(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SBracket {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Bracket) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getObj()).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], scalaify(node.getIndex()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getObj:kr.ac.kaist.jsaf.nodes.LHS, getIndex:kr.ac.kaist.jsaf.nodes.Expr) = 
      new kr.ac.kaist.jsaf.nodes.Bracket(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], javaify(getIndex).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
}
object SBreak {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Break) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getTarget()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Label]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getTarget:Option[kr.ac.kaist.jsaf.nodes.Label]) = 
      new kr.ac.kaist.jsaf.nodes.Break(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getTarget).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Label]])
}
object SCallSig {
   def unapply(node:kr.ac.kaist.jsaf.nodes.CallSig) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getTparams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], scalaify(node.getParams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]], scalaify(node.getTyp()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getTparams:List[kr.ac.kaist.jsaf.nodes.TypeParam], getParams:List[kr.ac.kaist.jsaf.nodes.Param], getTyp:Option[kr.ac.kaist.jsaf.nodes.Type]) = 
      new kr.ac.kaist.jsaf.nodes.CallSig(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getTparams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.TypeParam]], javaify(getParams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Param]], javaify(getTyp).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Type]])
}
object SCase {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Case) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getCond()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getBody()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getCond:kr.ac.kaist.jsaf.nodes.Expr, getBody:List[kr.ac.kaist.jsaf.nodes.Stmt]) = 
      new kr.ac.kaist.jsaf.nodes.Case(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getBody).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Stmt]])
}
object SCatch {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Catch) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getBody()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id, getBody:List[kr.ac.kaist.jsaf.nodes.Stmt]) = 
      new kr.ac.kaist.jsaf.nodes.Catch(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getBody).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Stmt]])
}
object SComment {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Comment) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getComment()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getComment:String) = 
      new kr.ac.kaist.jsaf.nodes.Comment(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getComment).asInstanceOf[String])
}
object SCond {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Cond) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getCond()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getTrueBranch()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getFalseBranch()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getCond:kr.ac.kaist.jsaf.nodes.Expr, getTrueBranch:kr.ac.kaist.jsaf.nodes.Expr, getFalseBranch:kr.ac.kaist.jsaf.nodes.Expr) = 
      new kr.ac.kaist.jsaf.nodes.Cond(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getTrueBranch).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getFalseBranch).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
}
object SConstructSig {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ConstructSig) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getTparams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], scalaify(node.getParams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]], scalaify(node.getTyp()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getTparams:List[kr.ac.kaist.jsaf.nodes.TypeParam], getParams:List[kr.ac.kaist.jsaf.nodes.Param], getTyp:Option[kr.ac.kaist.jsaf.nodes.Type]) = 
      new kr.ac.kaist.jsaf.nodes.ConstructSig(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getTparams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.TypeParam]], javaify(getParams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Param]], javaify(getTyp).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Type]])
}
object SConstructorType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ConstructorType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getTparams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], scalaify(node.getParams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getTparams:List[kr.ac.kaist.jsaf.nodes.TypeParam], getParams:List[kr.ac.kaist.jsaf.nodes.Param], getTyp:kr.ac.kaist.jsaf.nodes.Type) = 
      new kr.ac.kaist.jsaf.nodes.ConstructorType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getTparams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.TypeParam]], javaify(getParams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Param]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type])
}
object SContinue {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Continue) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getTarget()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Label]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getTarget:Option[kr.ac.kaist.jsaf.nodes.Label]) = 
      new kr.ac.kaist.jsaf.nodes.Continue(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getTarget).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Label]])
}
object SDebugger {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Debugger) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.Debugger(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SDoWhile {
   def unapply(node:kr.ac.kaist.jsaf.nodes.DoWhile) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt], scalaify(node.getCond()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getBody:kr.ac.kaist.jsaf.nodes.Stmt, getCond:kr.ac.kaist.jsaf.nodes.Expr) = 
      new kr.ac.kaist.jsaf.nodes.DoWhile(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt], javaify(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
}
object SDot {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Dot) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getObj()).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], scalaify(node.getMember()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getObj:kr.ac.kaist.jsaf.nodes.LHS, getMember:kr.ac.kaist.jsaf.nodes.Id) = 
      new kr.ac.kaist.jsaf.nodes.Dot(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], javaify(getMember).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
}
object SDoubleLiteral {
   def unapply(node:kr.ac.kaist.jsaf.nodes.DoubleLiteral) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getNum()).asInstanceOf[_root_.java.lang.Double]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getText:String, getNum:_root_.java.lang.Double) = 
      new kr.ac.kaist.jsaf.nodes.DoubleLiteral(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getText).asInstanceOf[String], javaify(getNum).asInstanceOf[_root_.java.lang.Double])
}
object SEmptyStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.EmptyStmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.EmptyStmt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SExpr {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Expr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SExprList {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ExprList) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getExprs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Expr]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getExprs:List[kr.ac.kaist.jsaf.nodes.Expr]) = 
      new kr.ac.kaist.jsaf.nodes.ExprList(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getExprs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Expr]])
}
object SExprStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ExprStmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.isInternal()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getExpr:kr.ac.kaist.jsaf.nodes.Expr, isInternal:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.ExprStmt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(isInternal).asInstanceOf[Boolean])
}
object SExprType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ExprType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:String) = 
      new kr.ac.kaist.jsaf.nodes.ExprType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[String])
}
object SExtImpDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ExtImpDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getModule()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id, getModule:String) = 
      new kr.ac.kaist.jsaf.nodes.ExtImpDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getModule).asInstanceOf[String])
}
object SField {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Field) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getProp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getProp:kr.ac.kaist.jsaf.nodes.Property, getExpr:kr.ac.kaist.jsaf.nodes.Expr) = 
      new kr.ac.kaist.jsaf.nodes.Field(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
}
object SFor {
   def unapply(node:kr.ac.kaist.jsaf.nodes.For) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getInit()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], scalaify(node.getCond()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], scalaify(node.getAction()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getInit:Option[kr.ac.kaist.jsaf.nodes.Expr], getCond:Option[kr.ac.kaist.jsaf.nodes.Expr], getAction:Option[kr.ac.kaist.jsaf.nodes.Expr], getBody:kr.ac.kaist.jsaf.nodes.Stmt) = 
      new kr.ac.kaist.jsaf.nodes.For(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getInit).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Expr]], javaify(getCond).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Expr]], javaify(getAction).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Expr]], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
}
object SForIn {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ForIn) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.LHS, getExpr:kr.ac.kaist.jsaf.nodes.Expr, getBody:kr.ac.kaist.jsaf.nodes.Stmt) = 
      new kr.ac.kaist.jsaf.nodes.ForIn(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
}
object SForVar {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ForVar) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getVars()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]], scalaify(node.getCond()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], scalaify(node.getAction()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getVars:List[kr.ac.kaist.jsaf.nodes.VarDecl], getCond:Option[kr.ac.kaist.jsaf.nodes.Expr], getAction:Option[kr.ac.kaist.jsaf.nodes.Expr], getBody:kr.ac.kaist.jsaf.nodes.Stmt) = 
      new kr.ac.kaist.jsaf.nodes.ForVar(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getVars).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.VarDecl]], javaify(getCond).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Expr]], javaify(getAction).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Expr]], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
}
object SForVarIn {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ForVarIn) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getVar()).asInstanceOf[kr.ac.kaist.jsaf.nodes.VarDecl], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getVar:kr.ac.kaist.jsaf.nodes.VarDecl, getExpr:kr.ac.kaist.jsaf.nodes.Expr, getBody:kr.ac.kaist.jsaf.nodes.Stmt) = 
      new kr.ac.kaist.jsaf.nodes.ForVarIn(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getVar).asInstanceOf[kr.ac.kaist.jsaf.nodes.VarDecl], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
}
object SFunApp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.FunApp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getFun()).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], scalaify(node.getArgs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Expr]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getFun:kr.ac.kaist.jsaf.nodes.LHS, getArgs:List[kr.ac.kaist.jsaf.nodes.Expr]) = 
      new kr.ac.kaist.jsaf.nodes.FunApp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getFun).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], javaify(getArgs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Expr]])
}
object SFunDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.FunDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getFtn()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional], scalaify(node.isStrict()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getFtn:kr.ac.kaist.jsaf.nodes.Functional, isStrict:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.FunDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional], javaify(isStrict).asInstanceOf[Boolean])
}
object SFunExpr {
   def unapply(node:kr.ac.kaist.jsaf.nodes.FunExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getFtn()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getFtn:kr.ac.kaist.jsaf.nodes.Functional) = 
      new kr.ac.kaist.jsaf.nodes.FunExpr(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional])
}
object SFunctionType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.FunctionType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getTparams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], scalaify(node.getParams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getTparams:List[kr.ac.kaist.jsaf.nodes.TypeParam], getParams:List[kr.ac.kaist.jsaf.nodes.Param], getTyp:kr.ac.kaist.jsaf.nodes.Type) = 
      new kr.ac.kaist.jsaf.nodes.FunctionType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getTparams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.TypeParam]], javaify(getParams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Param]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type])
}
object SFunctional {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Functional) = 
      Some((scalaify(node.getFds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.FunDecl]], scalaify(node.getVds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]], scalaify(node.getStmts()).asInstanceOf[kr.ac.kaist.jsaf.nodes.SourceElements], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getParams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Id]]))
   def apply(getFds:List[kr.ac.kaist.jsaf.nodes.FunDecl], getVds:List[kr.ac.kaist.jsaf.nodes.VarDecl], getStmts:kr.ac.kaist.jsaf.nodes.SourceElements, getName:kr.ac.kaist.jsaf.nodes.Id, getParams:List[kr.ac.kaist.jsaf.nodes.Id]) = 
      new kr.ac.kaist.jsaf.nodes.Functional(javaify(getFds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.FunDecl]], javaify(getVds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.VarDecl]], javaify(getStmts).asInstanceOf[kr.ac.kaist.jsaf.nodes.SourceElements], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getParams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Id]])
}
object SGetProp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.GetProp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getProp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], scalaify(node.getFtn()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getProp:kr.ac.kaist.jsaf.nodes.Property, getFtn:kr.ac.kaist.jsaf.nodes.Functional) = 
      new kr.ac.kaist.jsaf.nodes.GetProp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], javaify(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional])
}
object SId {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Id) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getUniqueName()).asInstanceOf[Option[String]], scalaify(node.isWith()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getText:String, getUniqueName:Option[String], isWith:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.Id(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getText).asInstanceOf[String], javaify(getUniqueName).asInstanceOf[edu.rice.cs.plt.tuple.Option[String]], javaify(isWith).asInstanceOf[Boolean])
}
object SIdOrOp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IdOrOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getText()).asInstanceOf[String]))
}
object SIdOrOpOrAnonymousName {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IdOrOpOrAnonymousName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SIf {
   def unapply(node:kr.ac.kaist.jsaf.nodes.If) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getCond()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getTrueBranch()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt], scalaify(node.getFalseBranch()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Stmt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getCond:kr.ac.kaist.jsaf.nodes.Expr, getTrueBranch:kr.ac.kaist.jsaf.nodes.Stmt, getFalseBranch:Option[kr.ac.kaist.jsaf.nodes.Stmt]) = 
      new kr.ac.kaist.jsaf.nodes.If(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getTrueBranch).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt], javaify(getFalseBranch).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Stmt]])
}
object SIndexSig {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IndexSig) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getAnnot()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type], scalaify(node.isNum()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id, getAnnot:kr.ac.kaist.jsaf.nodes.Type, isNum:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.IndexSig(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getAnnot).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type], javaify(isNum).asInstanceOf[Boolean])
}
object SInfixOpApp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.InfixOpApp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getLeft()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getOp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op], scalaify(node.getRight()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getLeft:kr.ac.kaist.jsaf.nodes.Expr, getOp:kr.ac.kaist.jsaf.nodes.Op, getRight:kr.ac.kaist.jsaf.nodes.Expr) = 
      new kr.ac.kaist.jsaf.nodes.InfixOpApp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getLeft).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op], javaify(getRight).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
}
object SIntLiteral {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IntLiteral) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getIntVal()).asInstanceOf[_root_.java.math.BigInteger], scalaify(node.getRadix()).asInstanceOf[Int]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getIntVal:_root_.java.math.BigInteger, getRadix:Int) = 
      new kr.ac.kaist.jsaf.nodes.IntLiteral(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getIntVal).asInstanceOf[_root_.java.math.BigInteger], javaify(getRadix).asInstanceOf[Int])
}
object SIntfDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IntfDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getTps()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], scalaify(node.getExt()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeRef]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ObjectType]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id, getTps:List[kr.ac.kaist.jsaf.nodes.TypeParam], getExt:List[kr.ac.kaist.jsaf.nodes.TypeRef], getTyp:kr.ac.kaist.jsaf.nodes.ObjectType) = 
      new kr.ac.kaist.jsaf.nodes.IntfDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getTps).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.TypeParam]], javaify(getExt).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.TypeRef]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.ObjectType])
}
object SLHS {
   def unapply(node:kr.ac.kaist.jsaf.nodes.LHS) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SLabel {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Label) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id) = 
      new kr.ac.kaist.jsaf.nodes.Label(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
}
object SLabelStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.LabelStmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getLabel()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Label], scalaify(node.getStmt()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getLabel:kr.ac.kaist.jsaf.nodes.Label, getStmt:kr.ac.kaist.jsaf.nodes.Stmt) = 
      new kr.ac.kaist.jsaf.nodes.LabelStmt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getLabel).asInstanceOf[kr.ac.kaist.jsaf.nodes.Label], javaify(getStmt).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
}
object SLiteral {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Literal) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SMember {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Member) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getProp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property]))
}
object SMethodSig {
   def unapply(node:kr.ac.kaist.jsaf.nodes.MethodSig) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getProp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], scalaify(node.isOptional()).asInstanceOf[Boolean], scalaify(node.getSig()).asInstanceOf[kr.ac.kaist.jsaf.nodes.CallSig]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getProp:kr.ac.kaist.jsaf.nodes.Property, isOptional:Boolean, getSig:kr.ac.kaist.jsaf.nodes.CallSig) = 
      new kr.ac.kaist.jsaf.nodes.MethodSig(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], javaify(isOptional).asInstanceOf[Boolean], javaify(getSig).asInstanceOf[kr.ac.kaist.jsaf.nodes.CallSig])
}
object SModDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.TopLevel]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.Id, getBody:kr.ac.kaist.jsaf.nodes.TopLevel) = 
      new kr.ac.kaist.jsaf.nodes.ModDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.TopLevel])
}
object SModExpAlias {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpAlias) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getAlias()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.Id, getAlias:kr.ac.kaist.jsaf.nodes.Path) = 
      new kr.ac.kaist.jsaf.nodes.ModExpAlias(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getAlias).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
}
object SModExpAssignment {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpAssignment) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id) = 
      new kr.ac.kaist.jsaf.nodes.ModExpAssignment(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
}
object SModExpFunDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpFunDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getFd()).asInstanceOf[kr.ac.kaist.jsaf.nodes.FunDecl]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getFd:kr.ac.kaist.jsaf.nodes.FunDecl) = 
      new kr.ac.kaist.jsaf.nodes.ModExpFunDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getFd).asInstanceOf[kr.ac.kaist.jsaf.nodes.FunDecl])
}
object SModExpGetter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpGetter) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getFd()).asInstanceOf[kr.ac.kaist.jsaf.nodes.GetProp]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getFd:kr.ac.kaist.jsaf.nodes.GetProp) = 
      new kr.ac.kaist.jsaf.nodes.ModExpGetter(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getFd).asInstanceOf[kr.ac.kaist.jsaf.nodes.GetProp])
}
object SModExpName {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.Path) = 
      new kr.ac.kaist.jsaf.nodes.ModExpName(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
}
object SModExpSetter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpSetter) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getFd()).asInstanceOf[kr.ac.kaist.jsaf.nodes.SetProp]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getFd:kr.ac.kaist.jsaf.nodes.SetProp) = 
      new kr.ac.kaist.jsaf.nodes.ModExpSetter(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getFd).asInstanceOf[kr.ac.kaist.jsaf.nodes.SetProp])
}
object SModExpSpecifier {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpSpecifier) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SModExpSpecifiers {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpSpecifiers) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getNames()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.ModExpSpecifier]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getNames:List[kr.ac.kaist.jsaf.nodes.ModExpSpecifier]) = 
      new kr.ac.kaist.jsaf.nodes.ModExpSpecifiers(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getNames).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.ModExpSpecifier]])
}
object SModExpStar {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpStar) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.ModExpStar(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SModExpStarFromPath {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpStarFromPath) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getModule()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getModule:kr.ac.kaist.jsaf.nodes.Path) = 
      new kr.ac.kaist.jsaf.nodes.ModExpStarFromPath(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getModule).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
}
object SModExpVarStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExpVarStmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getVds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getVds:List[kr.ac.kaist.jsaf.nodes.VarDecl]) = 
      new kr.ac.kaist.jsaf.nodes.ModExpVarStmt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getVds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.VarDecl]])
}
object SModExport {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModExport) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SModImpAlias {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModImpAlias) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getAlias()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.Id, getAlias:kr.ac.kaist.jsaf.nodes.Id) = 
      new kr.ac.kaist.jsaf.nodes.ModImpAlias(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getAlias).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
}
object SModImpAliasClause {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModImpAliasClause) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path], scalaify(node.getAlias()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.Path, getAlias:kr.ac.kaist.jsaf.nodes.Id) = 
      new kr.ac.kaist.jsaf.nodes.ModImpAliasClause(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path], javaify(getAlias).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
}
object SModImpDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModImpDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getImports()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.ModImport]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getImports:List[kr.ac.kaist.jsaf.nodes.ModImport]) = 
      new kr.ac.kaist.jsaf.nodes.ModImpDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getImports).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.ModImport]])
}
object SModImpName {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModImpName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.Id) = 
      new kr.ac.kaist.jsaf.nodes.ModImpName(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
}
object SModImpSpecifier {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModImpSpecifier) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SModImpSpecifierSet {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModImpSpecifierSet) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getImports()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.ModImpSpecifier]], scalaify(node.getModule()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getImports:List[kr.ac.kaist.jsaf.nodes.ModImpSpecifier], getModule:kr.ac.kaist.jsaf.nodes.Path) = 
      new kr.ac.kaist.jsaf.nodes.ModImpSpecifierSet(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getImports).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.ModImpSpecifier]], javaify(getModule).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
}
object SModImport {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ModImport) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SModifier {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Modifier) = 
      Some(())
}
object SModule {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Module) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SName {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Name) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SNew {
   def unapply(node:kr.ac.kaist.jsaf.nodes.New) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.LHS) = 
      new kr.ac.kaist.jsaf.nodes.New(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS])
}
object SNoOp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.NoOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getDesc()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getDesc:String) = 
      new kr.ac.kaist.jsaf.nodes.NoOp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getDesc).asInstanceOf[String])
}
object SNull {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Null) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.Null(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SNumberLiteral {
   def unapply(node:kr.ac.kaist.jsaf.nodes.NumberLiteral) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SNumberT {
   def unapply(node:kr.ac.kaist.jsaf.nodes.NumberT) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.NumberT(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SObjectExpr {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ObjectExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getMembers()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Member]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getMembers:List[kr.ac.kaist.jsaf.nodes.Member]) = 
      new kr.ac.kaist.jsaf.nodes.ObjectExpr(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getMembers).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Member]])
}
object SObjectType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ObjectType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getMembers()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeMember]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getMembers:List[kr.ac.kaist.jsaf.nodes.TypeMember]) = 
      new kr.ac.kaist.jsaf.nodes.ObjectType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getMembers).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.TypeMember]])
}
object SOp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Op) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getText()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getText:String) = 
      new kr.ac.kaist.jsaf.nodes.Op(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getText).asInstanceOf[String])
}
object SParam {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Param) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getMod()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Modifier]], scalaify(node.getTyp()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]], scalaify(node.getDefaultExpr()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], scalaify(node.isOptional()).asInstanceOf[Boolean], scalaify(node.isRest()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.Id, getMod:Option[kr.ac.kaist.jsaf.nodes.Modifier], getTyp:Option[kr.ac.kaist.jsaf.nodes.Type], getDefaultExpr:Option[kr.ac.kaist.jsaf.nodes.Expr], isOptional:Boolean, isRest:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.Param(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getMod).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Modifier]], javaify(getTyp).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Type]], javaify(getDefaultExpr).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Expr]], javaify(isOptional).asInstanceOf[Boolean], javaify(isRest).asInstanceOf[Boolean])
}
object SParenthesized {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Parenthesized) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getExpr:kr.ac.kaist.jsaf.nodes.Expr) = 
      new kr.ac.kaist.jsaf.nodes.Parenthesized(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
}
object SPath {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Path) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getNames()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Id]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getNames:List[kr.ac.kaist.jsaf.nodes.Id]) = 
      new kr.ac.kaist.jsaf.nodes.Path(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getNames).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Id]])
}
object SPredefType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.PredefType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SPrefixOpApp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.PrefixOpApp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getOp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op], scalaify(node.getRight()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getOp:kr.ac.kaist.jsaf.nodes.Op, getRight:kr.ac.kaist.jsaf.nodes.Expr) = 
      new kr.ac.kaist.jsaf.nodes.PrefixOpApp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op], javaify(getRight).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
}
object SPrivateMod {
   def unapply(node:kr.ac.kaist.jsaf.nodes.PrivateMod) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.PrivateMod
}
object SProgram {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Program) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.TopLevel]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getBody:kr.ac.kaist.jsaf.nodes.TopLevel) = 
      new kr.ac.kaist.jsaf.nodes.Program(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.TopLevel])
}
object SPropId {
   def unapply(node:kr.ac.kaist.jsaf.nodes.PropId) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id) = 
      new kr.ac.kaist.jsaf.nodes.PropId(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
}
object SPropNum {
   def unapply(node:kr.ac.kaist.jsaf.nodes.PropNum) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getNum()).asInstanceOf[kr.ac.kaist.jsaf.nodes.NumberLiteral]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getNum:kr.ac.kaist.jsaf.nodes.NumberLiteral) = 
      new kr.ac.kaist.jsaf.nodes.PropNum(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getNum).asInstanceOf[kr.ac.kaist.jsaf.nodes.NumberLiteral])
}
object SPropStr {
   def unapply(node:kr.ac.kaist.jsaf.nodes.PropStr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.PropStr(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getStr).asInstanceOf[String])
}
object SProperty {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Property) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SPropertySig {
   def unapply(node:kr.ac.kaist.jsaf.nodes.PropertySig) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getProp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], scalaify(node.isOptional()).asInstanceOf[Boolean], scalaify(node.getTyp()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getProp:kr.ac.kaist.jsaf.nodes.Property, isOptional:Boolean, getTyp:Option[kr.ac.kaist.jsaf.nodes.Type]) = 
      new kr.ac.kaist.jsaf.nodes.PropertySig(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], javaify(isOptional).asInstanceOf[Boolean], javaify(getTyp).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Type]])
}
object SPublicMod {
   def unapply(node:kr.ac.kaist.jsaf.nodes.PublicMod) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.PublicMod
}
object SRegularExpression {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegularExpression) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getBody()).asInstanceOf[String], scalaify(node.getFlag()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getBody:String, getFlag:String) = 
      new kr.ac.kaist.jsaf.nodes.RegularExpression(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getBody).asInstanceOf[String], javaify(getFlag).asInstanceOf[String])
}
object SReturn {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Return) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getExpr()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getExpr:Option[kr.ac.kaist.jsaf.nodes.Expr]) = 
      new kr.ac.kaist.jsaf.nodes.Return(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getExpr).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Expr]])
}
object SScopeBody {
   def unapply(node:kr.ac.kaist.jsaf.nodes.ScopeBody) = 
      Some((scalaify(node.getFds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.FunDecl]], scalaify(node.getVds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]]))
}
object SSetProp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.SetProp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getProp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], scalaify(node.getFtn()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getProp:kr.ac.kaist.jsaf.nodes.Property, getFtn:kr.ac.kaist.jsaf.nodes.Functional) = 
      new kr.ac.kaist.jsaf.nodes.SetProp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], javaify(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional])
}
object SSourceElement {
   def unapply(node:kr.ac.kaist.jsaf.nodes.SourceElement) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SSourceElements {
   def unapply(node:kr.ac.kaist.jsaf.nodes.SourceElements) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getBody()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.SourceElement]], scalaify(node.isStrict()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getBody:List[kr.ac.kaist.jsaf.nodes.SourceElement], isStrict:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.SourceElements(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getBody).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.SourceElement]], javaify(isStrict).asInstanceOf[Boolean])
}
object SStaticMod {
   def unapply(node:kr.ac.kaist.jsaf.nodes.StaticMod) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.StaticMod
}
object SStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Stmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object SStmtUnit {
   def unapply(node:kr.ac.kaist.jsaf.nodes.StmtUnit) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getStmts()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getStmts:List[kr.ac.kaist.jsaf.nodes.Stmt]) = 
      new kr.ac.kaist.jsaf.nodes.StmtUnit(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getStmts).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Stmt]])
}
object SStringLiteral {
   def unapply(node:kr.ac.kaist.jsaf.nodes.StringLiteral) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getQuote()).asInstanceOf[String], scalaify(node.getEscaped()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getQuote:String, getEscaped:String) = 
      new kr.ac.kaist.jsaf.nodes.StringLiteral(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getQuote).asInstanceOf[String], javaify(getEscaped).asInstanceOf[String])
}
object SStringT {
   def unapply(node:kr.ac.kaist.jsaf.nodes.StringT) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.StringT(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SSwitch {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Switch) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getCond()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getFrontCases()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Case]], scalaify(node.getDef()).asInstanceOf[Option[List[kr.ac.kaist.jsaf.nodes.Stmt]]], scalaify(node.getBackCases()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Case]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getCond:kr.ac.kaist.jsaf.nodes.Expr, getFrontCases:List[kr.ac.kaist.jsaf.nodes.Case], getDef:Option[List[kr.ac.kaist.jsaf.nodes.Stmt]], getBackCases:List[kr.ac.kaist.jsaf.nodes.Case]) = 
      new kr.ac.kaist.jsaf.nodes.Switch(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getFrontCases).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Case]], javaify(getDef).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Stmt]]], javaify(getBackCases).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Case]])
}
object STSImpDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.TSImpDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getPath()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id, getPath:kr.ac.kaist.jsaf.nodes.Path) = 
      new kr.ac.kaist.jsaf.nodes.TSImpDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getPath).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
}
object SThis {
   def unapply(node:kr.ac.kaist.jsaf.nodes.This) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.This(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SThrow {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Throw) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getExpr:kr.ac.kaist.jsaf.nodes.Expr) = 
      new kr.ac.kaist.jsaf.nodes.Throw(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
}
object STopLevel {
   def unapply(node:kr.ac.kaist.jsaf.nodes.TopLevel) = 
      Some((scalaify(node.getFds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.FunDecl]], scalaify(node.getVds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]], scalaify(node.getStmts()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.SourceElements]]))
   def apply(getFds:List[kr.ac.kaist.jsaf.nodes.FunDecl], getVds:List[kr.ac.kaist.jsaf.nodes.VarDecl], getStmts:List[kr.ac.kaist.jsaf.nodes.SourceElements]) = 
      new kr.ac.kaist.jsaf.nodes.TopLevel(javaify(getFds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.FunDecl]], javaify(getVds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.VarDecl]], javaify(getStmts).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.SourceElements]])
}
object STry {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Try) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getBody()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]], scalaify(node.getCatchBlock()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Catch]], scalaify(node.getFin()).asInstanceOf[Option[List[kr.ac.kaist.jsaf.nodes.Stmt]]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getBody:List[kr.ac.kaist.jsaf.nodes.Stmt], getCatchBlock:Option[kr.ac.kaist.jsaf.nodes.Catch], getFin:Option[List[kr.ac.kaist.jsaf.nodes.Stmt]]) = 
      new kr.ac.kaist.jsaf.nodes.Try(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getBody).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Stmt]], javaify(getCatchBlock).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Catch]], javaify(getFin).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Stmt]]])
}
object SType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.Type) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object STypeLiteral {
   def unapply(node:kr.ac.kaist.jsaf.nodes.TypeLiteral) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object STypeMember {
   def unapply(node:kr.ac.kaist.jsaf.nodes.TypeMember) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
}
object STypeName {
   def unapply(node:kr.ac.kaist.jsaf.nodes.TypeName) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getNames()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Id]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getText:String, getNames:List[kr.ac.kaist.jsaf.nodes.Id]) = 
      new kr.ac.kaist.jsaf.nodes.TypeName(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getText).asInstanceOf[String], javaify(getNames).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Id]])
}
object STypeParam {
   def unapply(node:kr.ac.kaist.jsaf.nodes.TypeParam) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getExt()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.Id, getExt:Option[kr.ac.kaist.jsaf.nodes.Type]) = 
      new kr.ac.kaist.jsaf.nodes.TypeParam(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getExt).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Type]])
}
object STypeQuery {
   def unapply(node:kr.ac.kaist.jsaf.nodes.TypeQuery) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getPath()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getPath:kr.ac.kaist.jsaf.nodes.Path) = 
      new kr.ac.kaist.jsaf.nodes.TypeQuery(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getPath).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
}
object STypeRef {
   def unapply(node:kr.ac.kaist.jsaf.nodes.TypeRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.TypeName], scalaify(node.getArgs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Type]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.TypeName, getArgs:List[kr.ac.kaist.jsaf.nodes.Type]) = 
      new kr.ac.kaist.jsaf.nodes.TypeRef(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.TypeName], javaify(getArgs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.Type]])
}
object SUnaryAssignOpApp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.UnaryAssignOpApp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], scalaify(node.getOp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.LHS, getOp:kr.ac.kaist.jsaf.nodes.Op) = 
      new kr.ac.kaist.jsaf.nodes.UnaryAssignOpApp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], javaify(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op])
}
object SVarDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.VarDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], scalaify(node.getExpr()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], scalaify(node.isStrict()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getName:kr.ac.kaist.jsaf.nodes.Id, getExpr:Option[kr.ac.kaist.jsaf.nodes.Expr], isStrict:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.VarDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], javaify(getExpr).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.Expr]], javaify(isStrict).asInstanceOf[Boolean])
}
object SVarRef {
   def unapply(node:kr.ac.kaist.jsaf.nodes.VarRef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getId:kr.ac.kaist.jsaf.nodes.Id) = 
      new kr.ac.kaist.jsaf.nodes.VarRef(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
}
object SVarStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.VarStmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getVds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getVds:List[kr.ac.kaist.jsaf.nodes.VarDecl]) = 
      new kr.ac.kaist.jsaf.nodes.VarStmt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getVds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.VarDecl]])
}
object SVoidT {
   def unapply(node:kr.ac.kaist.jsaf.nodes.VoidT) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.VoidT(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
}
object SWhile {
   def unapply(node:kr.ac.kaist.jsaf.nodes.While) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getCond()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getCond:kr.ac.kaist.jsaf.nodes.Expr, getBody:kr.ac.kaist.jsaf.nodes.Stmt) = 
      new kr.ac.kaist.jsaf.nodes.While(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
}
object SWith {
   def unapply(node:kr.ac.kaist.jsaf.nodes.With) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], scalaify(node.getStmt()).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.ASTSpanInfo, getExpr:kr.ac.kaist.jsaf.nodes.Expr, getStmt:kr.ac.kaist.jsaf.nodes.Stmt) = 
      new kr.ac.kaist.jsaf.nodes.With(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], javaify(getStmt).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
}

trait Walker {
   def apply(node:Any):Any = walk(node)
   def walk(node:Any):Any = {
       node match {
         case SASTSpanInfo(getSpan, getComment) =>
             SASTSpanInfo(walk(getSpan).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.Span], walk(getComment).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Comment]])
         case SAmbClsDecl(getInfo, getId, getTps, getExt, getImp, getElts) =>
             SAmbClsDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getTps).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], walk(getExt).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.TypeRef]], walk(getImp).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeRef]], walk(getElts).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.AmbClsElt]])
         case SAmbCnstDecl(getInfo, getPs) =>
             SAmbCnstDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getPs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]])
         case SAmbEnumDecl(getInfo, getId, getMem) =>
             SAmbEnumDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getMem).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.AmbEnumMem]])
         case SAmbEnumMem(getInfo, getProp, getNum) =>
             SAmbEnumMem(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], walk(getNum).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.NumberLiteral]])
         case SAmbExtModDecl(getInfo, getName, getMem) =>
             SAmbExtModDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[String], walk(getMem).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.AmbExtModElt]])
         case SAmbExtModElt(getInfo, getDecl) =>
             SAmbExtModElt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getDecl).asInstanceOf[kr.ac.kaist.jsaf.nodes.SourceElement])
         case SAmbFunDecl(getInfo, getId, getSig) =>
             SAmbFunDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getSig).asInstanceOf[kr.ac.kaist.jsaf.nodes.CallSig])
         case SAmbIndDecl(getInfo, getInd) =>
             SAmbIndDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getInd).asInstanceOf[kr.ac.kaist.jsaf.nodes.IndexSig])
         case SAmbMemDecl(getInfo, getMods, getProp, getTyp) =>
             SAmbMemDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getMods).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Modifier]], walk(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], walk(getTyp).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]])
         case SAmbModDecl(getInfo, getPath, getMem) =>
             SAmbModDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getPath).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path], walk(getMem).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.AmbModElt]])
         case SAmbModElt(getInfo, getDecl) =>
             SAmbModElt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getDecl).asInstanceOf[kr.ac.kaist.jsaf.nodes.SourceElement])
         case SAmbVarDecl(getInfo, getId, getTy) =>
             SAmbVarDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getTy).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]])
         case SAnonymousFnName(getInfo) =>
             SAnonymousFnName(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SAnyT(getInfo) =>
             SAnyT(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SArrayExpr(getInfo, getElements) =>
             SArrayExpr(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getElements).asInstanceOf[List[Option[kr.ac.kaist.jsaf.nodes.Expr]]])
         case SArrayNumberExpr(getInfo, getElements) =>
             SArrayNumberExpr(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getElements).asInstanceOf[List[_root_.java.lang.Double]])
         case SArrayType(getInfo, getTyp) =>
             SArrayType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type])
         case SAssignOpApp(getInfo, getLhs, getOp, getRight) =>
             SAssignOpApp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], walk(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op], walk(getRight).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
         case SBlock(getInfo, getStmts, isInternal) =>
             SBlock(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getStmts).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]], walk(isInternal).asInstanceOf[Boolean])
         case SBool(getInfo, isBool) =>
             SBool(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(isBool).asInstanceOf[Boolean])
         case SBoolT(getInfo) =>
             SBoolT(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SBracket(getInfo, getObj, getIndex) =>
             SBracket(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], walk(getIndex).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
         case SBreak(getInfo, getTarget) =>
             SBreak(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getTarget).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Label]])
         case SCallSig(getInfo, getTparams, getParams, getTyp) =>
             SCallSig(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getTparams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], walk(getParams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]], walk(getTyp).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]])
         case SCase(getInfo, getCond, getBody) =>
             SCase(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getBody).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]])
         case SCatch(getInfo, getId, getBody) =>
             SCatch(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getBody).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]])
         case SComment(getInfo, getComment) =>
             SComment(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getComment).asInstanceOf[String])
         case SCond(getInfo, getCond, getTrueBranch, getFalseBranch) =>
             SCond(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getTrueBranch).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getFalseBranch).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
         case SConstructSig(getInfo, getTparams, getParams, getTyp) =>
             SConstructSig(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getTparams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], walk(getParams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]], walk(getTyp).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]])
         case SConstructorType(getInfo, getTparams, getParams, getTyp) =>
             SConstructorType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getTparams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], walk(getParams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type])
         case SContinue(getInfo, getTarget) =>
             SContinue(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getTarget).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Label]])
         case SDebugger(getInfo) =>
             SDebugger(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SDoWhile(getInfo, getBody, getCond) =>
             SDoWhile(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt], walk(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
         case SDot(getInfo, getObj, getMember) =>
             SDot(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], walk(getMember).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
         case SDoubleLiteral(getInfo, getText, getNum) =>
             SDoubleLiteral(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getText).asInstanceOf[String], walk(getNum).asInstanceOf[_root_.java.lang.Double])
         case SEmptyStmt(getInfo) =>
             SEmptyStmt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SExprList(getInfo, getExprs) =>
             SExprList(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getExprs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Expr]])
         case SExprStmt(getInfo, getExpr, isInternal) =>
             SExprStmt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(isInternal).asInstanceOf[Boolean])
         case SExprType(getInfo, getName) =>
             SExprType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[String])
         case SExtImpDecl(getInfo, getId, getModule) =>
             SExtImpDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getModule).asInstanceOf[String])
         case SField(getInfo, getProp, getExpr) =>
             SField(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
         case SFor(getInfo, getInit, getCond, getAction, getBody) =>
             SFor(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getInit).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], walk(getCond).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], walk(getAction).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
         case SForIn(getInfo, getLhs, getExpr, getBody) =>
             SForIn(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
         case SForVar(getInfo, getVars, getCond, getAction, getBody) =>
             SForVar(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getVars).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]], walk(getCond).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], walk(getAction).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
         case SForVarIn(getInfo, getVar, getExpr, getBody) =>
             SForVarIn(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getVar).asInstanceOf[kr.ac.kaist.jsaf.nodes.VarDecl], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
         case SFunApp(getInfo, getFun, getArgs) =>
             SFunApp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getFun).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], walk(getArgs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Expr]])
         case SFunDecl(getInfo, getFtn, isStrict) =>
             SFunDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional], walk(isStrict).asInstanceOf[Boolean])
         case SFunExpr(getInfo, getFtn) =>
             SFunExpr(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional])
         case SFunctionType(getInfo, getTparams, getParams, getTyp) =>
             SFunctionType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getTparams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], walk(getParams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Param]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type])
         case SFunctional(getFds, getVds, getStmts, getName, getParams) =>
             SFunctional(walk(getFds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.FunDecl]], walk(getVds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]], walk(getStmts).asInstanceOf[kr.ac.kaist.jsaf.nodes.SourceElements], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getParams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Id]])
         case SGetProp(getInfo, getProp, getFtn) =>
             SGetProp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], walk(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional])
         case SId(getInfo, getText, getUniqueName, isWith) =>
             SId(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getText).asInstanceOf[String], walk(getUniqueName).asInstanceOf[Option[String]], walk(isWith).asInstanceOf[Boolean])
         case SIf(getInfo, getCond, getTrueBranch, getFalseBranch) =>
             SIf(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getTrueBranch).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt], walk(getFalseBranch).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Stmt]])
         case SIndexSig(getInfo, getId, getAnnot, isNum) =>
             SIndexSig(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getAnnot).asInstanceOf[kr.ac.kaist.jsaf.nodes.Type], walk(isNum).asInstanceOf[Boolean])
         case SInfixOpApp(getInfo, getLeft, getOp, getRight) =>
             SInfixOpApp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getLeft).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op], walk(getRight).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
         case SIntLiteral(getInfo, getIntVal, getRadix) =>
             SIntLiteral(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getIntVal).asInstanceOf[_root_.java.math.BigInteger], walk(getRadix).asInstanceOf[Int])
         case SIntfDecl(getInfo, getId, getTps, getExt, getTyp) =>
             SIntfDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getTps).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeParam]], walk(getExt).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeRef]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.ObjectType])
         case SLabel(getInfo, getId) =>
             SLabel(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
         case SLabelStmt(getInfo, getLabel, getStmt) =>
             SLabelStmt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getLabel).asInstanceOf[kr.ac.kaist.jsaf.nodes.Label], walk(getStmt).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
         case SMethodSig(getInfo, getProp, isOptional, getSig) =>
             SMethodSig(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], walk(isOptional).asInstanceOf[Boolean], walk(getSig).asInstanceOf[kr.ac.kaist.jsaf.nodes.CallSig])
         case SModDecl(getInfo, getName, getBody) =>
             SModDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.TopLevel])
         case SModExpAlias(getInfo, getName, getAlias) =>
             SModExpAlias(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getAlias).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
         case SModExpAssignment(getInfo, getId) =>
             SModExpAssignment(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
         case SModExpFunDecl(getInfo, getFd) =>
             SModExpFunDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getFd).asInstanceOf[kr.ac.kaist.jsaf.nodes.FunDecl])
         case SModExpGetter(getInfo, getFd) =>
             SModExpGetter(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getFd).asInstanceOf[kr.ac.kaist.jsaf.nodes.GetProp])
         case SModExpName(getInfo, getName) =>
             SModExpName(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
         case SModExpSetter(getInfo, getFd) =>
             SModExpSetter(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getFd).asInstanceOf[kr.ac.kaist.jsaf.nodes.SetProp])
         case SModExpSpecifiers(getInfo, getNames) =>
             SModExpSpecifiers(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getNames).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.ModExpSpecifier]])
         case SModExpStar(getInfo) =>
             SModExpStar(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SModExpStarFromPath(getInfo, getModule) =>
             SModExpStarFromPath(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getModule).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
         case SModExpVarStmt(getInfo, getVds) =>
             SModExpVarStmt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getVds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]])
         case SModImpAlias(getInfo, getName, getAlias) =>
             SModImpAlias(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getAlias).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
         case SModImpAliasClause(getInfo, getName, getAlias) =>
             SModImpAliasClause(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path], walk(getAlias).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
         case SModImpDecl(getInfo, getImports) =>
             SModImpDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getImports).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.ModImport]])
         case SModImpName(getInfo, getName) =>
             SModImpName(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
         case SModImpSpecifierSet(getInfo, getImports, getModule) =>
             SModImpSpecifierSet(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getImports).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.ModImpSpecifier]], walk(getModule).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
         case SNew(getInfo, getLhs) =>
             SNew(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS])
         case SNoOp(getInfo, getDesc) =>
             SNoOp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getDesc).asInstanceOf[String])
         case SNull(getInfo) =>
             SNull(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SNumberT(getInfo) =>
             SNumberT(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SObjectExpr(getInfo, getMembers) =>
             SObjectExpr(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getMembers).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Member]])
         case SObjectType(getInfo, getMembers) =>
             SObjectType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getMembers).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.TypeMember]])
         case SOp(getInfo, getText) =>
             SOp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getText).asInstanceOf[String])
         case SParam(getInfo, getName, getMod, getTyp, getDefaultExpr, isOptional, isRest) =>
             SParam(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getMod).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Modifier]], walk(getTyp).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]], walk(getDefaultExpr).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], walk(isOptional).asInstanceOf[Boolean], walk(isRest).asInstanceOf[Boolean])
         case SParenthesized(getInfo, getExpr) =>
             SParenthesized(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
         case SPath(getInfo, getNames) =>
             SPath(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getNames).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Id]])
         case SPrefixOpApp(getInfo, getOp, getRight) =>
             SPrefixOpApp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op], walk(getRight).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
         case SPrivateMod =>
             SPrivateMod
         case SProgram(getInfo, getBody) =>
             SProgram(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.TopLevel])
         case SPropId(getInfo, getId) =>
             SPropId(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
         case SPropNum(getInfo, getNum) =>
             SPropNum(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getNum).asInstanceOf[kr.ac.kaist.jsaf.nodes.NumberLiteral])
         case SPropStr(getInfo, getStr) =>
             SPropStr(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getStr).asInstanceOf[String])
         case SPropertySig(getInfo, getProp, isOptional, getTyp) =>
             SPropertySig(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], walk(isOptional).asInstanceOf[Boolean], walk(getTyp).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]])
         case SPublicMod =>
             SPublicMod
         case SRegularExpression(getInfo, getBody, getFlag) =>
             SRegularExpression(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getBody).asInstanceOf[String], walk(getFlag).asInstanceOf[String])
         case SReturn(getInfo, getExpr) =>
             SReturn(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getExpr).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]])
         case SSetProp(getInfo, getProp, getFtn) =>
             SSetProp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Property], walk(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.Functional])
         case SSourceElements(getInfo, getBody, isStrict) =>
             SSourceElements(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getBody).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.SourceElement]], walk(isStrict).asInstanceOf[Boolean])
         case SStaticMod =>
             SStaticMod
         case SStmtUnit(getInfo, getStmts) =>
             SStmtUnit(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getStmts).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]])
         case SStringLiteral(getInfo, getQuote, getEscaped) =>
             SStringLiteral(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getQuote).asInstanceOf[String], walk(getEscaped).asInstanceOf[String])
         case SStringT(getInfo) =>
             SStringT(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SSwitch(getInfo, getCond, getFrontCases, getDef, getBackCases) =>
             SSwitch(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getFrontCases).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Case]], walk(getDef).asInstanceOf[Option[List[kr.ac.kaist.jsaf.nodes.Stmt]]], walk(getBackCases).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Case]])
         case STSImpDecl(getInfo, getId, getPath) =>
             STSImpDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getPath).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
         case SThis(getInfo) =>
             SThis(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SThrow(getInfo, getExpr) =>
             SThrow(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr])
         case STopLevel(getFds, getVds, getStmts) =>
             STopLevel(walk(getFds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.FunDecl]], walk(getVds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]], walk(getStmts).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.SourceElements]])
         case STry(getInfo, getBody, getCatchBlock, getFin) =>
             STry(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getBody).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Stmt]], walk(getCatchBlock).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Catch]], walk(getFin).asInstanceOf[Option[List[kr.ac.kaist.jsaf.nodes.Stmt]]])
         case STypeName(getInfo, getText, getNames) =>
             STypeName(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getText).asInstanceOf[String], walk(getNames).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Id]])
         case STypeParam(getInfo, getName, getExt) =>
             STypeParam(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getExt).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Type]])
         case STypeQuery(getInfo, getPath) =>
             STypeQuery(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getPath).asInstanceOf[kr.ac.kaist.jsaf.nodes.Path])
         case STypeRef(getInfo, getName, getArgs) =>
             STypeRef(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.TypeName], walk(getArgs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.Type]])
         case SUnaryAssignOpApp(getInfo, getLhs, getOp) =>
             SUnaryAssignOpApp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.LHS], walk(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.Op])
         case SVarDecl(getInfo, getName, getExpr, isStrict) =>
             SVarDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id], walk(getExpr).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.Expr]], walk(isStrict).asInstanceOf[Boolean])
         case SVarRef(getInfo, getId) =>
             SVarRef(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.Id])
         case SVarStmt(getInfo, getVds) =>
             SVarStmt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getVds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.VarDecl]])
         case SVoidT(getInfo) =>
             SVoidT(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo])
         case SWhile(getInfo, getCond, getBody) =>
             SWhile(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
         case SWith(getInfo, getExpr, getStmt) =>
             SWith(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.ASTSpanInfo], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.Expr], walk(getStmt).asInstanceOf[kr.ac.kaist.jsaf.nodes.Stmt])
         case xs:List[_] => xs.map(walk _)
         case xs:Option[_] => xs.map(walk _)
         case _ => node
      }
   }
   def walkUnit(node:Any):Unit = {
       node match {
         case SASTSpanInfo(getSpan, getComment) =>
             walkUnit(getSpan); walkUnit(getComment)
         case SAmbClsDecl(getInfo, getId, getTps, getExt, getImp, getElts) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getTps); walkUnit(getExt); walkUnit(getImp); walkUnit(getElts)
         case SAmbCnstDecl(getInfo, getPs) =>
             walkUnit(getInfo); walkUnit(getPs)
         case SAmbEnumDecl(getInfo, getId, getMem) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getMem)
         case SAmbEnumMem(getInfo, getProp, getNum) =>
             walkUnit(getInfo); walkUnit(getProp); walkUnit(getNum)
         case SAmbExtModDecl(getInfo, getName, getMem) =>
             walkUnit(getInfo); walkUnit(getName); walkUnit(getMem)
         case SAmbExtModElt(getInfo, getDecl) =>
             walkUnit(getInfo); walkUnit(getDecl)
         case SAmbFunDecl(getInfo, getId, getSig) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getSig)
         case SAmbIndDecl(getInfo, getInd) =>
             walkUnit(getInfo); walkUnit(getInd)
         case SAmbMemDecl(getInfo, getMods, getProp, getTyp) =>
             walkUnit(getInfo); walkUnit(getMods); walkUnit(getProp); walkUnit(getTyp)
         case SAmbModDecl(getInfo, getPath, getMem) =>
             walkUnit(getInfo); walkUnit(getPath); walkUnit(getMem)
         case SAmbModElt(getInfo, getDecl) =>
             walkUnit(getInfo); walkUnit(getDecl)
         case SAmbVarDecl(getInfo, getId, getTy) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getTy)
         case SAnonymousFnName(getInfo) =>
             walkUnit(getInfo)
         case SAnyT(getInfo) =>
             walkUnit(getInfo)
         case SArrayExpr(getInfo, getElements) =>
             walkUnit(getInfo); walkUnit(getElements)
         case SArrayNumberExpr(getInfo, getElements) =>
             walkUnit(getInfo); walkUnit(getElements)
         case SArrayType(getInfo, getTyp) =>
             walkUnit(getInfo); walkUnit(getTyp)
         case SAssignOpApp(getInfo, getLhs, getOp, getRight) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getOp); walkUnit(getRight)
         case SBlock(getInfo, getStmts, isInternal) =>
             walkUnit(getInfo); walkUnit(getStmts); walkUnit(isInternal)
         case SBool(getInfo, isBool) =>
             walkUnit(getInfo); walkUnit(isBool)
         case SBoolT(getInfo) =>
             walkUnit(getInfo)
         case SBracket(getInfo, getObj, getIndex) =>
             walkUnit(getInfo); walkUnit(getObj); walkUnit(getIndex)
         case SBreak(getInfo, getTarget) =>
             walkUnit(getInfo); walkUnit(getTarget)
         case SCallSig(getInfo, getTparams, getParams, getTyp) =>
             walkUnit(getInfo); walkUnit(getTparams); walkUnit(getParams); walkUnit(getTyp)
         case SCase(getInfo, getCond, getBody) =>
             walkUnit(getInfo); walkUnit(getCond); walkUnit(getBody)
         case SCatch(getInfo, getId, getBody) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getBody)
         case SComment(getInfo, getComment) =>
             walkUnit(getInfo); walkUnit(getComment)
         case SCond(getInfo, getCond, getTrueBranch, getFalseBranch) =>
             walkUnit(getInfo); walkUnit(getCond); walkUnit(getTrueBranch); walkUnit(getFalseBranch)
         case SConstructSig(getInfo, getTparams, getParams, getTyp) =>
             walkUnit(getInfo); walkUnit(getTparams); walkUnit(getParams); walkUnit(getTyp)
         case SConstructorType(getInfo, getTparams, getParams, getTyp) =>
             walkUnit(getInfo); walkUnit(getTparams); walkUnit(getParams); walkUnit(getTyp)
         case SContinue(getInfo, getTarget) =>
             walkUnit(getInfo); walkUnit(getTarget)
         case SDebugger(getInfo) =>
             walkUnit(getInfo)
         case SDoWhile(getInfo, getBody, getCond) =>
             walkUnit(getInfo); walkUnit(getBody); walkUnit(getCond)
         case SDot(getInfo, getObj, getMember) =>
             walkUnit(getInfo); walkUnit(getObj); walkUnit(getMember)
         case SDoubleLiteral(getInfo, getText, getNum) =>
             walkUnit(getInfo); walkUnit(getText); walkUnit(getNum)
         case SEmptyStmt(getInfo) =>
             walkUnit(getInfo)
         case SExprList(getInfo, getExprs) =>
             walkUnit(getInfo); walkUnit(getExprs)
         case SExprStmt(getInfo, getExpr, isInternal) =>
             walkUnit(getInfo); walkUnit(getExpr); walkUnit(isInternal)
         case SExprType(getInfo, getName) =>
             walkUnit(getInfo); walkUnit(getName)
         case SExtImpDecl(getInfo, getId, getModule) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getModule)
         case SField(getInfo, getProp, getExpr) =>
             walkUnit(getInfo); walkUnit(getProp); walkUnit(getExpr)
         case SFor(getInfo, getInit, getCond, getAction, getBody) =>
             walkUnit(getInfo); walkUnit(getInit); walkUnit(getCond); walkUnit(getAction); walkUnit(getBody)
         case SForIn(getInfo, getLhs, getExpr, getBody) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getExpr); walkUnit(getBody)
         case SForVar(getInfo, getVars, getCond, getAction, getBody) =>
             walkUnit(getInfo); walkUnit(getVars); walkUnit(getCond); walkUnit(getAction); walkUnit(getBody)
         case SForVarIn(getInfo, getVar, getExpr, getBody) =>
             walkUnit(getInfo); walkUnit(getVar); walkUnit(getExpr); walkUnit(getBody)
         case SFunApp(getInfo, getFun, getArgs) =>
             walkUnit(getInfo); walkUnit(getFun); walkUnit(getArgs)
         case SFunDecl(getInfo, getFtn, isStrict) =>
             walkUnit(getInfo); walkUnit(getFtn); walkUnit(isStrict)
         case SFunExpr(getInfo, getFtn) =>
             walkUnit(getInfo); walkUnit(getFtn)
         case SFunctionType(getInfo, getTparams, getParams, getTyp) =>
             walkUnit(getInfo); walkUnit(getTparams); walkUnit(getParams); walkUnit(getTyp)
         case SFunctional(getFds, getVds, getStmts, getName, getParams) =>
             walkUnit(getFds); walkUnit(getVds); walkUnit(getStmts); walkUnit(getName); walkUnit(getParams)
         case SGetProp(getInfo, getProp, getFtn) =>
             walkUnit(getInfo); walkUnit(getProp); walkUnit(getFtn)
         case SId(getInfo, getText, getUniqueName, isWith) =>
             walkUnit(getInfo); walkUnit(getText); walkUnit(getUniqueName); walkUnit(isWith)
         case SIf(getInfo, getCond, getTrueBranch, getFalseBranch) =>
             walkUnit(getInfo); walkUnit(getCond); walkUnit(getTrueBranch); walkUnit(getFalseBranch)
         case SIndexSig(getInfo, getId, getAnnot, isNum) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getAnnot); walkUnit(isNum)
         case SInfixOpApp(getInfo, getLeft, getOp, getRight) =>
             walkUnit(getInfo); walkUnit(getLeft); walkUnit(getOp); walkUnit(getRight)
         case SIntLiteral(getInfo, getIntVal, getRadix) =>
             walkUnit(getInfo); walkUnit(getIntVal); walkUnit(getRadix)
         case SIntfDecl(getInfo, getId, getTps, getExt, getTyp) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getTps); walkUnit(getExt); walkUnit(getTyp)
         case SLabel(getInfo, getId) =>
             walkUnit(getInfo); walkUnit(getId)
         case SLabelStmt(getInfo, getLabel, getStmt) =>
             walkUnit(getInfo); walkUnit(getLabel); walkUnit(getStmt)
         case SMethodSig(getInfo, getProp, isOptional, getSig) =>
             walkUnit(getInfo); walkUnit(getProp); walkUnit(isOptional); walkUnit(getSig)
         case SModDecl(getInfo, getName, getBody) =>
             walkUnit(getInfo); walkUnit(getName); walkUnit(getBody)
         case SModExpAlias(getInfo, getName, getAlias) =>
             walkUnit(getInfo); walkUnit(getName); walkUnit(getAlias)
         case SModExpAssignment(getInfo, getId) =>
             walkUnit(getInfo); walkUnit(getId)
         case SModExpFunDecl(getInfo, getFd) =>
             walkUnit(getInfo); walkUnit(getFd)
         case SModExpGetter(getInfo, getFd) =>
             walkUnit(getInfo); walkUnit(getFd)
         case SModExpName(getInfo, getName) =>
             walkUnit(getInfo); walkUnit(getName)
         case SModExpSetter(getInfo, getFd) =>
             walkUnit(getInfo); walkUnit(getFd)
         case SModExpSpecifiers(getInfo, getNames) =>
             walkUnit(getInfo); walkUnit(getNames)
         case SModExpStar(getInfo) =>
             walkUnit(getInfo)
         case SModExpStarFromPath(getInfo, getModule) =>
             walkUnit(getInfo); walkUnit(getModule)
         case SModExpVarStmt(getInfo, getVds) =>
             walkUnit(getInfo); walkUnit(getVds)
         case SModImpAlias(getInfo, getName, getAlias) =>
             walkUnit(getInfo); walkUnit(getName); walkUnit(getAlias)
         case SModImpAliasClause(getInfo, getName, getAlias) =>
             walkUnit(getInfo); walkUnit(getName); walkUnit(getAlias)
         case SModImpDecl(getInfo, getImports) =>
             walkUnit(getInfo); walkUnit(getImports)
         case SModImpName(getInfo, getName) =>
             walkUnit(getInfo); walkUnit(getName)
         case SModImpSpecifierSet(getInfo, getImports, getModule) =>
             walkUnit(getInfo); walkUnit(getImports); walkUnit(getModule)
         case SNew(getInfo, getLhs) =>
             walkUnit(getInfo); walkUnit(getLhs)
         case SNoOp(getInfo, getDesc) =>
             walkUnit(getInfo); walkUnit(getDesc)
         case SNull(getInfo) =>
             walkUnit(getInfo)
         case SNumberT(getInfo) =>
             walkUnit(getInfo)
         case SObjectExpr(getInfo, getMembers) =>
             walkUnit(getInfo); walkUnit(getMembers)
         case SObjectType(getInfo, getMembers) =>
             walkUnit(getInfo); walkUnit(getMembers)
         case SOp(getInfo, getText) =>
             walkUnit(getInfo); walkUnit(getText)
         case SParam(getInfo, getName, getMod, getTyp, getDefaultExpr, isOptional, isRest) =>
             walkUnit(getInfo); walkUnit(getName); walkUnit(getMod); walkUnit(getTyp); walkUnit(getDefaultExpr); walkUnit(isOptional); walkUnit(isRest)
         case SParenthesized(getInfo, getExpr) =>
             walkUnit(getInfo); walkUnit(getExpr)
         case SPath(getInfo, getNames) =>
             walkUnit(getInfo); walkUnit(getNames)
         case SPrefixOpApp(getInfo, getOp, getRight) =>
             walkUnit(getInfo); walkUnit(getOp); walkUnit(getRight)
         case SPrivateMod =>
             
         case SProgram(getInfo, getBody) =>
             walkUnit(getInfo); walkUnit(getBody)
         case SPropId(getInfo, getId) =>
             walkUnit(getInfo); walkUnit(getId)
         case SPropNum(getInfo, getNum) =>
             walkUnit(getInfo); walkUnit(getNum)
         case SPropStr(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SPropertySig(getInfo, getProp, isOptional, getTyp) =>
             walkUnit(getInfo); walkUnit(getProp); walkUnit(isOptional); walkUnit(getTyp)
         case SPublicMod =>
             
         case SRegularExpression(getInfo, getBody, getFlag) =>
             walkUnit(getInfo); walkUnit(getBody); walkUnit(getFlag)
         case SReturn(getInfo, getExpr) =>
             walkUnit(getInfo); walkUnit(getExpr)
         case SSetProp(getInfo, getProp, getFtn) =>
             walkUnit(getInfo); walkUnit(getProp); walkUnit(getFtn)
         case SSourceElements(getInfo, getBody, isStrict) =>
             walkUnit(getInfo); walkUnit(getBody); walkUnit(isStrict)
         case SStaticMod =>
             
         case SStmtUnit(getInfo, getStmts) =>
             walkUnit(getInfo); walkUnit(getStmts)
         case SStringLiteral(getInfo, getQuote, getEscaped) =>
             walkUnit(getInfo); walkUnit(getQuote); walkUnit(getEscaped)
         case SStringT(getInfo) =>
             walkUnit(getInfo)
         case SSwitch(getInfo, getCond, getFrontCases, getDef, getBackCases) =>
             walkUnit(getInfo); walkUnit(getCond); walkUnit(getFrontCases); walkUnit(getDef); walkUnit(getBackCases)
         case STSImpDecl(getInfo, getId, getPath) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getPath)
         case SThis(getInfo) =>
             walkUnit(getInfo)
         case SThrow(getInfo, getExpr) =>
             walkUnit(getInfo); walkUnit(getExpr)
         case STopLevel(getFds, getVds, getStmts) =>
             walkUnit(getFds); walkUnit(getVds); walkUnit(getStmts)
         case STry(getInfo, getBody, getCatchBlock, getFin) =>
             walkUnit(getInfo); walkUnit(getBody); walkUnit(getCatchBlock); walkUnit(getFin)
         case STypeName(getInfo, getText, getNames) =>
             walkUnit(getInfo); walkUnit(getText); walkUnit(getNames)
         case STypeParam(getInfo, getName, getExt) =>
             walkUnit(getInfo); walkUnit(getName); walkUnit(getExt)
         case STypeQuery(getInfo, getPath) =>
             walkUnit(getInfo); walkUnit(getPath)
         case STypeRef(getInfo, getName, getArgs) =>
             walkUnit(getInfo); walkUnit(getName); walkUnit(getArgs)
         case SUnaryAssignOpApp(getInfo, getLhs, getOp) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getOp)
         case SVarDecl(getInfo, getName, getExpr, isStrict) =>
             walkUnit(getInfo); walkUnit(getName); walkUnit(getExpr); walkUnit(isStrict)
         case SVarRef(getInfo, getId) =>
             walkUnit(getInfo); walkUnit(getId)
         case SVarStmt(getInfo, getVds) =>
             walkUnit(getInfo); walkUnit(getVds)
         case SVoidT(getInfo) =>
             walkUnit(getInfo)
         case SWhile(getInfo, getCond, getBody) =>
             walkUnit(getInfo); walkUnit(getCond); walkUnit(getBody)
         case SWith(getInfo, getExpr, getStmt) =>
             walkUnit(getInfo); walkUnit(getExpr); walkUnit(getStmt)
         case xs:List[_] => xs.foreach(walkUnit _)
         case xs:Option[_] => xs.foreach(walkUnit _)
         case _:Span => 
         case _ => 
      }
   }
}

