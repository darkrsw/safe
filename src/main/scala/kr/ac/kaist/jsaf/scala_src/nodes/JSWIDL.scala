/* THIS FILE WAS AUTOMATICALLY GENERATED BY
   kr.ac.kaist.jsaf.astgen.ScalaWIDLGenerator FROM WIDL.ast */

package kr.ac.kaist.jsaf.scala_src.nodes
import kr.ac.kaist.jsaf.scala_src.useful._
import kr.ac.kaist.jsaf.nodes_util._
import kr.ac.kaist.jsaf.useful.HasAt
import _root_.scala.collection.mutable.ListBuffer
import _root_.java.math.BigInteger
import _root_.java.lang.Double
import kr.ac.kaist.jsaf.scala_src.useful.ASTGenHelper._

object JSWIDL {}

object SWExceptionMember {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WExceptionMember) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo]))
}
object SWIDLNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WIDLNode) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo]))
}
object SWInterfaceMember {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WInterfaceMember) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo]))
}
object SWNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WNode) = 
      Some(())
}
object SWAnyType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WAnyType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getSuffix()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getSuffix:List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]) = 
      new kr.ac.kaist.jsaf.nodes.WAnyType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getSuffix).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]])
}
object SWArgument {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WArgument) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttributes()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getDefault()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WLiteral]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttributes:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getTyp:kr.ac.kaist.jsaf.nodes.WType, getName:String, getDefault:Option[kr.ac.kaist.jsaf.nodes.WLiteral]) = 
      new kr.ac.kaist.jsaf.nodes.WArgument(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttributes).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], javaify(getName).asInstanceOf[String], javaify(getDefault).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.WLiteral]])
}
object SWArrayType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WArrayType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getSuffix()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getSuffix:List[kr.ac.kaist.jsaf.nodes.WTypeSuffix], getTyp:kr.ac.kaist.jsaf.nodes.WType) = 
      new kr.ac.kaist.jsaf.nodes.WArrayType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getSuffix).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType])
}
object SWAttribute {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WAttribute) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getExns()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WQId]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getTyp:kr.ac.kaist.jsaf.nodes.WType, getName:String, getExns:List[kr.ac.kaist.jsaf.nodes.WQId]) = 
      new kr.ac.kaist.jsaf.nodes.WAttribute(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], javaify(getName).asInstanceOf[String], javaify(getExns).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WQId]])
}
object SWBoolean {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WBoolean) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.isValue()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, isValue:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.WBoolean(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(isValue).asInstanceOf[Boolean])
}
object SWCallback {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WCallback) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getReturnType()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], scalaify(node.getArgs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WArgument]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getName:String, getReturnType:kr.ac.kaist.jsaf.nodes.WType, getArgs:List[kr.ac.kaist.jsaf.nodes.WArgument]) = 
      new kr.ac.kaist.jsaf.nodes.WCallback(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getName).asInstanceOf[String], javaify(getReturnType).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], javaify(getArgs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WArgument]])
}
object SWConst {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WConst) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getValue()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WLiteral]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getTyp:kr.ac.kaist.jsaf.nodes.WType, getName:String, getValue:kr.ac.kaist.jsaf.nodes.WLiteral) = 
      new kr.ac.kaist.jsaf.nodes.WConst(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], javaify(getName).asInstanceOf[String], javaify(getValue).asInstanceOf[kr.ac.kaist.jsaf.nodes.WLiteral])
}
object SWDefinition {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WDefinition) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]]))
}
object SWDictionary {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WDictionary) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getParent()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WId]], scalaify(node.getMembers()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WDictionaryMember]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getName:String, getParent:Option[kr.ac.kaist.jsaf.nodes.WId], getMembers:List[kr.ac.kaist.jsaf.nodes.WDictionaryMember]) = 
      new kr.ac.kaist.jsaf.nodes.WDictionary(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getName).asInstanceOf[String], javaify(getParent).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.WId]], javaify(getMembers).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WDictionaryMember]])
}
object SWDictionaryMember {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WDictionaryMember) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getDefault()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WLiteral]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getTyp:kr.ac.kaist.jsaf.nodes.WType, getName:String, getDefault:Option[kr.ac.kaist.jsaf.nodes.WLiteral]) = 
      new kr.ac.kaist.jsaf.nodes.WDictionaryMember(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], javaify(getName).asInstanceOf[String], javaify(getDefault).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.WLiteral]])
}
object SWEAArray {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAArray) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAArray
}
object SWEAAttribute {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAAttribute) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAAttribute
}
object SWEACallback {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEACallback) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEACallback
}
object SWEACallbackFunctionOnly {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEACallbackFunctionOnly) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEACallbackFunctionOnly
}
object SWEAConst {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAConst) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAConst
}
object SWEAConstructor {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAConstructor) = 
      Some((scalaify(node.getArgs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WArgument]]))
   def apply(getArgs:List[kr.ac.kaist.jsaf.nodes.WArgument]) = 
      new kr.ac.kaist.jsaf.nodes.WEAConstructor(javaify(getArgs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WArgument]])
}
object SWEACreator {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEACreator) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEACreator
}
object SWEADeleter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEADeleter) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEADeleter
}
object SWEADictionary {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEADictionary) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEADictionary
}
object SWEAEllipsis {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAEllipsis) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAEllipsis
}
object SWEAEnum {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAEnum) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAEnum
}
object SWEAException {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAException) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAException
}
object SWEAGetter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAGetter) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAGetter
}
object SWEAImplements {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAImplements) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAImplements
}
object SWEAInherit {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAInherit) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAInherit
}
object SWEAInterface {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAInterface) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAInterface
}
object SWEALegacycaller {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEALegacycaller) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEALegacycaller
}
object SWEANoInterfaceObject {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEANoInterfaceObject) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEANoInterfaceObject
}
object SWEAOptional {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAOptional) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAOptional
}
object SWEAPartial {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAPartial) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAPartial
}
object SWEAQuestion {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAQuestion) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAQuestion
}
object SWEAReadonly {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAReadonly) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAReadonly
}
object SWEASetter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEASetter) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEASetter
}
object SWEAStatic {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAStatic) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAStatic
}
object SWEAString {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAString) = 
      Some((scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.WEAString(javaify(getStr).asInstanceOf[String])
}
object SWEAStringifier {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAStringifier) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAStringifier
}
object SWEATypedef {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEATypedef) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEATypedef
}
object SWEAUnrestricted {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAUnrestricted) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WEAUnrestricted
}
object SWEAttribute {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEAttribute) = 
      Some(())
}
object SWEnum {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WEnum) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getEnumValueList()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WString]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getName:String, getEnumValueList:List[kr.ac.kaist.jsaf.nodes.WString]) = 
      new kr.ac.kaist.jsaf.nodes.WEnum(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getName).asInstanceOf[String], javaify(getEnumValueList).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WString]])
}
object SWException {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WException) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getParent()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WId]], scalaify(node.getMembers()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WExceptionMember]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getName:String, getParent:Option[kr.ac.kaist.jsaf.nodes.WId], getMembers:List[kr.ac.kaist.jsaf.nodes.WExceptionMember]) = 
      new kr.ac.kaist.jsaf.nodes.WException(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getName).asInstanceOf[String], javaify(getParent).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.WId]], javaify(getMembers).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WExceptionMember]])
}
object SWExceptionField {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WExceptionField) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], scalaify(node.getName()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getTyp:kr.ac.kaist.jsaf.nodes.WType, getName:String) = 
      new kr.ac.kaist.jsaf.nodes.WExceptionField(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], javaify(getName).asInstanceOf[String])
}
object SWFloat {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WFloat) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getValue()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getValue:String) = 
      new kr.ac.kaist.jsaf.nodes.WFloat(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getValue).asInstanceOf[String])
}
object SWIDL {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WIDL) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo]))
}
object SWIDLNodeInfo {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WIDLNodeInfo) = 
      Some(())
}
object SWId {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WId) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getName()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getName:String) = 
      new kr.ac.kaist.jsaf.nodes.WId(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getName).asInstanceOf[String])
}
object SWImplementsStatement {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WImplementsStatement) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getParent()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getName:String, getParent:String) = 
      new kr.ac.kaist.jsaf.nodes.WImplementsStatement(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getName).asInstanceOf[String], javaify(getParent).asInstanceOf[String])
}
object SWInteger {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WInteger) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getValue()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getValue:String) = 
      new kr.ac.kaist.jsaf.nodes.WInteger(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getValue).asInstanceOf[String])
}
object SWInterface {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WInterface) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getParent()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WId]], scalaify(node.getMembers()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WInterfaceMember]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getName:String, getParent:Option[kr.ac.kaist.jsaf.nodes.WId], getMembers:List[kr.ac.kaist.jsaf.nodes.WInterfaceMember]) = 
      new kr.ac.kaist.jsaf.nodes.WInterface(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getName).asInstanceOf[String], javaify(getParent).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.WId]], javaify(getMembers).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WInterfaceMember]])
}
object SWLiteral {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WLiteral) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo]))
}
object SWMember {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WMember) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]]))
}
object SWModule {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WModule) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getName()).asInstanceOf[String], scalaify(node.getDefs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WDefinition]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getName:String, getDefs:List[kr.ac.kaist.jsaf.nodes.WDefinition]) = 
      new kr.ac.kaist.jsaf.nodes.WModule(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getName).asInstanceOf[String], javaify(getDefs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WDefinition]])
}
object SWNamedType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WNamedType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getSuffix()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], scalaify(node.getName()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getSuffix:List[kr.ac.kaist.jsaf.nodes.WTypeSuffix], getName:String) = 
      new kr.ac.kaist.jsaf.nodes.WNamedType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getSuffix).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], javaify(getName).asInstanceOf[String])
}
object SWNull {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WNull) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.WNull(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo])
}
object SWOperation {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WOperation) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getQualifiers()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WQualifier]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], scalaify(node.getName()).asInstanceOf[Option[String]], scalaify(node.getArgs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WArgument]], scalaify(node.getExns()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WQId]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getQualifiers:List[kr.ac.kaist.jsaf.nodes.WQualifier], getTyp:kr.ac.kaist.jsaf.nodes.WType, getName:Option[String], getArgs:List[kr.ac.kaist.jsaf.nodes.WArgument], getExns:List[kr.ac.kaist.jsaf.nodes.WQId]) = 
      new kr.ac.kaist.jsaf.nodes.WOperation(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getQualifiers).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WQualifier]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], javaify(getName).asInstanceOf[edu.rice.cs.plt.tuple.Option[String]], javaify(getArgs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WArgument]], javaify(getExns).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WQId]])
}
object SWQCreator {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WQCreator) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WQCreator
}
object SWQDeleter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WQDeleter) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WQDeleter
}
object SWQGetter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WQGetter) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WQGetter
}
object SWQId {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WQId) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getName()).asInstanceOf[List[String]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getName:List[String]) = 
      new kr.ac.kaist.jsaf.nodes.WQId(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getName).asInstanceOf[_root_.java.util.List[String]])
}
object SWQLegacycaller {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WQLegacycaller) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WQLegacycaller
}
object SWQSetter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WQSetter) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WQSetter
}
object SWQStatic {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WQStatic) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WQStatic
}
object SWQualifier {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WQualifier) = 
      Some(())
}
object SWSequenceType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WSequenceType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getSuffix()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getSuffix:List[kr.ac.kaist.jsaf.nodes.WTypeSuffix], getTyp:kr.ac.kaist.jsaf.nodes.WType) = 
      new kr.ac.kaist.jsaf.nodes.WSequenceType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getSuffix).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType])
}
object SWString {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WString) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.WString(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getStr).asInstanceOf[String])
}
object SWTSArray {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WTSArray) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WTSArray
}
object SWTSQuestion {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WTSQuestion) = 
      Some(())
   def apply() = 
      new kr.ac.kaist.jsaf.nodes.WTSQuestion
}
object SWType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getSuffix()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]]))
}
object SWTypeSuffix {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WTypeSuffix) = 
      Some(())
}
object SWTypedef {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WTypedef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getAttrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], scalaify(node.getTyp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], scalaify(node.getName()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getAttrs:List[kr.ac.kaist.jsaf.nodes.WEAttribute], getTyp:kr.ac.kaist.jsaf.nodes.WType, getName:String) = 
      new kr.ac.kaist.jsaf.nodes.WTypedef(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getAttrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WEAttribute]], javaify(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], javaify(getName).asInstanceOf[String])
}
object SWUnionType {
   def unapply(node:kr.ac.kaist.jsaf.nodes.WUnionType) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], scalaify(node.getSuffix()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], scalaify(node.getTypes()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WType]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes_util.SpanInfo, getSuffix:List[kr.ac.kaist.jsaf.nodes.WTypeSuffix], getTypes:List[kr.ac.kaist.jsaf.nodes.WType]) = 
      new kr.ac.kaist.jsaf.nodes.WUnionType(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], javaify(getSuffix).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], javaify(getTypes).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.WType]])
}

trait WIDLWalker {
   def apply(node:Any):Any = walk(node)
   def walk(node:Any):Any = {
       node match {
         case SWAnyType(getInfo, getSuffix) =>
             SWAnyType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getSuffix).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]])
         case SWArgument(getInfo, getAttributes, getTyp, getName, getDefault) =>
             SWArgument(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttributes).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], walk(getName).asInstanceOf[String], walk(getDefault).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WLiteral]])
         case SWArrayType(getInfo, getSuffix, getTyp) =>
             SWArrayType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getSuffix).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType])
         case SWAttribute(getInfo, getAttrs, getTyp, getName, getExns) =>
             SWAttribute(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], walk(getName).asInstanceOf[String], walk(getExns).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WQId]])
         case SWBoolean(getInfo, isValue) =>
             SWBoolean(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(isValue).asInstanceOf[Boolean])
         case SWCallback(getInfo, getAttrs, getName, getReturnType, getArgs) =>
             SWCallback(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getName).asInstanceOf[String], walk(getReturnType).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], walk(getArgs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WArgument]])
         case SWConst(getInfo, getAttrs, getTyp, getName, getValue) =>
             SWConst(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], walk(getName).asInstanceOf[String], walk(getValue).asInstanceOf[kr.ac.kaist.jsaf.nodes.WLiteral])
         case SWDictionary(getInfo, getAttrs, getName, getParent, getMembers) =>
             SWDictionary(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getName).asInstanceOf[String], walk(getParent).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WId]], walk(getMembers).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WDictionaryMember]])
         case SWDictionaryMember(getInfo, getAttrs, getTyp, getName, getDefault) =>
             SWDictionaryMember(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], walk(getName).asInstanceOf[String], walk(getDefault).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WLiteral]])
         case SWEAArray =>
             SWEAArray
         case SWEAAttribute =>
             SWEAAttribute
         case SWEACallback =>
             SWEACallback
         case SWEACallbackFunctionOnly =>
             SWEACallbackFunctionOnly
         case SWEAConst =>
             SWEAConst
         case SWEAConstructor(getArgs) =>
             SWEAConstructor(walk(getArgs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WArgument]])
         case SWEACreator =>
             SWEACreator
         case SWEADeleter =>
             SWEADeleter
         case SWEADictionary =>
             SWEADictionary
         case SWEAEllipsis =>
             SWEAEllipsis
         case SWEAEnum =>
             SWEAEnum
         case SWEAException =>
             SWEAException
         case SWEAGetter =>
             SWEAGetter
         case SWEAImplements =>
             SWEAImplements
         case SWEAInherit =>
             SWEAInherit
         case SWEAInterface =>
             SWEAInterface
         case SWEALegacycaller =>
             SWEALegacycaller
         case SWEANoInterfaceObject =>
             SWEANoInterfaceObject
         case SWEAOptional =>
             SWEAOptional
         case SWEAPartial =>
             SWEAPartial
         case SWEAQuestion =>
             SWEAQuestion
         case SWEAReadonly =>
             SWEAReadonly
         case SWEASetter =>
             SWEASetter
         case SWEAStatic =>
             SWEAStatic
         case SWEAString(getStr) =>
             SWEAString(walk(getStr).asInstanceOf[String])
         case SWEAStringifier =>
             SWEAStringifier
         case SWEATypedef =>
             SWEATypedef
         case SWEAUnrestricted =>
             SWEAUnrestricted
         case SWEnum(getInfo, getAttrs, getName, getEnumValueList) =>
             SWEnum(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getName).asInstanceOf[String], walk(getEnumValueList).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WString]])
         case SWException(getInfo, getAttrs, getName, getParent, getMembers) =>
             SWException(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getName).asInstanceOf[String], walk(getParent).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WId]], walk(getMembers).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WExceptionMember]])
         case SWExceptionField(getInfo, getAttrs, getTyp, getName) =>
             SWExceptionField(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], walk(getName).asInstanceOf[String])
         case SWFloat(getInfo, getValue) =>
             SWFloat(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getValue).asInstanceOf[String])
         case SWId(getInfo, getName) =>
             SWId(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getName).asInstanceOf[String])
         case SWImplementsStatement(getInfo, getAttrs, getName, getParent) =>
             SWImplementsStatement(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getName).asInstanceOf[String], walk(getParent).asInstanceOf[String])
         case SWInteger(getInfo, getValue) =>
             SWInteger(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getValue).asInstanceOf[String])
         case SWInterface(getInfo, getAttrs, getName, getParent, getMembers) =>
             SWInterface(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getName).asInstanceOf[String], walk(getParent).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.WId]], walk(getMembers).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WInterfaceMember]])
         case SWModule(getInfo, getAttrs, getName, getDefs) =>
             SWModule(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getName).asInstanceOf[String], walk(getDefs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WDefinition]])
         case SWNamedType(getInfo, getSuffix, getName) =>
             SWNamedType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getSuffix).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], walk(getName).asInstanceOf[String])
         case SWNull(getInfo) =>
             SWNull(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo])
         case SWOperation(getInfo, getAttrs, getQualifiers, getTyp, getName, getArgs, getExns) =>
             SWOperation(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getQualifiers).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WQualifier]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], walk(getName).asInstanceOf[Option[String]], walk(getArgs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WArgument]], walk(getExns).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WQId]])
         case SWQCreator =>
             SWQCreator
         case SWQDeleter =>
             SWQDeleter
         case SWQGetter =>
             SWQGetter
         case SWQId(getInfo, getName) =>
             SWQId(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getName).asInstanceOf[List[String]])
         case SWQLegacycaller =>
             SWQLegacycaller
         case SWQSetter =>
             SWQSetter
         case SWQStatic =>
             SWQStatic
         case SWSequenceType(getInfo, getSuffix, getTyp) =>
             SWSequenceType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getSuffix).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType])
         case SWString(getInfo, getStr) =>
             SWString(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getStr).asInstanceOf[String])
         case SWTSArray =>
             SWTSArray
         case SWTSQuestion =>
             SWTSQuestion
         case SWTypedef(getInfo, getAttrs, getTyp, getName) =>
             SWTypedef(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getAttrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WEAttribute]], walk(getTyp).asInstanceOf[kr.ac.kaist.jsaf.nodes.WType], walk(getName).asInstanceOf[String])
         case SWUnionType(getInfo, getSuffix, getTypes) =>
             SWUnionType(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.SpanInfo], walk(getSuffix).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WTypeSuffix]], walk(getTypes).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.WType]])
         case xs:List[_] => xs.map(walk _)
         case xs:Option[_] => xs.map(walk _)
         case _ => node
      }
   }
   def walkUnit(node:Any):Unit = {
       node match {
         case SWAnyType(getInfo, getSuffix) =>
             walkUnit(getInfo); walkUnit(getSuffix)
         case SWArgument(getInfo, getAttributes, getTyp, getName, getDefault) =>
             walkUnit(getInfo); walkUnit(getAttributes); walkUnit(getTyp); walkUnit(getName); walkUnit(getDefault)
         case SWArrayType(getInfo, getSuffix, getTyp) =>
             walkUnit(getInfo); walkUnit(getSuffix); walkUnit(getTyp)
         case SWAttribute(getInfo, getAttrs, getTyp, getName, getExns) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getTyp); walkUnit(getName); walkUnit(getExns)
         case SWBoolean(getInfo, isValue) =>
             walkUnit(getInfo); walkUnit(isValue)
         case SWCallback(getInfo, getAttrs, getName, getReturnType, getArgs) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getName); walkUnit(getReturnType); walkUnit(getArgs)
         case SWConst(getInfo, getAttrs, getTyp, getName, getValue) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getTyp); walkUnit(getName); walkUnit(getValue)
         case SWDictionary(getInfo, getAttrs, getName, getParent, getMembers) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getName); walkUnit(getParent); walkUnit(getMembers)
         case SWDictionaryMember(getInfo, getAttrs, getTyp, getName, getDefault) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getTyp); walkUnit(getName); walkUnit(getDefault)
         case SWEAArray =>
             
         case SWEAAttribute =>
             
         case SWEACallback =>
             
         case SWEACallbackFunctionOnly =>
             
         case SWEAConst =>
             
         case SWEAConstructor(getArgs) =>
             walkUnit(getArgs)
         case SWEACreator =>
             
         case SWEADeleter =>
             
         case SWEADictionary =>
             
         case SWEAEllipsis =>
             
         case SWEAEnum =>
             
         case SWEAException =>
             
         case SWEAGetter =>
             
         case SWEAImplements =>
             
         case SWEAInherit =>
             
         case SWEAInterface =>
             
         case SWEALegacycaller =>
             
         case SWEANoInterfaceObject =>
             
         case SWEAOptional =>
             
         case SWEAPartial =>
             
         case SWEAQuestion =>
             
         case SWEAReadonly =>
             
         case SWEASetter =>
             
         case SWEAStatic =>
             
         case SWEAString(getStr) =>
             walkUnit(getStr)
         case SWEAStringifier =>
             
         case SWEATypedef =>
             
         case SWEAUnrestricted =>
             
         case SWEnum(getInfo, getAttrs, getName, getEnumValueList) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getName); walkUnit(getEnumValueList)
         case SWException(getInfo, getAttrs, getName, getParent, getMembers) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getName); walkUnit(getParent); walkUnit(getMembers)
         case SWExceptionField(getInfo, getAttrs, getTyp, getName) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getTyp); walkUnit(getName)
         case SWFloat(getInfo, getValue) =>
             walkUnit(getInfo); walkUnit(getValue)
         case SWId(getInfo, getName) =>
             walkUnit(getInfo); walkUnit(getName)
         case SWImplementsStatement(getInfo, getAttrs, getName, getParent) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getName); walkUnit(getParent)
         case SWInteger(getInfo, getValue) =>
             walkUnit(getInfo); walkUnit(getValue)
         case SWInterface(getInfo, getAttrs, getName, getParent, getMembers) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getName); walkUnit(getParent); walkUnit(getMembers)
         case SWModule(getInfo, getAttrs, getName, getDefs) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getName); walkUnit(getDefs)
         case SWNamedType(getInfo, getSuffix, getName) =>
             walkUnit(getInfo); walkUnit(getSuffix); walkUnit(getName)
         case SWNull(getInfo) =>
             walkUnit(getInfo)
         case SWOperation(getInfo, getAttrs, getQualifiers, getTyp, getName, getArgs, getExns) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getQualifiers); walkUnit(getTyp); walkUnit(getName); walkUnit(getArgs); walkUnit(getExns)
         case SWQCreator =>
             
         case SWQDeleter =>
             
         case SWQGetter =>
             
         case SWQId(getInfo, getName) =>
             walkUnit(getInfo); walkUnit(getName)
         case SWQLegacycaller =>
             
         case SWQSetter =>
             
         case SWQStatic =>
             
         case SWSequenceType(getInfo, getSuffix, getTyp) =>
             walkUnit(getInfo); walkUnit(getSuffix); walkUnit(getTyp)
         case SWString(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SWTSArray =>
             
         case SWTSQuestion =>
             
         case SWTypedef(getInfo, getAttrs, getTyp, getName) =>
             walkUnit(getInfo); walkUnit(getAttrs); walkUnit(getTyp); walkUnit(getName)
         case SWUnionType(getInfo, getSuffix, getTypes) =>
             walkUnit(getInfo); walkUnit(getSuffix); walkUnit(getTypes)
         case xs:List[_] => xs.foreach(walkUnit _)
         case xs:Option[_] => xs.foreach(walkUnit _)
         case _:Span => 
         case _ => 
      }
   }
}

