/* THIS FILE WAS AUTOMATICALLY GENERATED BY
   kr.ac.kaist.jsaf.astgen.ScalaIRGenerator FROM IR.ast */

package kr.ac.kaist.jsaf.scala_src.nodes
import kr.ac.kaist.jsaf.scala_src.useful._
import kr.ac.kaist.jsaf.nodes_util._
import kr.ac.kaist.jsaf.useful.HasAt
import _root_.scala.collection.mutable.ListBuffer
import _root_.java.math.BigInteger
import _root_.java.lang.Double
import kr.ac.kaist.jsaf.scala_src.useful.ASTGenHelper._

object JSIR {}

object SIRNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRNode) = 
      Some(())
}
object SIRAbstractNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRAbstractNode) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
}
object SIRArgs {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRArgs) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getElements()).asInstanceOf[List[Option[kr.ac.kaist.jsaf.nodes.IRExpr]]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getElements:List[Option[kr.ac.kaist.jsaf.nodes.IRExpr]]) = 
      new kr.ac.kaist.jsaf.nodes.IRArgs(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getElements).asInstanceOf[_root_.java.util.List[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.IRExpr]]])
}
object SIRArray {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRArray) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getElements()).asInstanceOf[List[Option[kr.ac.kaist.jsaf.nodes.IRExpr]]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getElements:List[Option[kr.ac.kaist.jsaf.nodes.IRExpr]]) = 
      new kr.ac.kaist.jsaf.nodes.IRArray(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getElements).asInstanceOf[_root_.java.util.List[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.IRExpr]]])
}
object SIRArrayNumber {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRArrayNumber) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getElements()).asInstanceOf[List[_root_.java.lang.Double]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getElements:List[_root_.java.lang.Double]) = 
      new kr.ac.kaist.jsaf.nodes.IRArrayNumber(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getElements).asInstanceOf[_root_.java.util.List[_root_.java.lang.Double]])
}
object SIRAssign {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRAssign) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId]))
}
object SIRBin {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRBin) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getFirst()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], scalaify(node.getOp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IROp], scalaify(node.getSecond()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getFirst:kr.ac.kaist.jsaf.nodes.IRExpr, getOp:kr.ac.kaist.jsaf.nodes.IROp, getSecond:kr.ac.kaist.jsaf.nodes.IRExpr) = 
      new kr.ac.kaist.jsaf.nodes.IRBin(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getFirst).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], javaify(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.IROp], javaify(getSecond).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
}
object SIRBool {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRBool) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.isBool()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, isBool:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.IRBool(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(isBool).asInstanceOf[Boolean])
}
object SIRBreak {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRBreak) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLabel()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLabel:kr.ac.kaist.jsaf.nodes.IRId) = 
      new kr.ac.kaist.jsaf.nodes.IRBreak(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLabel).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId])
}
object SIRCall {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRCall) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getFun()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getThisB()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getArgs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getFun:kr.ac.kaist.jsaf.nodes.IRId, getThisB:kr.ac.kaist.jsaf.nodes.IRId, getArgs:kr.ac.kaist.jsaf.nodes.IRId) = 
      new kr.ac.kaist.jsaf.nodes.IRCall(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getFun).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getThisB).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getArgs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId])
}
object SIRDelete {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRDelete) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getId:kr.ac.kaist.jsaf.nodes.IRId) = 
      new kr.ac.kaist.jsaf.nodes.IRDelete(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId])
}
object SIRDeleteProp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRDeleteProp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getObj()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getIndex()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getObj:kr.ac.kaist.jsaf.nodes.IRId, getIndex:kr.ac.kaist.jsaf.nodes.IRExpr) = 
      new kr.ac.kaist.jsaf.nodes.IRDeleteProp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getIndex).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
}
object SIREval {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IREval) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getArg()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getArg:kr.ac.kaist.jsaf.nodes.IRExpr) = 
      new kr.ac.kaist.jsaf.nodes.IREval(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getArg).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
}
object SIRExpr {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
}
object SIRExprStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRExprStmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getRight()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], scalaify(node.isRef()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getRight:kr.ac.kaist.jsaf.nodes.IRExpr, isRef:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.IRExprStmt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getRight).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], javaify(isRef).asInstanceOf[Boolean])
}
object SIRField {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRField) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getProp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getProp:kr.ac.kaist.jsaf.nodes.IRId, getExpr:kr.ac.kaist.jsaf.nodes.IRExpr) = 
      new kr.ac.kaist.jsaf.nodes.IRField(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
}
object SIRFunDecl {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRFunDecl) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getFtn()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getFtn:kr.ac.kaist.jsaf.nodes.IRFunctional) = 
      new kr.ac.kaist.jsaf.nodes.IRFunDecl(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional])
}
object SIRFunExpr {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRFunExpr) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getFtn()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getFtn:kr.ac.kaist.jsaf.nodes.IRFunctional) = 
      new kr.ac.kaist.jsaf.nodes.IRFunExpr(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional])
}
object SIRFunctional {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRFunctional) = 
      Some((scalaify(node.isFromSource()).asInstanceOf[Boolean], scalaify(node.getName()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getParams()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRId]], scalaify(node.getArgs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]], scalaify(node.getFds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRFunDecl]], scalaify(node.getVds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRVarStmt]], scalaify(node.getBody()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]]))
   def apply(isFromSource:Boolean, getName:kr.ac.kaist.jsaf.nodes.IRId, getParams:List[kr.ac.kaist.jsaf.nodes.IRId], getArgs:List[kr.ac.kaist.jsaf.nodes.IRStmt], getFds:List[kr.ac.kaist.jsaf.nodes.IRFunDecl], getVds:List[kr.ac.kaist.jsaf.nodes.IRVarStmt], getBody:List[kr.ac.kaist.jsaf.nodes.IRStmt]) = 
      new kr.ac.kaist.jsaf.nodes.IRFunctional(javaify(isFromSource).asInstanceOf[Boolean], javaify(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getParams).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRId]], javaify(getArgs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRStmt]], javaify(getFds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRFunDecl]], javaify(getVds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRVarStmt]], javaify(getBody).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRStmt]])
}
object SIRGetProp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRGetProp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getFtn()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getFtn:kr.ac.kaist.jsaf.nodes.IRFunctional) = 
      new kr.ac.kaist.jsaf.nodes.IRGetProp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional])
}
object SIRId {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRId) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getOriginalName()).asInstanceOf[String], scalaify(node.getUniqueName()).asInstanceOf[String], scalaify(node.isGlobal()).asInstanceOf[Boolean]))
}
object SIRIf {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRIf) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], scalaify(node.getTrueB()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt], scalaify(node.getFalseB()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRStmt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getExpr:kr.ac.kaist.jsaf.nodes.IRExpr, getTrueB:kr.ac.kaist.jsaf.nodes.IRStmt, getFalseB:Option[kr.ac.kaist.jsaf.nodes.IRStmt]) = 
      new kr.ac.kaist.jsaf.nodes.IRIf(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], javaify(getTrueB).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt], javaify(getFalseB).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.IRStmt]])
}
object SIRInfoNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRInfoNode) = 
      Some((scalaify(node.isFromSource()).asInstanceOf[Boolean]))
}
object SIRInternalCall {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRInternalCall) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getFun()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getFirst()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], scalaify(node.getSecond()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRId]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getFun:kr.ac.kaist.jsaf.nodes.IRId, getFirst:kr.ac.kaist.jsaf.nodes.IRExpr, getSecond:Option[kr.ac.kaist.jsaf.nodes.IRId]) = 
      new kr.ac.kaist.jsaf.nodes.IRInternalCall(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getFun).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getFirst).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], javaify(getSecond).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.IRId]])
}
object SIRLabelStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRLabelStmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLabel()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getStmt()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLabel:kr.ac.kaist.jsaf.nodes.IRId, getStmt:kr.ac.kaist.jsaf.nodes.IRStmt) = 
      new kr.ac.kaist.jsaf.nodes.IRLabelStmt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLabel).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getStmt).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt])
}
object SIRLoad {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRLoad) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getObj()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getIndex()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getObj:kr.ac.kaist.jsaf.nodes.IRId, getIndex:kr.ac.kaist.jsaf.nodes.IRExpr) = 
      new kr.ac.kaist.jsaf.nodes.IRLoad(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getIndex).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
}
object SIRMember {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRMember) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
}
object SIRNew {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRNew) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getFun()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getArgs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRId]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getFun:kr.ac.kaist.jsaf.nodes.IRId, getArgs:List[kr.ac.kaist.jsaf.nodes.IRId]) = 
      new kr.ac.kaist.jsaf.nodes.IRNew(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getFun).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getArgs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRId]])
}
object SIRNoOp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRNoOp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getDesc()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getDesc:String) = 
      new kr.ac.kaist.jsaf.nodes.IRNoOp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getDesc).asInstanceOf[String])
}
object SIRNull {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRNull) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.IRNull(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo])
}
object SIRNumber {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRNumber) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getText()).asInstanceOf[String], scalaify(node.getNum()).asInstanceOf[_root_.java.lang.Double]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getText:String, getNum:_root_.java.lang.Double) = 
      new kr.ac.kaist.jsaf.nodes.IRNumber(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getText).asInstanceOf[String], javaify(getNum).asInstanceOf[_root_.java.lang.Double])
}
object SIRObject {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRObject) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getMembers()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRMember]], scalaify(node.getProto()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRId]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, getMembers:List[kr.ac.kaist.jsaf.nodes.IRMember], getProto:Option[kr.ac.kaist.jsaf.nodes.IRId]) = 
      new kr.ac.kaist.jsaf.nodes.IRObject(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getMembers).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRMember]], javaify(getProto).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.IRId]])
}
object SIROp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IROp) = 
      Some((scalaify(node.getText()).asInstanceOf[String], scalaify(node.getKind()).asInstanceOf[Int]))
   def apply(getText:String, getKind:Int) = 
      new kr.ac.kaist.jsaf.nodes.IROp(javaify(getText).asInstanceOf[String], javaify(getKind).asInstanceOf[Int])
}
object SIROpApp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IROpApp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
}
object SIRPVal {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRPVal) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
}
object SIRReturn {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRReturn) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getExpr()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRExpr]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getExpr:Option[kr.ac.kaist.jsaf.nodes.IRExpr]) = 
      new kr.ac.kaist.jsaf.nodes.IRReturn(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getExpr).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.IRExpr]])
}
object SIRRoot {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRRoot) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getFds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRFunDecl]], scalaify(node.getVds()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRVarStmt]], scalaify(node.getIrs()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getFds:List[kr.ac.kaist.jsaf.nodes.IRFunDecl], getVds:List[kr.ac.kaist.jsaf.nodes.IRVarStmt], getIrs:List[kr.ac.kaist.jsaf.nodes.IRStmt]) = 
      new kr.ac.kaist.jsaf.nodes.IRRoot(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getFds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRFunDecl]], javaify(getVds).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRVarStmt]], javaify(getIrs).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRStmt]])
}
object SIRSeq {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRSeq) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getStmts()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getStmts:List[kr.ac.kaist.jsaf.nodes.IRStmt]) = 
      new kr.ac.kaist.jsaf.nodes.IRSeq(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getStmts).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRStmt]])
}
object SIRSetProp {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRSetProp) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getFtn()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getFtn:kr.ac.kaist.jsaf.nodes.IRFunctional) = 
      new kr.ac.kaist.jsaf.nodes.IRSetProp(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional])
}
object SIRSpanInfo {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRSpanInfo) = 
      Some((scalaify(node.isFromSource()).asInstanceOf[Boolean], scalaify(node.getSpan()).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.Span]))
   def apply(isFromSource:Boolean, getSpan:kr.ac.kaist.jsaf.nodes_util.Span) = 
      new kr.ac.kaist.jsaf.nodes.IRSpanInfo(javaify(isFromSource).asInstanceOf[Boolean], javaify(getSpan).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.Span])
}
object SIRStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRStmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
}
object SIRStmtUnit {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRStmtUnit) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getStmts()).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getStmts:List[kr.ac.kaist.jsaf.nodes.IRStmt]) = 
      new kr.ac.kaist.jsaf.nodes.IRStmtUnit(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getStmts).asInstanceOf[_root_.java.util.List[kr.ac.kaist.jsaf.nodes.IRStmt]])
}
object SIRStore {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRStore) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getObj()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getIndex()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], scalaify(node.getRhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getObj:kr.ac.kaist.jsaf.nodes.IRId, getIndex:kr.ac.kaist.jsaf.nodes.IRExpr, getRhs:kr.ac.kaist.jsaf.nodes.IRExpr) = 
      new kr.ac.kaist.jsaf.nodes.IRStore(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getIndex).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], javaify(getRhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
}
object SIRString {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRString) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.IRString(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getStr).asInstanceOf[String])
}
object SIRThis {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRThis) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.IRThis(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo])
}
object SIRThrow {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRThrow) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getExpr:kr.ac.kaist.jsaf.nodes.IRExpr) = 
      new kr.ac.kaist.jsaf.nodes.IRThrow(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
}
object SIRTmpId {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRTmpId) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getOriginalName()).asInstanceOf[String], scalaify(node.getUniqueName()).asInstanceOf[String], scalaify(node.isGlobal()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getOriginalName:String, getUniqueName:String, isGlobal:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.IRTmpId(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getOriginalName).asInstanceOf[String], javaify(getUniqueName).asInstanceOf[String], javaify(isGlobal).asInstanceOf[Boolean])
}
object SIRTry {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRTry) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt], scalaify(node.getName()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRId]], scalaify(node.getCatchB()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRStmt]], scalaify(node.getFinallyB()).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRStmt]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getBody:kr.ac.kaist.jsaf.nodes.IRStmt, getName:Option[kr.ac.kaist.jsaf.nodes.IRId], getCatchB:Option[kr.ac.kaist.jsaf.nodes.IRStmt], getFinallyB:Option[kr.ac.kaist.jsaf.nodes.IRStmt]) = 
      new kr.ac.kaist.jsaf.nodes.IRTry(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt], javaify(getName).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.IRId]], javaify(getCatchB).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.IRStmt]], javaify(getFinallyB).asInstanceOf[edu.rice.cs.plt.tuple.Option[kr.ac.kaist.jsaf.nodes.IRStmt]])
}
object SIRUn {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRUn) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getOp()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IROp], scalaify(node.getExpr()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getOp:kr.ac.kaist.jsaf.nodes.IROp, getExpr:kr.ac.kaist.jsaf.nodes.IRExpr) = 
      new kr.ac.kaist.jsaf.nodes.IRUn(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.IROp], javaify(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
}
object SIRUndef {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRUndef) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo) = 
      new kr.ac.kaist.jsaf.nodes.IRUndef(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo])
}
object SIRUserId {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRUserId) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getOriginalName()).asInstanceOf[String], scalaify(node.getUniqueName()).asInstanceOf[String], scalaify(node.isGlobal()).asInstanceOf[Boolean], scalaify(node.isWith()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getOriginalName:String, getUniqueName:String, isGlobal:Boolean, isWith:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.IRUserId(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getOriginalName).asInstanceOf[String], javaify(getUniqueName).asInstanceOf[String], javaify(isGlobal).asInstanceOf[Boolean], javaify(isWith).asInstanceOf[Boolean])
}
object SIRVal {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRVal) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo]))
}
object SIRVarStmt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRVarStmt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getLhs()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.isFromParam()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getLhs:kr.ac.kaist.jsaf.nodes.IRId, isFromParam:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.IRVarStmt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(isFromParam).asInstanceOf[Boolean])
}
object SIRWhile {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRWhile) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getCond()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], scalaify(node.getBody()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getCond:kr.ac.kaist.jsaf.nodes.IRExpr, getBody:kr.ac.kaist.jsaf.nodes.IRStmt) = 
      new kr.ac.kaist.jsaf.nodes.IRWhile(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], javaify(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt])
}
object SIRWith {
   def unapply(node:kr.ac.kaist.jsaf.nodes.IRWith) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], scalaify(node.getId()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], scalaify(node.getStmt()).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.IRSpanInfo, getId:kr.ac.kaist.jsaf.nodes.IRId, getStmt:kr.ac.kaist.jsaf.nodes.IRStmt) = 
      new kr.ac.kaist.jsaf.nodes.IRWith(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], javaify(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], javaify(getStmt).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt])
}

trait IRWalker {
   def apply(node:Any):Any = walk(node)
   def walk(node:Any):Any = {
       node match {
         case SIRArgs(getInfo, getLhs, getElements) =>
             SIRArgs(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getElements).asInstanceOf[List[Option[kr.ac.kaist.jsaf.nodes.IRExpr]]])
         case SIRArray(getInfo, getLhs, getElements) =>
             SIRArray(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getElements).asInstanceOf[List[Option[kr.ac.kaist.jsaf.nodes.IRExpr]]])
         case SIRArrayNumber(getInfo, getLhs, getElements) =>
             SIRArrayNumber(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getElements).asInstanceOf[List[_root_.java.lang.Double]])
         case SIRBin(getInfo, getFirst, getOp, getSecond) =>
             SIRBin(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getFirst).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], walk(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.IROp], walk(getSecond).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
         case SIRBool(getInfo, isBool) =>
             SIRBool(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(isBool).asInstanceOf[Boolean])
         case SIRBreak(getInfo, getLabel) =>
             SIRBreak(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLabel).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId])
         case SIRCall(getInfo, getLhs, getFun, getThisB, getArgs) =>
             SIRCall(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getFun).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getThisB).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getArgs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId])
         case SIRDelete(getInfo, getLhs, getId) =>
             SIRDelete(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId])
         case SIRDeleteProp(getInfo, getLhs, getObj, getIndex) =>
             SIRDeleteProp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getIndex).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
         case SIREval(getInfo, getLhs, getArg) =>
             SIREval(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getArg).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
         case SIRExprStmt(getInfo, getLhs, getRight, isRef) =>
             SIRExprStmt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getRight).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], walk(isRef).asInstanceOf[Boolean])
         case SIRField(getInfo, getProp, getExpr) =>
             SIRField(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getProp).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
         case SIRFunDecl(getInfo, getFtn) =>
             SIRFunDecl(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional])
         case SIRFunExpr(getInfo, getLhs, getFtn) =>
             SIRFunExpr(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional])
         case SIRFunctional(isFromSource, getName, getParams, getArgs, getFds, getVds, getBody) =>
             SIRFunctional(walk(isFromSource).asInstanceOf[Boolean], walk(getName).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getParams).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRId]], walk(getArgs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]], walk(getFds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRFunDecl]], walk(getVds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRVarStmt]], walk(getBody).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]])
         case SIRGetProp(getInfo, getFtn) =>
             SIRGetProp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional])
         case SIRIf(getInfo, getExpr, getTrueB, getFalseB) =>
             SIRIf(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], walk(getTrueB).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt], walk(getFalseB).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRStmt]])
         case SIRInternalCall(getInfo, getLhs, getFun, getFirst, getSecond) =>
             SIRInternalCall(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getFun).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getFirst).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], walk(getSecond).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRId]])
         case SIRLabelStmt(getInfo, getLabel, getStmt) =>
             SIRLabelStmt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLabel).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getStmt).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt])
         case SIRLoad(getInfo, getObj, getIndex) =>
             SIRLoad(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getIndex).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
         case SIRNew(getInfo, getLhs, getFun, getArgs) =>
             SIRNew(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getFun).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getArgs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRId]])
         case SIRNoOp(getInfo, getDesc) =>
             SIRNoOp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getDesc).asInstanceOf[String])
         case SIRNull(getInfo) =>
             SIRNull(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo])
         case SIRNumber(getInfo, getText, getNum) =>
             SIRNumber(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getText).asInstanceOf[String], walk(getNum).asInstanceOf[_root_.java.lang.Double])
         case SIRObject(getInfo, getLhs, getMembers, getProto) =>
             SIRObject(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getMembers).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRMember]], walk(getProto).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRId]])
         case SIROp(getText, getKind) =>
             SIROp(walk(getText).asInstanceOf[String], walk(getKind).asInstanceOf[Int])
         case SIRReturn(getInfo, getExpr) =>
             SIRReturn(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getExpr).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRExpr]])
         case SIRRoot(getInfo, getFds, getVds, getIrs) =>
             SIRRoot(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getFds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRFunDecl]], walk(getVds).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRVarStmt]], walk(getIrs).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]])
         case SIRSeq(getInfo, getStmts) =>
             SIRSeq(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getStmts).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]])
         case SIRSetProp(getInfo, getFtn) =>
             SIRSetProp(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getFtn).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRFunctional])
         case SIRSpanInfo(isFromSource, getSpan) =>
             SIRSpanInfo(walk(isFromSource).asInstanceOf[Boolean], walk(getSpan).asInstanceOf[kr.ac.kaist.jsaf.nodes_util.Span])
         case SIRStmtUnit(getInfo, getStmts) =>
             SIRStmtUnit(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getStmts).asInstanceOf[List[kr.ac.kaist.jsaf.nodes.IRStmt]])
         case SIRStore(getInfo, getObj, getIndex, getRhs) =>
             SIRStore(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getObj).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getIndex).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], walk(getRhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
         case SIRString(getInfo, getStr) =>
             SIRString(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getStr).asInstanceOf[String])
         case SIRThis(getInfo) =>
             SIRThis(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo])
         case SIRThrow(getInfo, getExpr) =>
             SIRThrow(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
         case SIRTmpId(getInfo, getOriginalName, getUniqueName, isGlobal) =>
             SIRTmpId(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getOriginalName).asInstanceOf[String], walk(getUniqueName).asInstanceOf[String], walk(isGlobal).asInstanceOf[Boolean])
         case SIRTry(getInfo, getBody, getName, getCatchB, getFinallyB) =>
             SIRTry(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt], walk(getName).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRId]], walk(getCatchB).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRStmt]], walk(getFinallyB).asInstanceOf[Option[kr.ac.kaist.jsaf.nodes.IRStmt]])
         case SIRUn(getInfo, getOp, getExpr) =>
             SIRUn(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getOp).asInstanceOf[kr.ac.kaist.jsaf.nodes.IROp], walk(getExpr).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr])
         case SIRUndef(getInfo) =>
             SIRUndef(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo])
         case SIRUserId(getInfo, getOriginalName, getUniqueName, isGlobal, isWith) =>
             SIRUserId(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getOriginalName).asInstanceOf[String], walk(getUniqueName).asInstanceOf[String], walk(isGlobal).asInstanceOf[Boolean], walk(isWith).asInstanceOf[Boolean])
         case SIRVarStmt(getInfo, getLhs, isFromParam) =>
             SIRVarStmt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getLhs).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(isFromParam).asInstanceOf[Boolean])
         case SIRWhile(getInfo, getCond, getBody) =>
             SIRWhile(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getCond).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRExpr], walk(getBody).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt])
         case SIRWith(getInfo, getId, getStmt) =>
             SIRWith(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRSpanInfo], walk(getId).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRId], walk(getStmt).asInstanceOf[kr.ac.kaist.jsaf.nodes.IRStmt])
         case xs:List[_] => xs.map(walk _)
         case xs:Option[_] => xs.map(walk _)
         case _ => node
      }
   }
   def walkUnit(node:Any):Unit = {
       node match {
         case SIRArgs(getInfo, getLhs, getElements) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getElements)
         case SIRArray(getInfo, getLhs, getElements) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getElements)
         case SIRArrayNumber(getInfo, getLhs, getElements) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getElements)
         case SIRBin(getInfo, getFirst, getOp, getSecond) =>
             walkUnit(getInfo); walkUnit(getFirst); walkUnit(getOp); walkUnit(getSecond)
         case SIRBool(getInfo, isBool) =>
             walkUnit(getInfo); walkUnit(isBool)
         case SIRBreak(getInfo, getLabel) =>
             walkUnit(getInfo); walkUnit(getLabel)
         case SIRCall(getInfo, getLhs, getFun, getThisB, getArgs) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getFun); walkUnit(getThisB); walkUnit(getArgs)
         case SIRDelete(getInfo, getLhs, getId) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getId)
         case SIRDeleteProp(getInfo, getLhs, getObj, getIndex) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getObj); walkUnit(getIndex)
         case SIREval(getInfo, getLhs, getArg) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getArg)
         case SIRExprStmt(getInfo, getLhs, getRight, isRef) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getRight); walkUnit(isRef)
         case SIRField(getInfo, getProp, getExpr) =>
             walkUnit(getInfo); walkUnit(getProp); walkUnit(getExpr)
         case SIRFunDecl(getInfo, getFtn) =>
             walkUnit(getInfo); walkUnit(getFtn)
         case SIRFunExpr(getInfo, getLhs, getFtn) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getFtn)
         case SIRFunctional(isFromSource, getName, getParams, getArgs, getFds, getVds, getBody) =>
             walkUnit(isFromSource); walkUnit(getName); walkUnit(getParams); walkUnit(getArgs); walkUnit(getFds); walkUnit(getVds); walkUnit(getBody)
         case SIRGetProp(getInfo, getFtn) =>
             walkUnit(getInfo); walkUnit(getFtn)
         case SIRIf(getInfo, getExpr, getTrueB, getFalseB) =>
             walkUnit(getInfo); walkUnit(getExpr); walkUnit(getTrueB); walkUnit(getFalseB)
         case SIRInternalCall(getInfo, getLhs, getFun, getFirst, getSecond) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getFun); walkUnit(getFirst); walkUnit(getSecond)
         case SIRLabelStmt(getInfo, getLabel, getStmt) =>
             walkUnit(getInfo); walkUnit(getLabel); walkUnit(getStmt)
         case SIRLoad(getInfo, getObj, getIndex) =>
             walkUnit(getInfo); walkUnit(getObj); walkUnit(getIndex)
         case SIRNew(getInfo, getLhs, getFun, getArgs) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getFun); walkUnit(getArgs)
         case SIRNoOp(getInfo, getDesc) =>
             walkUnit(getInfo); walkUnit(getDesc)
         case SIRNull(getInfo) =>
             walkUnit(getInfo)
         case SIRNumber(getInfo, getText, getNum) =>
             walkUnit(getInfo); walkUnit(getText); walkUnit(getNum)
         case SIRObject(getInfo, getLhs, getMembers, getProto) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(getMembers); walkUnit(getProto)
         case SIROp(getText, getKind) =>
             walkUnit(getText); walkUnit(getKind)
         case SIRReturn(getInfo, getExpr) =>
             walkUnit(getInfo); walkUnit(getExpr)
         case SIRRoot(getInfo, getFds, getVds, getIrs) =>
             walkUnit(getInfo); walkUnit(getFds); walkUnit(getVds); walkUnit(getIrs)
         case SIRSeq(getInfo, getStmts) =>
             walkUnit(getInfo); walkUnit(getStmts)
         case SIRSetProp(getInfo, getFtn) =>
             walkUnit(getInfo); walkUnit(getFtn)
         case SIRSpanInfo(isFromSource, getSpan) =>
             walkUnit(isFromSource); walkUnit(getSpan)
         case SIRStmtUnit(getInfo, getStmts) =>
             walkUnit(getInfo); walkUnit(getStmts)
         case SIRStore(getInfo, getObj, getIndex, getRhs) =>
             walkUnit(getInfo); walkUnit(getObj); walkUnit(getIndex); walkUnit(getRhs)
         case SIRString(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SIRThis(getInfo) =>
             walkUnit(getInfo)
         case SIRThrow(getInfo, getExpr) =>
             walkUnit(getInfo); walkUnit(getExpr)
         case SIRTmpId(getInfo, getOriginalName, getUniqueName, isGlobal) =>
             walkUnit(getInfo); walkUnit(getOriginalName); walkUnit(getUniqueName); walkUnit(isGlobal)
         case SIRTry(getInfo, getBody, getName, getCatchB, getFinallyB) =>
             walkUnit(getInfo); walkUnit(getBody); walkUnit(getName); walkUnit(getCatchB); walkUnit(getFinallyB)
         case SIRUn(getInfo, getOp, getExpr) =>
             walkUnit(getInfo); walkUnit(getOp); walkUnit(getExpr)
         case SIRUndef(getInfo) =>
             walkUnit(getInfo)
         case SIRUserId(getInfo, getOriginalName, getUniqueName, isGlobal, isWith) =>
             walkUnit(getInfo); walkUnit(getOriginalName); walkUnit(getUniqueName); walkUnit(isGlobal); walkUnit(isWith)
         case SIRVarStmt(getInfo, getLhs, isFromParam) =>
             walkUnit(getInfo); walkUnit(getLhs); walkUnit(isFromParam)
         case SIRWhile(getInfo, getCond, getBody) =>
             walkUnit(getInfo); walkUnit(getCond); walkUnit(getBody)
         case SIRWith(getInfo, getId, getStmt) =>
             walkUnit(getInfo); walkUnit(getId); walkUnit(getStmt)
         case xs:List[_] => xs.foreach(walkUnit _)
         case xs:Option[_] => xs.foreach(walkUnit _)
         case _:Span => 
         case _ => 
      }
   }
}

