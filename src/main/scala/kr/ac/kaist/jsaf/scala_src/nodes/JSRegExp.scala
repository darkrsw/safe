/* THIS FILE WAS AUTOMATICALLY GENERATED BY
   kr.ac.kaist.jsaf.astgen.ScalaRegExpGenerator FROM RegExp>.ast */

package kr.ac.kaist.jsaf.scala_src.nodes
import kr.ac.kaist.jsaf.scala_src.useful._
import kr.ac.kaist.jsaf.nodes_util._
import kr.ac.kaist.jsaf.useful.HasAt
import _root_.scala.collection.mutable.ListBuffer
import _root_.java.math.BigInteger
import _root_.java.lang.Double
import kr.ac.kaist.jsaf.scala_src.useful.ASTGenHelper._

object JSRegExp {}

object SRegExpNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpNode) = 
      Some(())
}
object SRegExpAbstractNode {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAbstractNode) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpAlternative {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAlternative) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpAssertion {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAssertion) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpAssertionCaret {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAssertionCaret) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpAssertionCaret(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpAssertionDollar {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAssertionDollar) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpAssertionDollar(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpAssertionEqual {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAssertionEqual) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getD()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getD:kr.ac.kaist.jsaf.nodes.RegExpDisjunction) = 
      new kr.ac.kaist.jsaf.nodes.RegExpAssertionEqual(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getD).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
}
object SRegExpAssertionExcla {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAssertionExcla) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getD()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getD:kr.ac.kaist.jsaf.nodes.RegExpDisjunction) = 
      new kr.ac.kaist.jsaf.nodes.RegExpAssertionExcla(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getD).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
}
object SRegExpAssertionLowerCaseB {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAssertionLowerCaseB) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpAssertionLowerCaseB(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpAssertionUpperCaseB {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAssertionUpperCaseB) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpAssertionUpperCaseB(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpAtom {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAtom) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpAtomEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAtomEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpAtomQuantifier {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpAtomQuantifier) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getAtom()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAtom], scalaify(node.getQuant()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpQuantifier]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getAtom:kr.ac.kaist.jsaf.nodes.RegExpAtom, getQuant:kr.ac.kaist.jsaf.nodes.RegExpQuantifier) = 
      new kr.ac.kaist.jsaf.nodes.RegExpAtomQuantifier(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getAtom).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAtom], javaify(getQuant).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpQuantifier])
}
object SRegExpBaseDisjunction {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpBaseDisjunction) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getA()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAlternative]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getA:kr.ac.kaist.jsaf.nodes.RegExpAlternative) = 
      new kr.ac.kaist.jsaf.nodes.RegExpBaseDisjunction(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAlternative])
}
object SRegExpCapturingParensInfo {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpCapturingParensInfo) = 
      Some((scalaify(node.getParenCount()).asInstanceOf[Int]))
   def apply(getParenCount:Int) = 
      new kr.ac.kaist.jsaf.nodes.RegExpCapturingParensInfo(javaify(getParenCount).asInstanceOf[Int])
}
object SRegExpCharacterClass {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpCharacterClass) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpCharacterClassEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpCharacterClassEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.RegExpCharacterClassEscape(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getStr).asInstanceOf[String])
}
object SRegExpCharacterClassExclusion {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpCharacterClassExclusion) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getR()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassRanges]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getR:kr.ac.kaist.jsaf.nodes.RegExpClassRanges) = 
      new kr.ac.kaist.jsaf.nodes.RegExpCharacterClassExclusion(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getR).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassRanges])
}
object SRegExpCharacterClassInclusion {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpCharacterClassInclusion) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getR()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassRanges]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getR:kr.ac.kaist.jsaf.nodes.RegExpClassRanges) = 
      new kr.ac.kaist.jsaf.nodes.RegExpCharacterClassInclusion(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getR).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassRanges])
}
object SRegExpCharacterEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpCharacterEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpClassAtom {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassAtom) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpClassAtomDash {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassAtomDash) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpClassAtomDash(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpClassAtomNoDash {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassAtomNoDash) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpClassAtomNoDashCharacter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassAtomNoDashCharacter) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.RegExpClassAtomNoDashCharacter(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getStr).asInstanceOf[String])
}
object SRegExpClassCharacterClassEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassCharacterClassEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getEsc()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpCharacterClassEscape]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getEsc:kr.ac.kaist.jsaf.nodes.RegExpCharacterClassEscape) = 
      new kr.ac.kaist.jsaf.nodes.RegExpClassCharacterClassEscape(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getEsc).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpCharacterClassEscape])
}
object SRegExpClassCharacterEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassCharacterEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getEsc()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpCharacterEscape]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getEsc:kr.ac.kaist.jsaf.nodes.RegExpCharacterEscape) = 
      new kr.ac.kaist.jsaf.nodes.RegExpClassCharacterEscape(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getEsc).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpCharacterEscape])
}
object SRegExpClassDecimalEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassDecimalEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getEsc()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDecimalEscape]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getEsc:kr.ac.kaist.jsaf.nodes.RegExpDecimalEscape) = 
      new kr.ac.kaist.jsaf.nodes.RegExpClassDecimalEscape(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getEsc).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDecimalEscape])
}
object SRegExpClassEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpClassEscapeB {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassEscapeB) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpClassEscapeB(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpClassRanges {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassRanges) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpClassRangesInfo {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpClassRangesInfo) = 
      Some((scalaify(node.isNoCaret()).asInstanceOf[Boolean]))
   def apply(isNoCaret:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.RegExpClassRangesInfo(javaify(isNoCaret).asInstanceOf[Boolean])
}
object SRegExpConsAlternative {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpConsAlternative) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getA()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAlternative], scalaify(node.getT()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpTerm]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getA:kr.ac.kaist.jsaf.nodes.RegExpAlternative, getT:kr.ac.kaist.jsaf.nodes.RegExpTerm) = 
      new kr.ac.kaist.jsaf.nodes.RegExpConsAlternative(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAlternative], javaify(getT).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpTerm])
}
object SRegExpConsDisjunction {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpConsDisjunction) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getA()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAlternative], scalaify(node.getD()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getA:kr.ac.kaist.jsaf.nodes.RegExpAlternative, getD:kr.ac.kaist.jsaf.nodes.RegExpDisjunction) = 
      new kr.ac.kaist.jsaf.nodes.RegExpConsDisjunction(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAlternative], javaify(getD).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
}
object SRegExpControlEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpControlEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.RegExpControlEscape(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getStr).asInstanceOf[String])
}
object SRegExpControlLetter {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpControlLetter) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.RegExpControlLetter(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getStr).asInstanceOf[String])
}
object SRegExpDecimalEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpDecimalEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.RegExpDecimalEscape(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getStr).asInstanceOf[String])
}
object SRegExpDisjunction {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpDisjunction) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpDot {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpDot) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpDot(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpEmptyAlternative {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpEmptyAlternative) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpEmptyAlternative(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpEmptyClassRanges {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpEmptyClassRanges) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpEmptyClassRanges(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpHexEscapeSequence {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpHexEscapeSequence) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.RegExpHexEscapeSequence(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getStr).asInstanceOf[String])
}
object SRegExpIdentityEscape {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpIdentityEscape) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.RegExpIdentityEscape(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getStr).asInstanceOf[String])
}
object SRegExpNodeInfo {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      Some(())
}
object SRegExpNonemptyClassRanges {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRanges) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpNonemptyClassRangesAtom {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRangesAtom) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getA()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getA:kr.ac.kaist.jsaf.nodes.RegExpClassAtom) = 
      new kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRangesAtom(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom])
}
object SRegExpNonemptyClassRangesAtoms {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRangesAtoms) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getA()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom], scalaify(node.getR()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRanges]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getA:kr.ac.kaist.jsaf.nodes.RegExpClassAtom, getR:kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRanges) = 
      new kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRangesAtoms(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom], javaify(getR).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRanges])
}
object SRegExpNonemptyClassRangesDash {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRangesDash) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getA1()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom], scalaify(node.getA2()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom], scalaify(node.getR()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassRanges]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getA1:kr.ac.kaist.jsaf.nodes.RegExpClassAtom, getA2:kr.ac.kaist.jsaf.nodes.RegExpClassAtom, getR:kr.ac.kaist.jsaf.nodes.RegExpClassRanges) = 
      new kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRangesDash(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getA1).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom], javaify(getA2).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom], javaify(getR).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassRanges])
}
object SRegExpParen {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpParen) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getDisjunction()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getDisjunction:kr.ac.kaist.jsaf.nodes.RegExpDisjunction) = 
      new kr.ac.kaist.jsaf.nodes.RegExpParen(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getDisjunction).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
}
object SRegExpParenOpt {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpParenOpt) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getDisjunction()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getDisjunction:kr.ac.kaist.jsaf.nodes.RegExpDisjunction) = 
      new kr.ac.kaist.jsaf.nodes.RegExpParenOpt(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getDisjunction).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
}
object SRegExpPattern {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpPattern) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getDisjunction()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getDisjunction:kr.ac.kaist.jsaf.nodes.RegExpDisjunction) = 
      new kr.ac.kaist.jsaf.nodes.RegExpPattern(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getDisjunction).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
}
object SRegExpPatternChar {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpPatternChar) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.RegExpPatternChar(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getStr).asInstanceOf[String])
}
object SRegExpQuantifier {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpQuantifier) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getPrefix()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpQuantifierPrefix], scalaify(node.isGreedy()).asInstanceOf[Boolean]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getPrefix:kr.ac.kaist.jsaf.nodes.RegExpQuantifierPrefix, isGreedy:Boolean) = 
      new kr.ac.kaist.jsaf.nodes.RegExpQuantifier(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getPrefix).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpQuantifierPrefix], javaify(isGreedy).asInstanceOf[Boolean])
}
object SRegExpQuantifierNumber {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpQuantifierNumber) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getFirst()).asInstanceOf[Int], scalaify(node.getSecond()).asInstanceOf[Option[Int]]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getFirst:Int, getSecond:Option[Int]) = 
      new kr.ac.kaist.jsaf.nodes.RegExpQuantifierNumber(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getFirst).asInstanceOf[_root_.java.lang.Integer], javaify(getSecond).asInstanceOf[edu.rice.cs.plt.tuple.Option[_root_.java.lang.Integer]])
}
object SRegExpQuantifierPlus {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpQuantifierPlus) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpQuantifierPlus(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpQuantifierPrefix {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpQuantifierPrefix) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpQuantifierQuest {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpQuantifierQuest) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpQuantifierQuest(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpQuantifierStar {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpQuantifierStar) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo) = 
      new kr.ac.kaist.jsaf.nodes.RegExpQuantifierStar(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
}
object SRegExpTerm {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpTerm) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo]))
}
object SRegExpUnicodeEscapeSequence {
   def unapply(node:kr.ac.kaist.jsaf.nodes.RegExpUnicodeEscapeSequence) = 
      Some((scalaify(node.getInfo()).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], scalaify(node.getStr()).asInstanceOf[String]))
   def apply(getInfo:kr.ac.kaist.jsaf.nodes.RegExpNodeInfo, getStr:String) = 
      new kr.ac.kaist.jsaf.nodes.RegExpUnicodeEscapeSequence(javaify(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], javaify(getStr).asInstanceOf[String])
}

trait RegExpWalker {
   def apply(node:Any):Any = walk(node)
   def walk(node:Any):Any = {
       node match {
         case SRegExpAssertionCaret(getInfo) =>
             SRegExpAssertionCaret(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpAssertionDollar(getInfo) =>
             SRegExpAssertionDollar(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpAssertionEqual(getInfo, getD) =>
             SRegExpAssertionEqual(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getD).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
         case SRegExpAssertionExcla(getInfo, getD) =>
             SRegExpAssertionExcla(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getD).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
         case SRegExpAssertionLowerCaseB(getInfo) =>
             SRegExpAssertionLowerCaseB(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpAssertionUpperCaseB(getInfo) =>
             SRegExpAssertionUpperCaseB(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpAtomQuantifier(getInfo, getAtom, getQuant) =>
             SRegExpAtomQuantifier(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getAtom).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAtom], walk(getQuant).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpQuantifier])
         case SRegExpBaseDisjunction(getInfo, getA) =>
             SRegExpBaseDisjunction(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAlternative])
         case SRegExpCapturingParensInfo(getParenCount) =>
             SRegExpCapturingParensInfo(walk(getParenCount).asInstanceOf[Int])
         case SRegExpCharacterClassEscape(getInfo, getStr) =>
             SRegExpCharacterClassEscape(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getStr).asInstanceOf[String])
         case SRegExpCharacterClassExclusion(getInfo, getR) =>
             SRegExpCharacterClassExclusion(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getR).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassRanges])
         case SRegExpCharacterClassInclusion(getInfo, getR) =>
             SRegExpCharacterClassInclusion(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getR).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassRanges])
         case SRegExpClassAtomDash(getInfo) =>
             SRegExpClassAtomDash(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpClassAtomNoDashCharacter(getInfo, getStr) =>
             SRegExpClassAtomNoDashCharacter(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getStr).asInstanceOf[String])
         case SRegExpClassCharacterClassEscape(getInfo, getEsc) =>
             SRegExpClassCharacterClassEscape(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getEsc).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpCharacterClassEscape])
         case SRegExpClassCharacterEscape(getInfo, getEsc) =>
             SRegExpClassCharacterEscape(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getEsc).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpCharacterEscape])
         case SRegExpClassDecimalEscape(getInfo, getEsc) =>
             SRegExpClassDecimalEscape(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getEsc).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDecimalEscape])
         case SRegExpClassEscapeB(getInfo) =>
             SRegExpClassEscapeB(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpClassRangesInfo(isNoCaret) =>
             SRegExpClassRangesInfo(walk(isNoCaret).asInstanceOf[Boolean])
         case SRegExpConsAlternative(getInfo, getA, getT) =>
             SRegExpConsAlternative(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAlternative], walk(getT).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpTerm])
         case SRegExpConsDisjunction(getInfo, getA, getD) =>
             SRegExpConsDisjunction(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpAlternative], walk(getD).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
         case SRegExpControlEscape(getInfo, getStr) =>
             SRegExpControlEscape(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getStr).asInstanceOf[String])
         case SRegExpControlLetter(getInfo, getStr) =>
             SRegExpControlLetter(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getStr).asInstanceOf[String])
         case SRegExpDecimalEscape(getInfo, getStr) =>
             SRegExpDecimalEscape(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getStr).asInstanceOf[String])
         case SRegExpDot(getInfo) =>
             SRegExpDot(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpEmptyAlternative(getInfo) =>
             SRegExpEmptyAlternative(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpEmptyClassRanges(getInfo) =>
             SRegExpEmptyClassRanges(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpHexEscapeSequence(getInfo, getStr) =>
             SRegExpHexEscapeSequence(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getStr).asInstanceOf[String])
         case SRegExpIdentityEscape(getInfo, getStr) =>
             SRegExpIdentityEscape(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getStr).asInstanceOf[String])
         case SRegExpNonemptyClassRangesAtom(getInfo, getA) =>
             SRegExpNonemptyClassRangesAtom(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom])
         case SRegExpNonemptyClassRangesAtoms(getInfo, getA, getR) =>
             SRegExpNonemptyClassRangesAtoms(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getA).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom], walk(getR).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNonemptyClassRanges])
         case SRegExpNonemptyClassRangesDash(getInfo, getA1, getA2, getR) =>
             SRegExpNonemptyClassRangesDash(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getA1).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom], walk(getA2).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassAtom], walk(getR).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpClassRanges])
         case SRegExpParen(getInfo, getDisjunction) =>
             SRegExpParen(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getDisjunction).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
         case SRegExpParenOpt(getInfo, getDisjunction) =>
             SRegExpParenOpt(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getDisjunction).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
         case SRegExpPattern(getInfo, getDisjunction) =>
             SRegExpPattern(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getDisjunction).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpDisjunction])
         case SRegExpPatternChar(getInfo, getStr) =>
             SRegExpPatternChar(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getStr).asInstanceOf[String])
         case SRegExpQuantifier(getInfo, getPrefix, isGreedy) =>
             SRegExpQuantifier(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getPrefix).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpQuantifierPrefix], walk(isGreedy).asInstanceOf[Boolean])
         case SRegExpQuantifierNumber(getInfo, getFirst, getSecond) =>
             SRegExpQuantifierNumber(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getFirst).asInstanceOf[Int], walk(getSecond).asInstanceOf[Option[Int]])
         case SRegExpQuantifierPlus(getInfo) =>
             SRegExpQuantifierPlus(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpQuantifierQuest(getInfo) =>
             SRegExpQuantifierQuest(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpQuantifierStar(getInfo) =>
             SRegExpQuantifierStar(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo])
         case SRegExpUnicodeEscapeSequence(getInfo, getStr) =>
             SRegExpUnicodeEscapeSequence(walk(getInfo).asInstanceOf[kr.ac.kaist.jsaf.nodes.RegExpNodeInfo], walk(getStr).asInstanceOf[String])
         case xs:List[_] => xs.map(walk _)
         case xs:Option[_] => xs.map(walk _)
         case _ => node
      }
   }
   def walkUnit(node:Any):Unit = {
       node match {
         case SRegExpAssertionCaret(getInfo) =>
             walkUnit(getInfo)
         case SRegExpAssertionDollar(getInfo) =>
             walkUnit(getInfo)
         case SRegExpAssertionEqual(getInfo, getD) =>
             walkUnit(getInfo); walkUnit(getD)
         case SRegExpAssertionExcla(getInfo, getD) =>
             walkUnit(getInfo); walkUnit(getD)
         case SRegExpAssertionLowerCaseB(getInfo) =>
             walkUnit(getInfo)
         case SRegExpAssertionUpperCaseB(getInfo) =>
             walkUnit(getInfo)
         case SRegExpAtomQuantifier(getInfo, getAtom, getQuant) =>
             walkUnit(getInfo); walkUnit(getAtom); walkUnit(getQuant)
         case SRegExpBaseDisjunction(getInfo, getA) =>
             walkUnit(getInfo); walkUnit(getA)
         case SRegExpCapturingParensInfo(getParenCount) =>
             walkUnit(getParenCount)
         case SRegExpCharacterClassEscape(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SRegExpCharacterClassExclusion(getInfo, getR) =>
             walkUnit(getInfo); walkUnit(getR)
         case SRegExpCharacterClassInclusion(getInfo, getR) =>
             walkUnit(getInfo); walkUnit(getR)
         case SRegExpClassAtomDash(getInfo) =>
             walkUnit(getInfo)
         case SRegExpClassAtomNoDashCharacter(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SRegExpClassCharacterClassEscape(getInfo, getEsc) =>
             walkUnit(getInfo); walkUnit(getEsc)
         case SRegExpClassCharacterEscape(getInfo, getEsc) =>
             walkUnit(getInfo); walkUnit(getEsc)
         case SRegExpClassDecimalEscape(getInfo, getEsc) =>
             walkUnit(getInfo); walkUnit(getEsc)
         case SRegExpClassEscapeB(getInfo) =>
             walkUnit(getInfo)
         case SRegExpClassRangesInfo(isNoCaret) =>
             walkUnit(isNoCaret)
         case SRegExpConsAlternative(getInfo, getA, getT) =>
             walkUnit(getInfo); walkUnit(getA); walkUnit(getT)
         case SRegExpConsDisjunction(getInfo, getA, getD) =>
             walkUnit(getInfo); walkUnit(getA); walkUnit(getD)
         case SRegExpControlEscape(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SRegExpControlLetter(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SRegExpDecimalEscape(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SRegExpDot(getInfo) =>
             walkUnit(getInfo)
         case SRegExpEmptyAlternative(getInfo) =>
             walkUnit(getInfo)
         case SRegExpEmptyClassRanges(getInfo) =>
             walkUnit(getInfo)
         case SRegExpHexEscapeSequence(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SRegExpIdentityEscape(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SRegExpNonemptyClassRangesAtom(getInfo, getA) =>
             walkUnit(getInfo); walkUnit(getA)
         case SRegExpNonemptyClassRangesAtoms(getInfo, getA, getR) =>
             walkUnit(getInfo); walkUnit(getA); walkUnit(getR)
         case SRegExpNonemptyClassRangesDash(getInfo, getA1, getA2, getR) =>
             walkUnit(getInfo); walkUnit(getA1); walkUnit(getA2); walkUnit(getR)
         case SRegExpParen(getInfo, getDisjunction) =>
             walkUnit(getInfo); walkUnit(getDisjunction)
         case SRegExpParenOpt(getInfo, getDisjunction) =>
             walkUnit(getInfo); walkUnit(getDisjunction)
         case SRegExpPattern(getInfo, getDisjunction) =>
             walkUnit(getInfo); walkUnit(getDisjunction)
         case SRegExpPatternChar(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case SRegExpQuantifier(getInfo, getPrefix, isGreedy) =>
             walkUnit(getInfo); walkUnit(getPrefix); walkUnit(isGreedy)
         case SRegExpQuantifierNumber(getInfo, getFirst, getSecond) =>
             walkUnit(getInfo); walkUnit(getFirst); walkUnit(getSecond)
         case SRegExpQuantifierPlus(getInfo) =>
             walkUnit(getInfo)
         case SRegExpQuantifierQuest(getInfo) =>
             walkUnit(getInfo)
         case SRegExpQuantifierStar(getInfo) =>
             walkUnit(getInfo)
         case SRegExpUnicodeEscapeSequence(getInfo, getStr) =>
             walkUnit(getInfo); walkUnit(getStr)
         case xs:List[_] => xs.foreach(walkUnit _)
         case xs:Option[_] => xs.foreach(walkUnit _)
         case _:Span => 
         case _ => 
      }
   }
}

